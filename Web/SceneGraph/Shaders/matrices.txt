

// Here we assume a texture of size 512 x 512 has been loaded.
// that gives a maximum number of matrices of 65536
// See OGLTexture2D.bindImageMatrix for the loading code.
mat4 loadMatrixFromTexture(
  in sampler2D sampler,
  in float textureHeight,
  in int index
){
  vec2 factor = vec2(1.0 / 512.0, 1.0 / textureHeight);
  float x = mod(float(index), 128.0) * 4.0;
  float y = float(index) / 128.0;
  return mat4(texture2D(sampler,vec2(x,y) * factor),
              texture2D(sampler,vec2(x+1.0,y) * factor),
              texture2D(sampler,vec2(x+2.0,y) * factor),
              texture2D(sampler,vec2(x+3.0,y) * factor));

}


mat3 inverseAndTransposeMat33(in mat3 m)
{
  float det = m[0].x * m[1].y * m[2].z
            + m[0].y * m[1].z * m[2].x
            + m[0].z * m[1].x * m[2].y
            - m[0].x * m[1].z * m[2].y
            - m[0].y * m[1].x * m[2].z
            - m[0].z * m[1].y * m[2].x;
  float invDet = 1.0 / det;

  mat3 result;

  result[0].x = (m[1].y * m[2].z - m[1].z * m[2].y) * invDet;
  result[1].x = (m[0].z * m[2].y - m[0].y * m[2].z) * invDet;
  result[2].x = (m[0].y * m[1].z - m[0].z * m[1].y) * invDet;

  result[0].y = (m[1].z * m[2].x - m[1].x * m[2].z) * invDet;
  result[1].y = (m[0].x * m[2].z - m[0].z * m[2].x) * invDet;
  result[2].y = (m[0].z * m[1].x - m[0].x * m[1].z) * invDet;

  result[0].z = (m[1].x * m[2].y - m[1].y * m[2].x) * invDet;
  result[1].z = (m[0].y * m[2].x - m[0].x * m[2].y) * invDet;
  result[2].z = (m[0].x * m[1].y - m[0].y * m[1].x) * invDet;
  return result;
}