<?xml version="1.0" encoding="UTF-8"?>
<shader>
  <name>PhongReflectMaterial</name>
  
  <uniforms>
    <uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
    <uniform name="u_lightType" constant="lightType" type="Integer" owner="light"/>
    <uniform name="u_lightDir" constant="lightDir" type="Vec3" owner="light"/>
    <uniform name="u_lightColor" constant="lightColor" type="Color" owner="light"/>
    <uniform name="u_lightCosCutoff" constant="lightCosCutoff" type="Scalar" owner="light"/>
    
    <uniform name="u_materialAmbientColor" constant="ambientColor" type="Color" defaultValue="FABRIC.RT.rgba(0.0,0.0,0.0,1)"/>
    <uniform name="u_materialDiffuseColor" constant="diffuseColor" type="Color" defaultValue="FABRIC.RT.rgba(0.8,0,0,1)"/>
    <uniform name="u_materialSpecularColor" constant="specularColor" type="Color" defaultValue="FABRIC.RT.rgba(0.5,0.5,0.5,1)"/>
    <uniform name="u_materialShininess" constant="shininess" type="Scalar" defaultValue="20.0"/>
    
    <uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_modelViewMatrix" constant="modelViewMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_normalMatrix" constant="normalMatrix" type="Mat33" owner="instance"/>
    
    <uniform name="u_samplerCube" constant="cubeMapTexture" type="Integer" owner="cubeMapTexture"/>
  </uniforms>
  
  <attributes>
    <attribute name="a_position" binding="positions"/>
    <attribute name="a_normal" binding="normals"/>
  </attributes>
  
  <lights>
    <light type="Light" binding="light"/>
  </lights>
  
  <textures>
    <texture binding="cubeMapTexture"/>
  </textures>
  
  <vertexshader>
    <source>
      uniform mat4 u_modelViewProjectionMatrix;
      uniform mat4 u_modelViewMatrix;
      uniform mat3 u_normalMatrix;
      uniform vec4 u_lightPosition;
      
      attribute vec4 a_position;
      attribute vec3 a_normal;

      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 viewDir;
      varying vec3 reflectDir;

      void main(){
        normal = u_normalMatrix * a_normal;
        vec4 modelCameraPosition = u_modelViewMatrix * a_position;
  
        lightDir = vec3(u_lightPosition - modelCameraPosition);

        viewDir = vec3(-modelCameraPosition);
        
        // Calculate reflected vector
      //  vec3 normalDir = normalize(vec3(vec4(a_normal, 0.0) * u_modelMatrixInverse));
        reflectDir = reflect(viewDir, normal);
        
        gl_Position = u_modelViewProjectionMatrix * a_position;
      }
    </source>
  </vertexshader>
  
  <fragmentshader>
    <source>
      <![CDATA[
      uniform int u_lightType;
      uniform vec3 u_lightDir;
      uniform vec4 u_lightColor;
      uniform float u_lightCosCutoff;

      uniform float u_materialShininess;
      uniform vec4 u_materialAmbientColor;
      uniform vec4 u_materialDiffuseColor;
      uniform vec4 u_materialSpecularColor;

      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 viewDir;
      varying vec3 reflectDir;
      
      uniform samplerCube u_samplerCube;
      
      ]]>
      </source>
      <include file="lighting.txt"/>
      <source>
      <![CDATA[
      
      
      void main(){
        
        vec3 Ln = normalize(lightDir);
        vec3 Vn = normalize(viewDir);
        vec3 Nn = normalize(normal);
        vec3 Rn = normalize(reflectDir);
        
        
        vec4 cube_color = textureCube(u_samplerCube, Rn);
        float reflect_factor = 0.4;//dot( Ln, Rn );
        
        vec4 diffuseColor = mix(u_materialDiffuseColor, cube_color, reflect_factor);
        
        float lightFactor = 1.0;
        gl_FragColor = phong_shading( Nn, 
                        Ln, 
                        Vn, 
                        u_lightType,
                        u_lightDir,
                        lightFactor,
                        u_lightCosCutoff,
                        u_lightColor,
                        diffuseColor, 
                        u_materialSpecularColor,
                        u_materialShininess,
                        u_materialAmbientColor );

      }

      ]]>
    </source>
  </fragmentshader>
</shader>
