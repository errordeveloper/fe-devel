
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Math;
use Vec2;

function BezierKeyframe(Scalar time, Scalar value, Vec2 intangent, Vec2 outtangent) {
  this.time = time;
  this.value = value;
  this.intangent = intangent;
  this.outtangent = outtangent;
  this.flags = 0;
}

function BezierKeyframe(Scalar time, Scalar value) {
  this.time = time;
  this.value = value;
  this.intangent.set(-0.333, 0.0);
  this.outtangent.set(0.333, 0.0);
  this.flags = 0;
}

function Boolean isZero(Scalar x) {
  Scalar EQN_EPS = 1e-4;
  return (x > - EQN_EPS && x < EQN_EPS);
}

function Scalar cbrt(Scalar v) {
  return pow(v, 1.0 / 3.0);
}

function Integer FindRootsToCubic(
  Scalar c[4],
  io Scalar roots[3]
) {
  Scalar sub;
  Integer i, num;
  Scalar A, B, C;
  Scalar sq_A, p, q;
  Scalar cb_p, D;

  // normal form: x^3 + Ax^2 + Bx + C = 0

  A = c[2] / c[3];
  B = c[1] / c[3];
  C = c[0] / c[3];

  // substitute x = y - A/3 to eliminate quadric term:
  // x^3 +px + q = 0

  sq_A = A * A;
  p = 1.0 / 3.0 * (-1.0 / 3.0 * sq_A + B);
  q = 1.0 / 2.0 * (2.0 / 27.0 * A * sq_A - 1.0 / 3.0 * A * B + C);

  // use Cardano's formula

  cb_p = p * p * p;
  D = q * q + cb_p;

  if (isZero(D)) {
    if (isZero(q))// one triple solution
    {
      roots[0] = 0.0;
      num = 1;
    }
    else // one single and one double solution
    {
      Scalar u = cbrt(-q);
      roots[0] = 2.0 * u;
      roots[1] = - u;
      num = 2;
    }
  }
  else if (D < 0)// Casus irreducibilis: three real solutions
  {
    Scalar phi = 1.0 / 3 * acos(-q / sqrt(-cb_p));
    Scalar t = 2.0 * sqrt(-p);

    roots[0] = t * cos(phi);
    roots[1] = - t * cos(phi + PI / 3);
    roots[2] = - t * cos(phi - PI
    / 3);
    num = 3;
  }
  else // one real solution
  {
    Scalar sqrt_D = sqrt(D);
    Scalar u = cbrt(sqrt_D - q);
    Scalar v = - cbrt(sqrt_D + q);

    roots[0] = u + v;
    num = 1;
  }

  // resubstitute

  sub = 1.0 / 3.0 * A;

  for (i = 0; i < num; ++ i) {
    roots[i] -= sub;
  }
  return num;
}

function Scalar BezierKeyframe.interpolate(BezierKeyframe key2, Scalar t) {
  Vec2 outvec, invec;
  outvec.x = this.time + this.outtangent.x;
  outvec.y = this.value + this.outtangent.y;
  invec.x = key2.time + key2.intangent.x;
  invec.y = key2.value + key2.intangent.y;
  
  outvec.x = Math_clamp(outvec.x, this.time, key2.time);
  invec.x = Math_clamp(invec.x, this.time, key2.time);

  Scalar u = (t - this.time) / (key2.time - this.time);
  Scalar s = 1.0 - u;
  Scalar u2 = u * u;

  // ax3+bx2+cx+d=0
  Scalar Ax, Bx, Cx, Dx;
  Ax = key2.time - this.time - 3.0 * invec.x + 3.0 * outvec.x;
  Bx = this.time - 2.0 * outvec.x + invec.x;
  Cx = - this.time + outvec.x;
  Dx = this.time - t;
  
  Scalar Ay, By, Cy, Dy;
  Ay = key2.value - this.value - 3.0 * invec.y + 3.0 * outvec.y;
  By = this.value - 2.0 * outvec.y + invec.y;
  Cy = - this.value + outvec.y;
  Dy = this.value;

  Scalar c[4];
  Scalar roots[3];
  c[0] = Dx;
  c[1] = 3.0 * Cx;
  c[2] = 3.0 * Bx;
  c[3] = Ax;

  Scalar v;
  if (isZero(Ax) && isZero(Bx)) {
    v = u;
  }
  else if (t == this.time) {
    return this.value;
  }
  else if (t == key2.time) {
    return key2.value;
  }
  else {
    Integer numroots = FindRootsToCubic(c, roots);
    // Count is the number of solutions to the cubic equation
    if (numroots == 1) {
      v = roots[0]; // One solution, just return it
    }
    else {
      v = - 1.0;
      for (Integer i = 0; i < numroots; i++) {
        // make sure the solution is within 0..1
        if ((roots[i] >= 0.0) && (roots[i] <= 1.0)) {
          // Get the largest solution
          if (v < 0.0) v = roots[i];
            else if (roots[i] > v) v = roots[i];
          }
      }
    }
  }

  Scalar v2 = v * v;
  Scalar v3 = v2 * v;
  return (Ay * v3 + 3.0 * By * v2 + 3.0 * Cy * v + Dy);
}
