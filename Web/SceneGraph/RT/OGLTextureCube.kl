
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

// The 6 sides of the cube area loaded in as individual textures,
// and the data pointers are stored in the OGLTextureCube member.
// Once all the 6 sides have been loaded, then the cube map can be generated.

use OGLTexture2D;

function OGLTextureCube.storeData(
  RGBA imageLDR[],
  Size width,
  Size height,
  Integer faceID
) {
  if(width != height){
    report("ERROR: cube map images must be square");
  }
  if(this.textureData.size() == 0){
    this.textureData.resize(6);
    this.textureDataSize.resize(6);
    this.size = width;
  }
  else if(width != this.size){
    report("ERROR: cube map images must all be the same size");
  }
  this.textureData[faceID] = imageLDR;
  this.textureDataSize[faceID] = imageLDR.dataSize();
}

function Boolean OGLTextureCube.isFaceDataStored(
  Integer faceID
){
  return (this.textureData.size() == 6 && this.textureDataSize[faceID] > 0);
}

function Boolean OGLTextureCube.isLoaded(){
  return (this.textureDataSize.size() == 6 &&
     this.textureDataSize[0] > 0 &&
     this.textureDataSize[1] > 0 &&
     this.textureDataSize[2] > 0 &&
     this.textureDataSize[3] > 0 &&
     this.textureDataSize[4] > 0 &&
     this.textureDataSize[5] > 0
    );
}

function OGLTextureCube.configure(io Integer textureUnit) {
  var Data NULL;
//  report("OGLTextureCube.configure:");
  if(!this.isLoaded()){
    return;
  }
  var Size buffers[];
  buffers.resize(1);
  glGenTextures(1, buffers);
  this.bufferID = buffers[0];
  
  glActiveTexture(GL_TEXTURE0 + textureUnit);
  glBindTexture(GL_TEXTURE_CUBE_MAP, this.bufferID);
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  
  glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, this.glInternalFormat, this.size, this.size, 0, this.glFormat, this.glType, this.textureData[0].data());
  glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X, 0, this.glInternalFormat, this.size, this.size, 0, this.glFormat, this.glType, this.textureData[1].data());
  glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y, 0, this.glInternalFormat, this.size, this.size, 0, this.glFormat, this.glType, this.textureData[2].data());
  glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, this.glInternalFormat, this.size, this.size, 0, this.glFormat, this.glType, this.textureData[3].data());
  glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z, 0, this.glInternalFormat, this.size, this.size, 0, this.glFormat, this.glType, this.textureData[4].data());
  glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, this.glInternalFormat, this.size, this.size, 0, this.glFormat, this.glType, this.textureData[5].data());
  glBindTexture(GL_TEXTURE_CUBE_MAP, 0);
  
}

function OGLTextureCube.bind(io Integer textureUnit){
  glActiveTexture(GL_TEXTURE0 + textureUnit);
  glBindTexture(GL_TEXTURE_CUBE_MAP, this.bufferID);
}


