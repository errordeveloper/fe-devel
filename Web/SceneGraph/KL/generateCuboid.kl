//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Vec2;
use Vec3;

operator generateCuboid(
  io Vec3 positions<>,
  io Vec3 normals<>,
  io Vec2 uvs<>,
  io Integer indices[],
  io Scalar length,
  io Scalar height,
  io Scalar width
) {
  var Scalar x = length / 2.0;
  var Scalar y = height / 2.0;
  var Scalar z = width / 2.0;

  var Integer vi = 0;
  var Integer ii = 0;

  // setup the cuboid with origin at (0,0,0)
  indices.resize(36);

  var Vec3 cornerpositions[];

  cornerpositions.push(Vec3(-x, - y, - z));
  cornerpositions.push(Vec3( + x, - y, - z));
  cornerpositions.push(Vec3(-x, + y, - z));
  cornerpositions.push(Vec3( + x, + y, - z));
  cornerpositions.push(Vec3(-x, - y, + z));
  cornerpositions.push(Vec3( + x, - y, + z));
  cornerpositions.push(Vec3(-x, + y, + z));
  cornerpositions.push(Vec3( + x, + y, + z));

  // -z-plane
  positions[vi + 0] = cornerpositions[0];
  positions[vi + 1] = cornerpositions[1];
  positions[vi + 2] = cornerpositions[2];
  positions[vi + 3] = cornerpositions[3];
  normals[vi + 0] = Vec3(0.0, 0.0, - 1.0);
  normals[vi + 1] = Vec3(0.0, 0.0, - 1.0);
  normals[vi + 2] = Vec3(0.0, 0.0, - 1.0);
  normals[vi + 3] = Vec3(0.0, 0.0, - 1.0);
  uvs[vi + 0] = Vec2(0.0,0.0);
  uvs[vi + 1] = Vec2(1.0,0.0);
  uvs[vi + 2] = Vec2(0.0,1.0);
  uvs[vi + 3] = Vec2(1.0,1.0);

  indices[ii++] = vi + 0;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 3;
  vi += 4;

  // +z-plane
  positions[vi + 0] = cornerpositions[4];
  positions[vi + 1] = cornerpositions[5];
  positions[vi + 2] = cornerpositions[6];
  positions[vi + 3] = cornerpositions[7];
  normals[vi + 0] = Vec3(0.0, 0.0, 1.0);
  normals[vi + 1] = Vec3(0.0, 0.0, 1.0);
  normals[vi + 2] = Vec3(0.0, 0.0, 1.0);
  normals[vi + 3] = Vec3(0.0, 0.0, 1.0);
  uvs[vi + 0] = Vec2(0.0,0.0);
  uvs[vi + 1] = Vec2(1.0,0.0);
  uvs[vi + 2] = Vec2(0.0,1.0);
  uvs[vi + 3] = Vec2(1.0,1.0);

  indices[ii++] = vi + 0;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 3;
  indices[ii++] = vi + 2;
  vi += 4;

  // -y-plane
  positions[vi + 0] = cornerpositions[0];
  positions[vi + 1] = cornerpositions[1];
  positions[vi + 2] = cornerpositions[4];
  positions[vi + 3] = cornerpositions[5];
  normals[vi + 0] = normals[vi + 1] = normals[vi + 2] = normals[vi + 3] = Vec3(0.0, - 1.0, 0.0);
  uvs[vi + 0] = Vec2(0.0,0.0);
  uvs[vi + 1] = Vec2(1.0,0.0);
  uvs[vi + 2] = Vec2(0.0,1.0);
  uvs[vi + 3] = Vec2(1.0,1.0);

  indices[ii++] = vi + 0;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 3;
  indices[ii++] = vi + 2;
  vi += 4;

  // +y-plane
  positions[vi + 0] = cornerpositions[2];
  positions[vi + 1] = cornerpositions[3];
  positions[vi + 2] = cornerpositions[6];
  positions[vi + 3] = cornerpositions[7];
  normals[vi + 0] = Vec3(0.0, 1.0, 0.0);
  normals[vi + 1] = Vec3(0.0, 1.0, 0.0);
  normals[vi + 2] = Vec3(0.0, 1.0, 0.0);
  normals[vi + 3] = Vec3(0.0, 1.0, 0.0);
  uvs[vi + 0] = Vec2(0.0,0.0);
  uvs[vi + 1] = Vec2(1.0,0.0);
  uvs[vi + 2] = Vec2(0.0,1.0);
  uvs[vi + 3] = Vec2(1.0,1.0);

  indices[ii++] = vi + 0;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 3;
  vi += 4;

  // -x-plane
  positions[vi + 0] = cornerpositions[0];
  positions[vi + 1] = cornerpositions[2];
  positions[vi + 2] = cornerpositions[4];
  positions[vi + 3] = cornerpositions[6];
  normals[vi + 0] = Vec3(-1.0, 0.0, 0.0);
  normals[vi + 1] = Vec3(-1.0, 0.0, 0.0);
  normals[vi + 2] = Vec3(-1.0, 0.0, 0.0);
  normals[vi + 3] = Vec3(-1.0, 0.0, 0.0);
  uvs[vi + 0] = Vec2(0.0,0.0);
  uvs[vi + 1] = Vec2(1.0,0.0);
  uvs[vi + 2] = Vec2(0.0,1.0);
  uvs[vi + 3] = Vec2(1.0,1.0);

  indices[ii++] = vi + 0;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 3;
  vi += 4;

  // +x-plane
  positions[vi + 0] = cornerpositions[1];
  positions[vi + 1] = cornerpositions[3];
  positions[vi + 2] = cornerpositions[5];
  positions[vi + 3] = cornerpositions[7];
  normals[vi + 0] = Vec3(1.0, 0.0, 0.0);
  normals[vi + 1] = Vec3(1.0, 0.0, 0.0);
  normals[vi + 2] = Vec3(1.0, 0.0, 0.0);
  normals[vi + 3] = Vec3(1.0, 0.0, 0.0);
  uvs[vi + 0] = Vec2(0.0,0.0);
  uvs[vi + 1] = Vec2(1.0,0.0);
  uvs[vi + 2] = Vec2(0.0,1.0);
  uvs[vi + 3] = Vec2(1.0,1.0);

  indices[ii++] = vi + 0;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 2;
  indices[ii++] = vi + 1;
  indices[ii++] = vi + 3;
  indices[ii++] = vi + 2;
  vi += 4;
}