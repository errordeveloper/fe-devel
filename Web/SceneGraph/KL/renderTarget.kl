//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use OGLRenderTarget;
use OGLShaderProgram;
use OGLTexture2D;
use FabricOGL;
use Vec2;
use RGBA;

operator bindRenderTarget(
  io OGLRenderTarget renderTarget
) {
//  report("bindRenderTarget");
  renderTarget.bind();
}

operator bindScreenRenderTarget(
  io Integer width,
  io Integer height,
  io OGLRenderTarget renderTarget
) {
//  report("bindScreenRenderTarget");
  renderTarget.prebind(width, height);
  renderTarget.bind();
}

operator unbindRenderTarget(
  io OGLRenderTarget renderTarget
) {
//  report("unbindRenderTarget");
  renderTarget.unbind();
}

function drawRenderTargetToViewInternal(
  io OGLRenderTarget renderTarget,
  io Integer shaderProgramId
) {
//  report("drawRenderTargetToView>>>");

  OGLTexture2D colorTexture;// = depthRenderTarget.getFirstColorTexture();
  for(Integer i=0; i<renderTarget.textures.size(); i++){
    if(renderTarget.textures[i].type == 2){//this.COLOR_BUFFER
      colorTexture = renderTarget.textures[i].texture;
    }
  }
  if(colorTexture.bufferID > 0 ){
    Integer textureUnit = 0;
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, colorTexture.bufferID);
    
    Vec2 tl(-1.0, 1.0);
    Vec2 br(1.0, -1.0);
    drawTexture(textureUnit, shaderProgramId, tl, br, false);
  }else{
    report("Error: no color textures found");
  }

 // report("<<<drawRenderTargetToView");
}

operator drawRenderTargetToView_progID(
  io OGLRenderTarget renderTarget,
  io Integer shaderProgramId
) {
  drawRenderTargetToViewInternal(renderTarget, shaderProgramId);
}

operator drawRenderTargetToView(
  io OGLRenderTarget renderTarget,
  io OGLShaderProgram shaderProgram
) {
//  report("drawRenderTargetToView>>>");
  drawRenderTargetToViewInternal(renderTarget, shaderProgram.programId);
 // report("<<<drawRenderTargetToView");
}

operator getAllRGBAPixelsFromRenderTarget(
  io OGLRenderTarget renderTarget,
  io Color pixels[]
) {
  renderTarget.getAllRGBAPixels(pixels);
}

operator getRGBAPixelsFromRenderTarget(
  io Boolean toggle,
  io OGLRenderTarget renderTarget,
  io Vec2 pos,
  io Vec2 size,
  io Color pixels[]
) {
  if(toggle) {
    renderTarget.getRGBAPixels(pos,size,pixels);
  }
}
