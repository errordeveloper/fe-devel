//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Math;
use Vec3;

operator setTorusVertexCount(
  io Scalar outer_radius,
  io Scalar inner_radius,
  io Integer detail,
  io Size newCount
) {
  var Integer slices = (detail >= 0) ? (detail + 3) : 3;
  var Integer loops = (detail >= 0) ? ((detail * 2) + 3) : 3;

  newCount = slices * loops;
}

operator generateTorus(
  io Scalar outer_radius,
  io Scalar inner_radius,
  io Integer detail,

  io Integer indices[],
  io Vec3 positions<>,
  io Vec3 normals<>
) {
  var Integer slices = (detail >= 0) ? (detail + 3) : 3;
  var Integer loops = (detail >= 0) ? ((detail * 2) + 3) : 3;

  var Integer nb_vtx = slices * loops;
  var Integer nb_tri = 2 * slices * loops;

  indices.resize(nb_tri * 3);

  var Integer tid = 0;
  for (var Integer i = 0; i < loops; i++) {
    var Scalar theta = (i / Scalar(loops)) * 2.0 * PI;
    var Scalar ctheta = cos(theta);
    var Scalar stheta = sin(theta);

    for (var Integer j = 0; j < slices; j++) {
      var Scalar phi = (j / Scalar(slices)) * 2.0 * PI;

      var Scalar sphi = sin(phi);
      var Scalar cphi = cos(phi);
      var Scalar d = outer_radius + cphi * inner_radius;

      positions[i * slices + j] = Vec3(ctheta * d, inner_radius * sphi, stheta * d, );
      normals[i * slices + j] = Vec3(ctheta * cphi, sphi, stheta * cphi);

      var Integer v0, v1, v2, v3;
      var Integer ip = (i + 1) % loops;
      var Integer jp = (j + 1) % slices;
      v0 = slices * i + j;
      v1 = slices * i + jp;
      v2 = slices * ip + jp;
      v3 = slices * ip + j;

      indices[tid++] = v0;
      indices[tid++] = v1;
      indices[tid++] = v3;

      indices[tid++] = v1;
      indices[tid++] = v2;
      indices[tid++] = v3;
    }
  }
}