<?xml version="1.0" encoding="UTF-8"?>
<shader>
	<name>ElephantMaterial</name>
	
	<uniforms>
		<uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
		<uniform name="u_lightType" constant="lightType" type="Integer" owner="light"/>
		<uniform name="u_lightDir" constant="lightDir" type="Vec3" owner="light"/>
		<uniform name="u_lightColor" constant="lightColor" type="Color" owner="light"/>
		<uniform name="u_lightCosCutoff" constant="lightCosCutoff" type="Scalar" owner="light"/>
		
    <uniform name="u_materialAmbientColor" constant="ambientColor" type="Color" defaultValue="FABRIC.RT.rgba(0.0,0.0,0.0,1)"/>
    <uniform name="u_materialSpecularColor" constant="specularColor" type="Color" defaultValue="FABRIC.RT.rgba(0.5,0.5,0.5,1)"/>
		<uniform name="u_materialShininess" constant="shininess" type="Scalar" defaultValue="20.7"/>
		
		<uniform name="u_samplerDiffuseMap" constant="diffuseTexture" type="Integer" owner="texture"/>
		<uniform name="u_samplerNormalMap" constant="normalTexture" type="Integer" owner="texture"/>
		
		<uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
		<uniform name="u_modelViewMatrix" constant="modelViewMatrix" type="Mat44" owner="instance"/>
		<uniform name="u_normalMatrix" constant="normalMatrix" type="Mat33" owner="instance"/>
	</uniforms>
	
	<attributes>
		<attribute name="a_position" binding="positions"/>
		<attribute name="a_texCoord" binding="uvs0"/>
	</attributes>
	
	<lights>
		<light type="Light" binding="light"/>
	</lights>
	
	<textures>
		<texture binding="diffuseTexture"/>
		<texture binding="normalTexture"/>
	</textures>
	
	<vertexshader>
		<source>
			<![CDATA[
			uniform mat4 u_modelViewProjectionMatrix;
			uniform mat4 u_modelViewMatrix;
			uniform mat3 u_normalMatrix;
			uniform vec4 u_lightPosition;
			
			attribute vec4 a_position;
			attribute vec4 a_texCoord;
			
			varying vec3 lightDir;
			varying vec3 viewDir;
			varying mat3 normalMatrix;
			
			void main()
			{
				gl_TexCoord[0].xy = a_texCoord.xy;
				vec4 modelCameraPosition = u_modelViewMatrix * a_position;
				lightDir = vec3(u_lightPosition - modelCameraPosition);
				viewDir = vec3(-modelCameraPosition);
        normalMatrix = u_normalMatrix;
				gl_Position = u_modelViewProjectionMatrix * a_position;			
			}
			]]>
		</source>
	</vertexshader>
	
	<fragmentshader>
		<source>
			<![CDATA[
			uniform int u_lightType;
			uniform vec3 u_lightDir;
			uniform vec4 u_lightColor;
			uniform float u_lightCosCutoff;
			
			uniform float u_materialShininess;
			uniform vec4 u_materialAmbientColor;
			uniform vec4 u_materialSpecularColor;
			
			uniform sampler2D u_samplerDiffuseMap;
			uniform sampler2D u_samplerNormalMap;
			
			varying vec3 lightDir;
			varying vec3 viewDir;
			varying mat3 normalMatrix;
			
			]]>
			</source>
			<include file="FABRIC_ROOT/SG/Shaders/lighting.txt"/>
			<source>
			<![CDATA[
			
			void main(){
        vec3 Ln = normalize(lightDir);
				vec3 Vn = normalize(viewDir);
				vec3 Nn = normalMatrix * texture2D( u_samplerNormalMap, gl_TexCoord[0].st ).xyz;
				Nn = normalize(Nn * 2.0 - vec3(1.0,1.0,1.0));
				
				float lightFactor = 1.0;
				gl_FragColor = phong_shading(	Nn, 
												Ln, 
												Vn, 
												u_lightType,
												u_lightDir,
												lightFactor,
												u_lightCosCutoff,
												u_lightColor,
												texture2D( u_samplerDiffuseMap, gl_TexCoord[0].st ), 
												u_materialSpecularColor,
												u_materialShininess,
												u_materialAmbientColor );
			}
			]]>
		</source>
	</fragmentshader>
</shader>
