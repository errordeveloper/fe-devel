//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Math;
use CollectedPoints;
use Mat33;
use Mat44;
use Vec3;
use Xfo;
use Color;

operator paintVertexColors(
  io Boolean select,
  io CollectedPoints collectedPoints,

  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix,
  io Scalar aspectRatio,

  io Color baseColor,
  io Integer paintMode,
  io Scalar brushStrength,
  io Vec3 brushPos,
  io Scalar brushSize,
  io Color brushColor,

  io Xfo globalXfo,
  io Vec3 positions<>,
  io Vec3 normals<>,
  io Color vertexColors<>
) {
  select = true;
  Mat44 modelMatrix = globalXfo.toMat44();
  Mat44 modelViewProjectionMatrix = projectionMatrix * cameraMatrix * modelMatrix;
  Mat33 normalMatrix = modelViewProjectionMatrix.upperLeft().inverse().transpose();

  collectedPoints.distances.resize(0);
  collectedPoints.points.resize(0);
  for (var Integer i = 0; i < positions.size(); i++) {
    Vec3 n = normalMatrix * normals[i];
    if (n.z > 0) {
      continue;
    }
    Vec3 v = modelViewProjectionMatrix * positions[i];
    Vec3 delta = v - brushPos;
    delta.x *= aspectRatio;
    delta.z *= 0.0;
    Scalar dist = delta.length();

    if (dist < brushSize) {
      collectedPoints.distances.push(dist);
      collectedPoints.points.push(i);
    }
  }

  // Rather than returning the data back to JavaScript, we process them here,
  // calculating the new vertex color values based on thier distances from the paint brush
  
  switch(paintMode){
    case 0:
      for (var Integer i = 0; i < collectedPoints.points.size(); i++) {
        Scalar weight = ((cos(PI * (collectedPoints.distances[i] / brushSize)) * 0.5) + 0.5) * brushStrength;
        Integer vertexId = collectedPoints.points[i];
        vertexColors[vertexId] = vertexColors[vertexId].lerp(brushColor, weight);
      }
      break;
    case 1:
      for (var Integer i = 0; i < collectedPoints.points.size(); i++) {
        Scalar weight = ((cos(PI * (collectedPoints.distances[i] / brushSize)) * 0.5) + 0.5) * brushStrength;
        Integer vertexId = collectedPoints.points[i];
        vertexColors[vertexId] = vertexColors[vertexId].lerp(baseColor, weight);
      }
      break;
    case 2:
      Color averageColor;
      Scalar weights[];
      Scalar totalWeight = 0.0;
      for (var Integer i = 0; i < collectedPoints.points.size(); i++) {
        Scalar weight = ((cos(PI * (collectedPoints.distances[i] / brushSize)) * 0.5) + 0.5) * brushStrength;
        Integer vertexId = collectedPoints.points[i];
        averageColor += vertexColors[vertexId] * weight;
        totalWeight += weight;
        weights.push(weight);
      }
      averageColor *= 1.0/totalWeight;
      for (var Integer i = 0; i < collectedPoints.points.size(); i++) {
        Integer vertexId = collectedPoints.points[i];
        vertexColors[vertexId] = vertexColors[vertexId].lerp(averageColor, weights[i]);
      }
      break;
  }
}