<?xml version="1.0" encoding="UTF-8"?>
<shader>
  <name>SpiedelShader</name>
  
  <uniforms>
    <uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
    <uniform name="u_lightType" constant="lightType" type="Integer" owner="light"/>
    <uniform name="u_lightDir" constant="lightDir" type="Vec3" owner="light"/>
    <uniform name="u_lightColor" constant="lightColor" type="Color" owner="light"/>
    <uniform name="u_lightCosCutoff" constant="lightCosCutoff" type="Scalar" owner="light"/>
    
    <uniform name="u_materialShininess" constant="shininess" type="Scalar" defaultValue="20.0"/>
    
    <uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_modelViewMatrix" constant="modelViewMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_modelMatrix" constant="modelMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_normalMatrix" constant="normalMatrix" type="Mat33" owner="instance"/>
    <uniform name="u_cameraPos" constant="cameraPosition" type="Vec3" owner="instance"/>
    
    <!--
    <uniform name="u_samplerCube" constant="cubeMapTexture" type="Integer" owner="cubeMapTexture"/>
    -->
    <uniform name="u_samplerSkinningMatrices" constant="skinningMatricesTextureUnit" type="Integer" owner="geometry"/>
    <uniform name="u_transformTextureHeight" constant="transformTextureHeight" type="Scalar" owner="geometry"/>
    
  </uniforms>
  <attributes>
    <attribute name="a_position" binding="positions"/>
    <attribute name="a_normal" binding="normals"/>
    <attribute name="a_color" binding="vertexColors"/>
    <attribute name="a_weight" binding="boneWeights"/>
    <attribute name="a_index" binding="boneIds"/>
  </attributes>
  <lights>
    <light type="Light" binding="light"/>
  </lights>
  <!--
  <textures>
    <texture binding="cubeMapTexture"/>
  </textures>
  -->
  <vertexshader>
    <source>
<![CDATA[
uniform mat4 u_modelViewProjectionMatrix;
uniform mat4 u_modelViewMatrix;
uniform mat4 u_modelMatrix;
uniform mat3 u_normalMatrix;
uniform vec4 u_lightPosition;
uniform vec3 u_cameraPos;

// This is an array of all the bones in a skeleton.
uniform sampler2D u_samplerSkinningMatrices;
uniform float u_transformTextureHeight;

attribute vec4 a_position;
attribute vec3 a_normal;
attribute vec4 a_color;

attribute vec4 a_weight;
attribute vec4 a_index;

varying vec3 normal;
varying vec3 lightDir;
varying vec3 viewDir;
varying vec4 vertexColor;
varying vec3 reflectDir;

#define SKIN_POSITIONS_AND_NORMALS

]]>
    </source>
    <include file="FABRIC_ROOT/SG/Shaders/matrices.txt"/>
    <include file="FABRIC_ROOT/SG/Shaders/skinning.txt"/>
    <source>
<![CDATA[

void main(){

  vec4 transformedPosition;
  vec4 transformedNormal;
  skinPositionsAndNormalsWithTransformedPositionsAndNormal(
    u_samplerSkinningMatrices,
    u_transformTextureHeight,
    transformedPosition,
    transformedNormal
  );
  
  
  // Calculate reflected vector
  vec3 modelViewDir = normalize((u_modelMatrix * transformedPosition).xyz - u_cameraPos);
  reflectDir = reflect(viewDir, mat3(u_modelMatrix[0].xyz, u_modelMatrix[1].xyz, u_modelMatrix[2].xyz) * transformedNormal.xyz);
  
  vertexColor = a_color;
}

]]>
    </source>
  </vertexshader>
  
  <fragmentshader>
    <source>
<![CDATA[
uniform int u_lightType;
uniform vec3 u_lightDir;
uniform vec4 u_lightColor;
uniform float u_lightCosCutoff;

uniform float u_materialShininess;
uniform vec4 u_materialAmbientColor;
uniform vec4 u_materialDiffuseColor;
uniform vec4 u_materialSpecularColor;

varying vec3 normal;
varying vec3 lightDir;
varying vec3 viewDir;
varying vec4 vertexColor;
varying vec3 reflectDir;

//uniform samplerCube u_samplerCube;


]]>
      </source>
      <include file="FABRIC_ROOT/SG/Shaders/lighting.txt"/>
      <source>
<![CDATA[


void main(){
  
  vec3 Ln = normalize(lightDir);
  vec3 Vn = normalize(viewDir);
  vec3 Nn = normalize(normal);
  vec3 Rn = normalize(reflectDir);
  
  float reflectFactor = 1.0 - dot( Vn, Nn );
  
 // vec4 color = mix(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 1.0), reflectFactor);

  // Perform a cube map look up.
//  vec4 cubeColor = textureCube(u_samplerCube, Rn);
 // cubeColor.a = 1.0;
//  vec4 color = mix(vertexColor, cubeColor, reflectFactor);

  float lightFactor = 1.0;
  gl_FragColor = phong_shading(
    Nn, 
    Ln, 
    Vn, 
    u_lightType,
    u_lightDir,
    lightFactor,
    u_lightCosCutoff,
    u_lightColor,
    vertexColor,
    vec4(1.0, 1.0, 1.0, 1.0),
    u_materialShininess,
    vec4(0.0, 0.0, 0.0, 1.0) );
}

]]>
    </source>
  </fragmentshader>
</shader>
