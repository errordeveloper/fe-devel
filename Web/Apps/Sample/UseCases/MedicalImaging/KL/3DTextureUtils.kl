/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

use RGBA, Vec3, Math;

function generate3DTexture(
  io Size resolution,
  io Size width,
  io Size height,
  io Size depth,
  io Byte opacityUShortVoxels[],
  io RGBA weightedGradientsVoxels[],
  Boolean generateOpacity,
  Boolean generateGradient
){
  width = resolution;
  height = resolution;
  depth = resolution;

  if(generateOpacity)
    opacityUShortVoxels.resize(width*height*depth*2);//*2: UShort
  if(generateGradient)
    weightedGradientsVoxels.resize(width*height*depth);

  if(resolution == 0)
    resolution = 1;

  //test: 1/3 opaque sphere with 1/2 size 2/3 opaque sphere.
  //A = opacity
  //RGB = gradient

  Size i,j,k,l;
  Size index = 0;
  Vec3 delta(2.0 / Scalar(width), 2.0 / Scalar(height), 2.0 / Scalar(depth));
  Vec3 currPos;

  Scalar voxelThreshold = 2.0 / Scalar(resolution);
  Scalar voxelHalfSize = 0.5 / Scalar(resolution);

  Scalar sphereRadius[3], sphereOpacity[3];
  sphereRadius[0] = 0.9; sphereOpacity[0] = 0.25;
  sphereRadius[1] = 0.6; sphereOpacity[1] = 0.5;
  sphereRadius[2] = 0.3; sphereOpacity[2] = 0.75;

  currPos.z = -1.0;
  for(i = 0; i < depth; ++i) {
    currPos.y = -1.0;
    for(j = 0; j < height; ++j) {
      currPos.x = -1.0;
      for(k = 0; k < width; ++k) {

        Scalar distToCenter = currPos.length();

        if(generateOpacity)
        {
          //Do some cheap antialiasing to help gradient generation...
          Scalar opacity = 0.0;
          for(l = 3; l--; ) {
            if(distToCenter+voxelHalfSize < sphereRadius[l]) {
              opacity = sphereOpacity[l];
              break;
            }
            else if(distToCenter-voxelHalfSize < sphereRadius[l]) {
              Scalar ratio = (sphereRadius[l] - (distToCenter-voxelHalfSize)) / (voxelHalfSize*2.0);
              opacity = (1.0-ratio)*(l == 0 ? 0.0 : sphereOpacity[l-1]) + ratio*sphereOpacity[l];
              break;
            }
          }
          //We convert to UShorts. KL has no ushorts so we store in a Byte array, assuming little endian.
          opacityUShortVoxels[index*2] = Byte(opacity*255.99*256.0);
          opacityUShortVoxels[index*2+1] = Byte(opacity*255.99);
        }

        if(generateGradient)
        {
          Vec3 gradient = currPos;
          if(distToCenter > DIVIDEPRECISION)
            gradient /= distToCenter;

          Scalar gradientWeight = 0.0;

          for(l = 3; l--; ) {
            Scalar sphereDist = abs(distToCenter - sphereRadius[l]);
            if(sphereDist < voxelThreshold) {
              gradientWeight = 1.0;// - sphereDist / voxelThreshold;
              break;
            }
          }
          weightedGradientsVoxels[index].r = Byte(((gradient.x*0.5)+0.5)*255.99);
          weightedGradientsVoxels[index].g = Byte(((gradient.y*0.5)+0.5)*255.99);
          weightedGradientsVoxels[index].b = Byte(((gradient.z*0.5)+0.5)*255.99);
          weightedGradientsVoxels[index].a = Byte(gradientWeight*255.99);
        }

        currPos.x += delta.x;
        ++index;
      }
      currPos.y += delta.y;
    }
    currPos.z += delta.z;
  }
}

operator generate3DTextureOpacity(
  io Size resolution,
  io Size width,
  io Size height,
  io Size depth,
  io Byte opacityUShortVoxels[]
){
  RGBA dummy[];
  generate3DTexture( resolution, width, height, depth, opacityUShortVoxels, dummy, true, false);
}

operator generate3DTextureGradient(
  io Size resolution,
  io Size width,
  io Size height,
  io Size depth,
  io RGBA weightedGradientsVoxels[],
){
  Byte dummy[];
  generate3DTexture( resolution, width, height, depth, dummy, weightedGradientsVoxels, false, true);
}

operator slice3DTexture(
  io Scalar sliceRatio,
  io Size sliceAxis,
  io Boolean opacityElseGradientWeight,
  io Size sourceWidth,
  io Size sourceHeight,
  io Size sourceDepth,
  io Byte sourceOpacityUShortVoxels[],
  io RGBA sourceWeightedGradientsVoxels[],
  io Size width,
  io Size height,
  io RGBA pixels[]
){
  Size start, dim1Delta, dim2Delta, dim1, dim2;
  if(sliceAxis == 0) {
    start = Size(sliceRatio*Scalar(sourceWidth));
    if(start == sourceWidth)
      start = sourceWidth-1;
    dim1Delta = sourceWidth*sourceHeight;
    dim2Delta = sourceWidth;
    dim1 = sourceDepth;
    dim2 = sourceHeight;
  }
  else if(sliceAxis == 1) {
    start = Size(sliceRatio*Scalar(sourceHeight));
    if(start == sourceHeight)
      start = sourceHeight-1;
    start *= sourceWidth;
    dim1Delta = 1;
    dim2Delta = sourceWidth*sourceHeight;
    dim1 = sourceWidth;
    dim2 = sourceDepth;
  }
  else {
    start = Size(sliceRatio*Scalar(sourceDepth));
    if(start == sourceDepth)
      start = sourceDepth-1;
    start *= sourceWidth*sourceHeight;
    dim1Delta = 1;
    dim2Delta = sourceWidth;
    dim1 = sourceWidth;
    dim2 = sourceHeight;
  }

  Size i, j, dim2offset = start, dest, target = 0;
  width = dim1;
  height = dim2;
  pixels.resize(dim1 * dim2);

  for( i = 0; i < dim2; ++i ) {
    Size offset = dim2offset;
    for( j = 0; j < dim1; ++j ) {
      Byte value;
      if(opacityElseGradientWeight)
        value = sourceOpacityUShortVoxels[offset*2+1];
      else
        value = sourceWeightedGradientsVoxels[offset].a;
      pixels[target++] = RGBA(value, value, value, Byte(255));
      offset += dim1Delta;
    }
    dim2offset += dim2Delta;
  }
}

operator generate3DImageHistogram(
  io Byte sourceUShortVoxels[],
  io Size resolution,
  io Scalar histogram[]) {
    histogram.resize(resolution);
    if(resolution == 0)
      return;

    Size i;
    for( i = 0; i < resolution; ++i )
      histogram[i] = 0.0;

    for( i = 0; i < sourceUShortVoxels.size(); i += 2 ) {
      Scalar value = (Scalar(sourceUShortVoxels[i+1])*256.0 + Scalar(sourceUShortVoxels[i])) / (256.0 * 256.0);
      Size column = Size(value * Scalar(resolution));
      if(column > resolution)
        column = resolution-1;
      histogram[column] = histogram[column] + 1;
    }
    //Normalize
    Scalar maxHeight = 0.0;

    //Here we will cheat: since we know that 0 means almost no density (air), we will ignore it
    for( i = 1; i < resolution; ++i ) {
      if( histogram[i] > maxHeight )
        maxHeight = histogram[i];
    }

    Scalar factor = 1.0/maxHeight;
    for( i = 0; i < resolution; ++i ) {
      histogram[i] *= factor;
      if(histogram[i] > 1.0)
        histogram[i] = 1.0;
    }
}
