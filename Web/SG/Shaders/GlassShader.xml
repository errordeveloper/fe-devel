<?xml version="1.0" encoding="UTF-8"?>
<shader>
  <name>GlassMaterial</name>
  <prototypeMaterialType>TransparentMaterial</prototypeMaterialType>
  
  <uniforms>
    <uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
    
    <uniform name="u_lightType" constant="lightType" type="Integer" owner="light"/>
    <uniform name="u_lightDir" constant="lightDir" type="Vec3" owner="light"/>
    <uniform name="u_lightColor" constant="lightColor" type="Color" owner="light"/>
    <uniform name="u_lightCosCutoff" constant="lightCosCutoff" type="Scalar" owner="light"/>
    
    <uniform name="u_materialAmbientColor" constant="ambientColor" type="Color" defaultValue="FABRIC.RT.rgba(0.0,0.0,0.0,1)"/>
    <uniform name="u_materialSpecularColor" constant="specularColor" type="Color" defaultValue="FABRIC.RT.rgba(0.5,0.5,0.5,1)"/>
    <uniform name="u_materialShininess" constant="shininess" type="Scalar" defaultValue="20.0"/>
    
    <uniform name="u_materialDiffuseColor" constant="diffuseColor" type="Color" defaultValue="FABRIC.RT.rgba(0.8,0,0,1)"/>
    
    <uniform name="u_samplerCube" constant="cubeMapTexture" type="Integer" owner="cubeMapTexture"/>
    
    <uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_modelViewMatrix" constant="modelViewMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_normalMatrix" constant="normalMatrix" type="Mat33" owner="instance"/>
    
    <uniform name="u_modelMatrix" constant="modelMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_modelMatrixInverse" constant="modelMatrixInverse" type="Mat44" owner="instance"/>
    <uniform name="u_cameraPos" constant="cameraPosition" type="vec3" owner="instance"/>
  </uniforms>
  <attributes>
    <attribute name="a_position" binding="positions"/>
    <attribute name="a_normal" binding="normals"/>
  </attributes>
  <lights>
    <light type="Light" binding="light"/>
  </lights>
  
  <textures>
    <texture binding="cubeMapTexture"/>
  </textures>
  
  <openglstateparams>
    <enableOptions>
      <option>GL_BLEND</option>
    </enableOptions>
    <blendModeSfactor>GL_SRC_ALPHA</blendModeSfactor>
    <blendModeDfactor>GL_ONE_MINUS_SRC_ALPHA</blendModeDfactor>
  </openglstateparams>
  
  <vertexshader>
    <source>
      <![CDATA[
      uniform mat4 u_modelViewProjectionMatrix;
      uniform mat4 u_modelViewMatrix;
      uniform mat3 u_normalMatrix;
      uniform vec4 u_lightPosition;
      
      
      uniform mat4 u_modelMatrix;
      uniform mat4 u_modelMatrixInverse;
      uniform vec3 u_cameraPos;
      
      
      attribute vec4 a_position;
      attribute vec3 a_normal;

      varying vec3 worldPos;
      varying vec3 worldNormal;
      varying vec3 worldViewPos;
      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 viewDir;
      varying vec3 reflectDir;

      void main(){
        vec4 modelCameraPosition = u_modelViewMatrix * a_position;
        
        normal = u_normalMatrix * a_normal;
        viewDir = vec3(-modelCameraPosition);
        lightDir = vec3(u_lightPosition - modelCameraPosition);
        
        // Calculate reflected vector
        vec3 modelViewDir = normalize((u_modelMatrix * a_position).xyz - u_cameraPos);
        reflectDir = reflect(modelViewDir, mat3(u_modelMatrix[0].xyz, u_modelMatrix[1].xyz, u_modelMatrix[2].xyz) * a_normal);
        
        gl_Position = u_modelViewProjectionMatrix * a_position;
      }
      ]]>
    </source>
  </vertexshader>
  
  <fragmentshader>
    <source>
      <![CDATA[
      uniform int u_lightType;
      uniform vec3 u_lightDir;
      uniform vec4 u_lightColor;
      uniform float u_lightCosCutoff;

      uniform float u_materialShininess;
      uniform vec4 u_materialAmbientColor;
      uniform vec4 u_materialSpecularColor;
      uniform vec4 u_materialDiffuseColor;

      uniform samplerCube u_samplerCube;

      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 viewDir;
      varying vec3 reflectDir;
      
      ]]>
      </source>
      <include file="lighting.txt"/>
      <source>
      <![CDATA[
      
      void main(){
        
        vec3 Ln = normalize(lightDir);
        vec3 Vn = normalize(viewDir);
        vec3 Nn = normalize(normal);
        vec3 Rn = normalize(reflectDir);
        
        
        float reflectFactor = mix(dot( Vn, Rn ), 1.0, 0.8);
        // Perform a cube map look up.
        vec4 cube_color = textureCube(u_samplerCube, Rn);
        cube_color.a = 1.0;
      //  vec4 base_color = u_materialDiffuseColor;
        float lightFactor = 1.0;
        vec4 base_color = phong_shading(Nn, 
                                        Ln, 
                                        Vn, 
                                        u_lightType,
                                        u_lightDir,
                                        lightFactor,
                                        u_lightCosCutoff,
                                        u_lightColor,
                                        u_materialDiffuseColor, 
                                        u_materialSpecularColor,
                                        u_materialShininess,
                                        u_materialAmbientColor );
        base_color.a = 1.0 - reflectFactor;
        gl_FragColor = mix(base_color, cube_color, reflectFactor);
      }

      ]]>
    </source>
  </fragmentshader>
</shader>
