<?xml version="1.0" encoding="UTF-8"?>
<shader>
	<name>PhongVertexColorMaterial</name>
	
	<uniforms>
		<uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
		<uniform name="u_lightType" constant="lightType" type="Integer" owner="light"/>
		<uniform name="u_lightDir" constant="lightDir" type="Vec3" owner="light"/>
		<uniform name="u_lightColor" constant="lightColor" type="Color" owner="light"/>
		<uniform name="u_lightCosCutoff" constant="lightCosCutoff" type="Scalar" owner="light"/>
    
		<uniform name="u_materialShininess" constant="shininess" type="Scalar" defaultValue="20.0"/>
		
		<uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
		<uniform name="u_modelViewMatrix" constant="modelViewMatrix" type="Mat44" owner="instance"/>
		<uniform name="u_normalMatrix" constant="normalMatrix" type="Mat33" owner="instance"/>
	</uniforms>
	<attributes>
		<attribute name="a_position" binding="positions"/>
		<attribute name="a_normal" binding="normals"/>
		<attribute name="a_color" binding="vertexColors"/>
	</attributes>
	<lights>
		<light type="Light" binding="light"/>
	</lights>
	<vertexshader>
		<source>
			uniform mat4 u_modelViewProjectionMatrix;
			uniform mat4 u_modelViewMatrix;
			uniform mat3 u_normalMatrix;
			uniform vec4 u_lightPosition;
			
			attribute vec4 a_position;
			attribute vec3 a_normal;
			attribute vec4 a_color;

			varying vec3 normal;
			varying vec3 lightDir;
			varying vec3 viewDir;
			varying vec4 color;

			void main(){
				normal = u_normalMatrix * a_normal;
				vec4 modelCameraPosition = u_modelViewMatrix * a_position;
  
				lightDir = vec3(u_lightPosition - modelCameraPosition);

				viewDir = vec3(-modelCameraPosition);
				gl_Position = u_modelViewProjectionMatrix * a_position;
				color = a_color;
			}
		</source>
	</vertexshader>
	
	<fragmentshader>
		<source>
			<![CDATA[
			uniform int u_lightType;
			uniform vec3 u_lightDir;
			uniform vec4 u_lightColor;
			uniform float u_lightCosCutoff;

			uniform float u_materialShininess;
			uniform vec4 u_materialAmbientColor;
			uniform vec4 u_materialDiffuseColor;
			uniform vec4 u_materialSpecularColor;

			varying vec3 normal;
			varying vec3 lightDir;
			varying vec3 viewDir;
			varying vec4 color;
		
			
			]]>
			</source>
			<include file="lighting.txt"/>
			<source>
			<![CDATA[
			
			
			void main(){
				
				vec3 Ln = normalize(lightDir);
				vec3 Vn = normalize(viewDir);
				vec3 Nn = normalize(normal);
				
				float lightFactor = 1.0;
				gl_FragColor = phong_shading(	Nn, 
												Ln, 
												Vn, 
												u_lightType,
												u_lightDir,
												lightFactor,
												u_lightCosCutoff,
												u_lightColor,
												color, 
												vec4(1.0, 1.0, 1.0, 1.0),
												u_materialShininess,
												vec4(0.0, 0.0, 0.0, 1.0) );

			}

			]]>
		</source>
	</fragmentshader>
</shader>
