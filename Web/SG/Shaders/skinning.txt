
#ifdef SKIN_POSITIONS

void skinPositions(
  in mat4 modelViewProjectionMatrix,
  in sampler2D samplerSkinningMatrices,
  in float textureHeight
){

  vec4 transformedPosition = vec4(0.0,0.0,0.0,0.0);
  
  vec4 curIndex = a_index;
  vec4 curWeight = a_weight;
  
  for (int i = 0; i < 4; i++){
    float weight = curWeight[i];
    if(weight > 0.0){
      int idx = int(curIndex[i]);
        
      // load the specified bone matrix from the texture
      mat4 m44 = loadMatrixFromTexture(samplerSkinningMatrices, textureHeight, idx);
      
      transformedPosition += m44 * a_position * weight;
    }
  }
  
  gl_Position = modelViewProjectionMatrix * transformedPosition;    
  
}

#else
#ifdef SKIN_POSITIONS_AND_NORMALS

void skinPositionsAndNormalsWithTransformedPositionsAndNormal(
  in sampler2D samplerSkinningMatrices,
  in float textureHeight,
  out vec4 transformedPosition,
  out vec4 transformedNormal
){
  transformedPosition = vec4(0.0,0.0,0.0,0.0);
  transformedNormal = vec4(0.0,0.0,0.0,0.0);
  
  vec4 curIndex = a_index;
  vec4 curWeight = a_weight;
  
  for (int i = 0; i < 4; i++){
    float weight = curWeight[i];
    if(weight > 0.0){
      int idx = int(curIndex[i]);
        
      // load the specified bone matrix from the texture
      mat4 m44 = loadMatrixFromTexture(samplerSkinningMatrices, textureHeight, idx);
      
      transformedPosition += m44 * a_position * weight;

      // transform normal by bone i
      mat3 m33 = mat3( m44[0].xyz, m44[1].xyz, m44[2].xyz );
      transformedNormal.xyz += m33 * a_normal.xyz * weight;
    }
  }

  vec4 modelCameraPosition = u_modelViewMatrix * transformedPosition;
  lightDir = vec3(u_lightPosition.xyz - modelCameraPosition.xyz);
  viewDir = vec3(-modelCameraPosition.xyz);
  
  gl_Position = u_modelViewProjectionMatrix * transformedPosition;    
  
  normal = u_normalMatrix * transformedNormal.xyz;
}


void skinPositionsAndNormals(
  in sampler2D samplerSkinningMatrices,
  in float textureHeight
){
  vec4 transformedPosition;
  vec4 transformedNormal;
  skinPositionsAndNormalsWithTransformedPositionsAndNormal(
    samplerSkinningMatrices,
    textureHeight,
    transformedPosition,
    transformedNormal
  );
}

#else
#ifdef SKIN_POSITIONS_NORMALS_AND_TANGENTS

void skinPositionsNormalsAndTangents(
  in sampler2D samplerSkinningMatrices,
  in float textureHeight
){
  vec4 transformedPosition = vec4(0.0,0.0,0.0,0.0);
  vec3 transformedNormal = vec3(0.0,0.0,0.0);
  vec3 transformedTangent = vec3(0.0,0.0,0.0);
  
  vec4 curIndex = a_index;
  vec4 curWeight = a_weight;
  
  for (int i = 0; i < 4; i++){
    float weight = curWeight[i];
    if(weight > 0.0){
      int idx = int(curIndex[i]);
        
      // load the specified bone matrix from the texture
      mat4 m44 = loadMatrixFromTexture(samplerSkinningMatrices, textureHeight, idx);
      
      transformedPosition += m44 * a_position * weight;

      // transform normal by bone i
      mat3 m33 = mat3( m44[0].xyz, m44[1].xyz, m44[2].xyz );
      transformedNormal.xyz += m33 * a_normal.xyz * weight;
      transformedTangent += m33 * a_tangent.xyz * weight;
    }
  }

  vec4 modelCameraPosition = u_modelViewMatrix * transformedPosition;
  lightDir = vec3( u_lightPosition.xyz - modelCameraPosition.xyz );
  viewDir = vec3(-modelCameraPosition.xyz );
  
  gl_Position = u_modelViewProjectionMatrix * transformedPosition;    
  
  normal = u_normalMatrix * transformedNormal;
  tangent = u_normalMatrix * transformedTangent;
  
  if( a_tangent.w < 0.0 ){
    binormal = cross(normal, tangent);
  }else{
    binormal = cross(tangent, normal);
  }
}


#endif
#endif
#endif
