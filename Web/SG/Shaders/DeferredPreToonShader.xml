<?xml version="1.0" encoding="UTF-8"?>
<shader>
  <name>ToonDemoMaterial</name>
  
  <uniforms>
    <uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
    
    <uniform name="u_materialBrightColor" constant="brightColor" type="Color" defaultValue="FABRIC.RT.rgba(0.5,0.5,1.0,1)"/>
    <uniform name="u_materialDarkColor" constant="darkColor" type="Color" defaultValue="FABRIC.RT.rgba(0.3,0.3,0.5,1)"/>
    <uniform name="u_materialColorSteps" constant="colorSteps" type="Scalar" defaultValue="3.0"/>
    
    <uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_modelViewMatrix" constant="modelViewMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_normalMatrix" constant="normalMatrix" type="Mat33" owner="instance"/>

    <uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
  </uniforms>

  <attributes>
    <attribute name="a_position" binding="positions"/>
    <attribute name="a_normal" binding="normals"/>
  </attributes>
  
  <openglstateparams>
    <disableOptions>
      <option>GL_CULL_FACE</option>
    </disableOptions>
  </openglstateparams>

  <lights>
    <light type="Light" binding="light"/>
  </lights>

  <vertexshader>
    <source>
      <![CDATA[
      uniform mat4 u_modelViewProjectionMatrix;
      uniform mat4 u_modelViewMatrix;
      uniform mat3 u_normalMatrix;
      uniform vec4 u_lightPosition;
      
      attribute vec4 a_position;
      attribute vec3 a_normal;

      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 position;

      void main(){
        normal = u_normalMatrix * a_normal;
        position = (u_modelViewMatrix * a_position).xyz;
  
        lightDir = u_lightPosition.xyz - position;

        gl_Position = u_modelViewProjectionMatrix * a_position;
      }
      ]]>
    </source>
  </vertexshader>
  
  <fragmentshader>
    <source>
      <![CDATA[
      uniform int u_lightType;

      uniform vec4 u_materialBrightColor;
      uniform vec4 u_materialDarkColor;
      uniform float u_materialColorSteps;

      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 position;

      void main(){

        vec3 Ln = normalize(lightDir);
        vec3 Vn = normalize(-position);
        vec3 Nn = normalize(normal);

        float intensity = dot(Ln,Nn);
        intensity = floor(intensity * u_materialColorSteps + 0.5) / u_materialColorSteps;

        gl_FragData[0].r = position.z;
        gl_FragData[1].xyz = Nn;
        gl_FragData[2].rgb = mix( u_materialBrightColor.rgb, u_materialDarkColor.rgb, intensity );
        gl_FragData[2].a = 1.0;      
      }
      ]]>
    </source>
  </fragmentshader>
</shader>
