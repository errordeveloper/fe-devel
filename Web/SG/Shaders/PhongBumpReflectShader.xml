<?xml version="1.0" encoding="UTF-8"?>
<shader>
	<name>PhongBumpReflectMaterial</name>
	
	<uniforms>
		<uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
		<uniform name="u_lightType" constant="lightType" type="Integer" owner="light"/>
		<uniform name="u_lightDir" constant="lightDir" type="Vec3" owner="light"/>
		<uniform name="u_lightColor" constant="lightColor" type="Color" owner="light"/>
		<uniform name="u_lightCosCutoff" constant="lightCosCutoff" type="Scalar" owner="light"/>
		
		<uniform name="u_materialAmbientColor" constant="ambientColor" type="Color"/>
		<uniform name="u_materialShininess" constant="shininess" type="Scalar" defaultValue="20.7"/>
		<uniform name="u_materialBumpStrength" constant="bumpiness" type="Scalar" defaultValue="1.0"/>
		
		<uniform name="u_samplerDiffuseMap" constant="diffuseTexture" type="Integer" owner="texture"/>
		<uniform name="u_samplerSpecularMap" constant="specularTexture" type="Integer" owner="texture"/>
		<uniform name="u_samplerNormalMap" constant="normalTexture" type="Integer" owner="texture"/>
		
		<uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
		<uniform name="u_modelViewMatrix" constant="modelViewMatrix" type="Mat44" owner="instance"/>
		<uniform name="u_normalMatrix" constant="normalMatrix" type="Mat33" owner="instance"/>
	</uniforms>
	
	<attributes>
		<attribute name="a_position" binding="positions"/>
		<attribute name="a_texCoord" binding="uvs0"/>
		<attribute name="a_normal" binding="normals"/>
		<attribute name="a_tangent" binding="tangents"/>
	</attributes>
	
	<lights>
		<light type="Light" binding="light"/>
	</lights>
	
	<textures>
		<texture binding="diffuseTexture"/>
		<texture binding="specularTexture"/>
		<texture binding="normalTexture"/>
	</textures>
	
	<vertexshader>
		<source>
			<![CDATA[
			uniform mat4 u_modelViewProjectionMatrix;
			uniform mat4 u_modelViewMatrix;
			uniform mat3 u_normalMatrix;
			uniform vec4 u_lightPosition;
			
			attribute vec4 a_position;
			attribute vec4 a_texCoord;
			attribute vec3 a_normal;
			attribute vec4 a_tangent;
			
			varying vec3 normal;
			varying vec3 tangent;
			varying vec3 binormal;
			varying vec3 lightDir;
			varying vec3 viewDir;
			
			void main()
			{
				gl_TexCoord[0].xy = a_texCoord.xy;
				
				normal = u_normalMatrix * a_normal;
				tangent = u_normalMatrix * vec3(a_tangent.x,a_tangent.y,a_tangent.z);
				binormal = cross(tangent, normal);
				
				vec4 modelCameraPosition = u_modelViewMatrix * a_position;
				lightDir = vec3(u_lightPosition - modelCameraPosition);
				viewDir = vec3(-modelCameraPosition);
				gl_Position = u_modelViewProjectionMatrix * a_position;			
			}
			]]>
		</source>
	</vertexshader>
	
	<fragmentshader>
		<source>
			<![CDATA[
			uniform int u_lightType;
			uniform vec3 u_lightDir;
			uniform vec4 u_lightColor;
			uniform float u_lightCosCutoff;
			
			uniform float u_materialShininess;
			uniform vec4 u_materialAmbientColor;
			uniform float u_materialBumpStrength;
			
			uniform sampler2D u_samplerDiffuseMap;
			uniform sampler2D u_samplerSpecularMap;
			uniform sampler2D u_samplerNormalMap;
			
			varying vec3 normal;
			varying vec3 tangent;
			varying vec3 binormal;
			varying vec3 lightDir;
			varying vec3 viewDir;
			
			
			]]>
			</source>
			<include file="lighting.txt"/>
			<source>
			<![CDATA[
			
			void main(){
				vec3 Ln = normalize(lightDir);
				vec3 Vn = normalize(viewDir);
				vec3 Nn = apply_normal_map(	normalize(normal),
									normalize(tangent),
									normalize(binormal),
									u_materialBumpStrength,
									u_samplerNormalMap );
				
				float lightFactor = 1.0;
				gl_FragColor = phong_shading(	Nn, 
												Ln, 
												Vn, 
												u_lightType,
												u_lightDir,
												lightFactor,
												u_lightCosCutoff,
												u_lightColor,
												texture2D( u_samplerDiffuseMap, gl_TexCoord[0].st ), 
												texture2D( u_samplerSpecularMap, gl_TexCoord[0].st ),
												u_materialShininess,
												u_materialAmbientColor );
												
			}
			]]>
		</source>
	</fragmentshader>
</shader>
