<?xml version="1.0" encoding="UTF-8"?>
<shader>
  <name>ShadowReceivingPhongMaterial</name>

  <uniforms>
    <uniform name="u_lightPosition" constant="lightPosition" type="Vec3" owner="light"/>
    <uniform name="u_lightType" constant="lightType" type="Integer" owner="light"/>
    <uniform name="u_lightDir" constant="lightDir" type="Vec3" owner="light"/>
    <uniform name="u_lightColor" constant="lightColor" type="Color" owner="light"/>
    <uniform name="u_lightCosCutoff" constant="lightCosCutoff" type="Scalar" owner="light"/>

    <uniform name="u_shadowMapSampler" constant="lightShadowMap" type="Scalar" defaultValue="0.0" owner="light"/>
    <uniform name="u_shadowMapMatrix" constant="lightShadowMapMatrix" type="Mat44" owner="light"/>

    <uniform name="u_materialAmbientColor" constant="ambientColor" type="Color" defaultValue="FABRIC.RT.rgba(0.0,0.0,0.0,1)"/>
    <uniform name="u_materialDiffuseColor" constant="diffuseColor" type="Color" defaultValue="FABRIC.RT.rgba(0.8,0,0,1)"/>
    <uniform name="u_materialSpecularColor" constant="specularColor" type="Color" defaultValue="FABRIC.RT.rgba(0.5,0.5,0.5,1)"/>
    <uniform name="u_materialShininess" constant="shininess" type="Scalar" defaultValue="20.0"/>

    <uniform name="u_modelViewProjectionMatrix" constant="modelViewProjectionMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_modelViewMatrix" constant="modelViewMatrix" type="Mat44" owner="instance"/>
    <uniform name="u_normalMatrix" constant="normalMatrix" type="Mat33" owner="instance"/>

  </uniforms>

  <attributes>
    <attribute name="a_position" binding="positions"/>
    <attribute name="a_normal" binding="normals"/>
  </attributes>

  <textures>
    <texture binding="lightShadowMap"/>
  </textures>

  <lights>
    <light type="SpotLight|DirectionalLight" binding="light" shadowMap="shadowMap"/>
  </lights>

  <vertexshader>
    <source>
      <![CDATA[

      uniform mat4 u_modelViewProjectionMatrix;
      uniform mat4 u_modelViewMatrix;
      uniform mat3 u_normalMatrix;

      uniform vec4 u_lightPosition;
      uniform mat4 u_shadowMapMatrix;
      uniform mat4 u_objectMatrix;

      attribute vec4 a_position;
      attribute vec3 a_normal;

      varying vec4 shadowCoord;
      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 viewDir;

      void main(){
        normal = u_normalMatrix * a_normal;

        vec3 vertex = vec3( u_modelViewMatrix * a_position );
        lightDir = u_lightPosition.xyz - vertex;
        viewDir = vec3(-vertex);
        gl_Position = u_modelViewProjectionMatrix * a_position;

        shadowCoord =  u_shadowMapMatrix * u_modelViewMatrix * a_position;
      }

      ]]>
    </source>
  </vertexshader>

  <fragmentshader>
    <source>
      <![CDATA[
      
      uniform int u_lightType;
      uniform vec3 u_lightDir;
      uniform vec4 u_lightColor;
      uniform float u_lightCosCutoff;

      uniform float u_materialShininess;
      uniform vec4 u_materialAmbientColor;
      uniform vec4 u_materialDiffuseColor;
      uniform vec4 u_materialSpecularColor;
      
      varying vec3 normal;
      varying vec3 lightDir;
      varying vec3 viewDir;
      varying vec4 shadowCoord;
      
      
      ]]>
      </source>
      <include file="lighting.txt"/>
      <include file="shadows.txt"/>
      <source>
      <![CDATA[
      

      #ifdef USE_SHADOW_SAMPLER
        uniform sampler2DShadow u_shadowMapSampler;
      #else
        uniform sampler2D u_shadowMapSampler;
      #endif


      void main()
      {
      //  float lightFactor = getLightFactor_PCF( u_shadowMapSampler, shadowCoord );
      //  float lightFactor = getLightFactor_Dither( u_shadowMapSampler, shadowCoord );
        float lightFactor = getLightFactor_Hard( u_shadowMapSampler, shadowCoord );
        
        vec3 Ln = normalize(lightDir);
        vec3 Vn = normalize(viewDir);
        vec3 Nn = normalize(normal);
        
        
        gl_FragColor = phong_shading(  Nn, 
                Ln, 
                Vn, 
                u_lightType,
                u_lightDir,
                lightFactor,
                u_lightCosCutoff,
                u_lightColor,
                u_materialDiffuseColor, 
                u_materialSpecularColor,
                u_materialShininess,
                u_materialAmbientColor );
      }



      ]]>
    </source>
  </fragmentshader>
</shader>
