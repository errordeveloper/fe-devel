//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Math;
use Vec3;

operator generateCone(
  io Container container,
  io Scalar radius,
  io Scalar height,
  io Boolean cap,
  io Integer detail,

  io Integer indices[],
  io Vec3 positions<>,
  io Vec3 normals<>
) {
  var Integer nbSides = (detail >= 0) ? (detail + 3) : 3;

  var Integer numVertices = nbSides * 2;
  var Integer numTriangles = nbSides * 2;

  if (cap) {
    numVertices += nbSides + 1;
    numTriangles += nbSides;
  }
  container.resize(Size(numVertices));

  indices.resize(numTriangles * 3);

  for (var Integer i = 0; i < nbSides; i++) {
    var Scalar theta = (i / Scalar(nbSides)) * 2.0 * PI;

    var Vec3 nrm(radius * cos(theta), radius / (height / 2.0), radius * sin(theta));
    nrm.setUnit();

    normals[i * 2 + 0] = normals[i * 2 + 1] = nrm;
    positions[i * 2 + 0] = Vec3(cos(theta) * radius, - height / 2.0, sin(theta) * radius);
    positions[i * 2 + 1] = Vec3(0.0, height / 2.0, 0.0);

    var Integer j = (i + 1) % nbSides;
    indices[i * 6 + 0] = i * 2 + 0;
    indices[i * 6 + 1] = i * 2 + 1;
    indices[i * 6 + 2] = j * 2 + 0;

    indices[i * 6 + 3] = i * 2 + 1;
    indices[i * 6 + 4] = j * 2 + 1;
    indices[i * 6 + 5] = j * 2 + 0;
  }

  if (cap) {
    var Integer voff = nbSides * 2;
    var Integer idxoff = nbSides * 6;

    // Bottom cap
    var Vec3 nrm(0.0, - 1.0, 0.0);

    positions[voff] = Vec3(0.0, - height / 2.0, 0.0);
    normals[voff] = nrm;
    for (var Integer i = 0; i < nbSides; i++) {
      var Scalar theta = (i / Scalar(nbSides)) * 2.0 * PI;

      positions[voff + i + 1].set(cos(theta) * radius, - height / 2.0, sin(theta) * radius);
      normals[voff + i + 1] = nrm;

      var Integer j = (i + 1) % nbSides;
      indices[idxoff + i * 3 + 0] = voff;
      indices[idxoff + i * 3 + 1] = voff + i + 1;
      indices[idxoff + i * 3 + 2] = voff + j + 1;
    }
  }
}