//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use OGLTexture2D;
use OGLShaderProgram;
use Xfo;
use Mat44;
use PIXELFORMAT;

operator loadSlicedImagePIXELFORMAT(
  io Container container,
  io FabricResource resource,
  io Size imageWidth,
  io Size imageHeight,
  io PIXELFORMAT slicedBitmap<>
) {
  if(resource.data.size() > 0 || Boolean(resource.dataExternalLocation))
  {
    PIXELFORMAT bitmap[];
    decodePIXELFORMATImageData(resource, imageWidth, imageHeight, bitmap);
    Size newSize = bitmap.size();
    container.resize( newSize );
    for( Size i = 0; i < newSize; ++i )
      slicedBitmap[i] = bitmap[i];
    resource.data.resize(0);
  }
}

operator clearImagePIXELFORMAT(
  io PIXELFORMAT bitmap[]
) {
  bitmap.resize(0);
}

operator bindTexturePIXELFORMAT(
  io Size width,
  io Size height,
  io PIXELFORMAT bitmap<>,
  io OGLTexture2D oglTexture2D,
  io Integer textureUnit
) {
  oglTexture2D.bindImage(width, height, bitmap.data(), bitmap.size(), textureUnit);
}

// This operator takes a resource, decodes it, and immediately
// uploads it to the GPU. This simplifies the graph, because 
// a node is not created to store the data in main memory. 
operator loadAndBindTexturePIXELFORMAT(
  io FabricResource resource,
  io OGLTexture2D oglTexture2D,
  io Integer textureUnit
) {
//  report("loadAndBindTexturePIXELFORMAT -> textureUnit:" + textureUnit);
  if((oglTexture2D.bufferID == 0 || oglTexture2D.forceRefresh) && (resource.data.size() > 0 || Boolean(resource.dataExternalLocation))){
    Size width, height;
    PIXELFORMAT bitmap[];
    if(decodePIXELFORMATImageData(resource, width, height, bitmap)){
      oglTexture2D.bindImage(width, height, bitmap.data(), bitmap.size(), textureUnit);
    }
  }
  else{
    if(oglTexture2D.bufferID != 0)
      oglTexture2D.bind(textureUnit);
  }
}

operator unbindTextures(
  io Size numTextures
){
  for(Integer i=0; i<numTextures; i++){
    glActiveTexture(GL_TEXTURE0 + i);
    glBindTexture(GL_TEXTURE_2D, 0);
  }
}

operator initImageFromPIXELFORMAT(
  io Container container,
  io Size width,
  io Size height,
  io PIXELFORMAT color,
  io Boolean initiated,
  io PIXELFORMAT pixels<>
) {
  if(!initiated) {
    container.resize( width * height );
    for(var Size i=0;i<pixels.size();i++)
      pixels[i] = color;
    initiated = true;
  }
}

operator createSpriteTexture(
  io Integer res,
  io Integer bufferID,
  io Integer textureUnit
) {
  if (!bufferID && res > 0) {
    var RGBA texData[];
    texData.resize(res * res);

    var Size idx = 0;
    var Scalar dt = 2.0 / Scalar(res);
    var Scalar ty = - 1.0;
    for (var Integer y = 0; y < res; y++) {
      var Scalar tx = - 1.0;
      for (var Integer x = 0; x < res; x++) {
        var Scalar t = sqrt(tx * tx + ty * ty);
        if (t > 1.0) t = 1.0;
          t = 2.0 * t * t * t - 3.0 * t * t + 1.0;
        texData[idx].r = texData[idx].g = texData[idx].b = texData[idx].a = Byte(t * 255.0);
        idx++;
        tx += dt;
      }
      ty += dt;
    }

    var Integer buffers[];
    buffers.push(bufferID);
    glGenTextures(1, buffers);
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
    glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, 1);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, res, res, 0, GL_RGBA, GL_UNSIGNED_BYTE, texData.data());
  }
  else {
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
  }
}

operator createErrorTexture(
  io Integer bufferID,
  io Integer textureUnit
) {
  if (!bufferID) {
    var RGBA texData[];
    texData.resize(1);
    texData[0].r = 1.0;
    texData[0].g = texData[0].b = texData[0].a = 0.0;
    var Integer buffers[];
    buffers.resize(1);
    glGenTextures(1, buffers);
    bufferID = buffers[0];
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, 1, 1, 0, GL_RGBA, GL_UNSIGNED_BYTE, texData.data());
  }
  else {
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, bufferID);
  }
}
