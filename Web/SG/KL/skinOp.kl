//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Vec3;
use Vec4;
use Mat44;

operator skinOp
(
  in Size index,
  io Vec3 position,
  io Vec3 normal,
  io Vec4 tangent,
  io Mat44 bindMatrix,
  io Mat44 bindPose[],
  io Mat44 pose[],
  io Integer skinIDs[],
  io Scalar skinWeights[],
  io Vec3 deformed_position,
  io Vec3 deformed_normal,
  io Vec4 deformed_tangent,
) {
  // sanity check
  if (skinIDs.size() != skinWeights.size())
    return;

  // add the normal to the position
  normal += position;
  var Vec3 tangent3(tangent.x, tangent.y, tangent.z);
  tangent3 += position;

  var Vec3 resultPos(0.0, 0.0, 0.0);
  var Vec3 resultNormal(0.0, 0.0, 0.0);
  var Vec3 resultTangent(0.0, 0.0, 0.0);

  for (var Integer i = 0; i < skinIDs.size(); i++) {
    // the bindPose is already inversed
    if (skinWeights[i] > 0.001) {
      resultPos += (position * bindPose[skinIDs[i]] * pose[skinIDs[i]]) * skinWeights[i];
      resultNormal += (normal * bindPose[skinIDs[i]] * pose[skinIDs[i]]) * skinWeights[i];
      resultTangent += (tangent3 * bindPose[skinIDs[i]] * pose[skinIDs[i]]) * skinWeights[i];
    }
  }

  // take care of the bindMatrix
  deformed_position = resultPos * bindMatrix;
  deformed_normal = resultNormal * bindMatrix;
  deformed_normal -= deformed_position;
  tangent3 = resultTangent * bindMatrix;
  tangent3 -= position;
  deformed_tangent.x = tangent3.x;
  deformed_tangent.y = tangent3.y;
  deformed_tangent.z = tangent3.z;
}