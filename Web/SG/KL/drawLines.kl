//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricOGL;
use OGLShaderProgram;

operator drawLines(
  io OGLShaderProgram shaderProgram,
  io OGLBuffer indicesBuffer,
  io Boolean drawToggle,
  io Size numDrawnVerticies,
  io Size numDrawnGeometries
) {
  if(shaderProgram.debug){
    report("drawLines:"+shaderProgram.name);
  }
  if (drawToggle) {
    shaderProgram.preDraw();
    
    var Data NULL;
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBuffer.bufferID);
    glDrawElements(GL_LINES, indicesBuffer.elementCount, GL_UNSIGNED_INT, NULL);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
    
    numDrawnVerticies += Size(Scalar(indicesBuffer.elementCount) / 2.0);
    numDrawnGeometries++;
  }
  shaderProgram.postDraw();
}


operator drawLineStrip(
  io OGLShaderProgram shaderProgram,
  io OGLBuffer indicesBuffer,
  io Boolean drawToggle,
  io Size numDrawnVerticies,
  io Size numDrawnGeometries
) {
  if(shaderProgram.debug){
    report("drawLineStrip:"+shaderProgram.name);
  }
  if (drawToggle && shaderProgram.programId != 0) {
    shaderProgram.preDraw();
    
    var Data NULL;
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBuffer.bufferID);
    glDrawElements(GL_LINE_STRIP, indicesBuffer.elementCount, GL_UNSIGNED_INT, NULL);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
    
    numDrawnVerticies += Size(Scalar(indicesBuffer.elementCount) / 2.0);
    numDrawnGeometries++;
  }
  shaderProgram.postDraw();
}

operator setLineWidth(io Scalar lineWidth) {
  glLineWidth(lineWidth);
}

operator resetLineWidth() {
  glLineWidth(1.0);
}