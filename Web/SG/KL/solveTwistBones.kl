//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Quat, Xfo;
use Bone;

operator solveBlendBones(
  io Xfo pose[],
  io Bone bones[],
  io Integer blendBones[],
  io Integer base[],
  io Integer end[],
  io Scalar blendWeights[],
  io Quat blendBoneOffsets[]
) {
  for (var Integer i = 0; i < blendBones.size(); i++) {

    Xfo baseXfo = pose[base[i]];
    Xfo endXfo = pose[end[i]];
    Xfo blendedXfo = baseXfo;
    blendedXfo.ori = baseXfo.ori.sphericalLinearInterpolate(endXfo.ori, blendWeights[i]);
  
    pose[blendBones[i]].tr = baseXfo.transformVector(bones[blendBones[i]].referenceLocalPose.tr);
    pose[blendBones[i]].ori = baseXfo.ori.sphericalLinearInterpolate(endXfo.ori, blendWeights[i]);
    
    pose[blendBones[i]].ori = pose[blendBones[i]].ori * blendBoneOffsets[i];
  }
}

operator solveTwistBones(
  io Xfo pose[],
  io Bone bones[],
  io Integer baseBones[],
  io Integer endBones[],
  io Integer twistBones[][],
  io Scalar twistWeights[][],
  io Quat oriOffsets[][]
) {
  for (var Integer i = 0; i < twistBones.size(); i++) {
    if (twistBones.size() != twistWeights.size()) {
      // TODO: throw an assert once we are able to do that.
      report('Error: twistBone count does not match twistWeights count');
      return;
    }
    Xfo baseXfo = pose[baseBones[i]];
    Xfo endXfo = pose[endBones[i]];
  
    Vec3 baseVec = (endXfo.tr - baseXfo.tr).unit();
    Vec3 endVec = endXfo.ori.getXaxis();
    Quat boneOffsetRotation;
    boneOffsetRotation.setFrom2Vectors(endVec, baseVec);
    endXfo.ori = boneOffsetRotation * endXfo.ori;
    endXfo.ori.alignWith(baseXfo.ori);
    for (var Integer j = 0; j < twistBones[i].size(); j++) {
      pose[twistBones[i][j]] = pose[bones[twistBones[i][j]].parent] * bones[twistBones[i][j]].referenceLocalPose;
      pose[twistBones[i][j]].ori = baseXfo.ori.sphericalLinearInterpolate(endXfo.ori, twistWeights[i][j]) * oriOffsets[i][j];
    }
  }
}