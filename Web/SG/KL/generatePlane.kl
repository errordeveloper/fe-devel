//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Vec2;
use Vec3;

operator generatePlane(
  io Container container,
  io Integer indices[],
  io Scalar length,
  io Scalar width,
  io Integer lengthSections,
  io Integer widthSections,

  io Vec3 positions<>,
  io Vec3 normals<>,
  io Vec2 uvs<>
) {
  var Integer vi = 0;
  var Integer ii = 0;

  if (lengthSections < 1) {
    lengthSections = 1;
  }
  if (widthSections < 1) {
    widthSections = 1;
  }

  container.resize(Size((lengthSections + 1) * (widthSections + 1)));
  
  Integer numTriangles;

  Integer nbLengthSections = lengthSections + 1;
  Integer nbWidthSections = widthSections + 1;
  
  numTriangles = 2 * widthSections * lengthSections;
  
  indices.resize(numTriangles * 3);
  
  Integer voff = 0;
  for (Integer j = 0; j < nbWidthSections; j++) {
    Scalar x = ((j / Scalar(widthSections))-0.5) * width;
    for (Integer i = 0; i < nbLengthSections; i++) {
      Scalar z = ((i / Scalar(lengthSections))-0.5) * length;

      normals[voff] = Vec3(
        0.0,
        1.0,
        0.0
      );

      positions[voff].x = x;
      positions[voff].z = z;
      uvs[voff] = Vec2(Scalar(j) / Scalar(widthSections), Scalar(i) / Scalar(lengthSections));
      voff++;
    }
  }
  
  Integer fid = 0;
  Integer tid = 0;
  
  for (Integer i = 0; i < lengthSections; i++) {
    for (Integer j = 0; j < widthSections; j++) {
      
      Integer v0, v1, v2, v3;
      v0 = (nbWidthSections * i) + j;
      v1 = (nbWidthSections * i) + (j + 1);
      v2 = (nbWidthSections * (i+1)) + (j + 1);
      v3 = (nbWidthSections * (i+1)) + j;
      
      indices[tid++] = v0;
      indices[tid++] = v1;
      indices[tid++] = v3;
      fid++;
      
      indices[tid++] = v1;
      indices[tid++] = v2;
      indices[tid++] = v3;
      fid++;
    }
  }
}