//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Vec3;

operator generateAxes(
  io Container container,
  io Vec3 positions<>,
  io Integer indices[],
  io Scalar size
) {
  container.resize(Size(19));
  indices.resize(23);

  Integer iidx = 0;
  Integer vidx = 0;
  // X-axis
  positions[vidx++] = Vec3(size, 0.0, 0.0);
  positions[vidx++] = Vec3(0.0, 0.0, 0.0);
  indices[iidx++] = 0; indices[iidx++] = 1;
  positions[vidx++] = Vec3(1.2 * size, 0.2 * size, 0.0);
  positions[vidx++] = Vec3(1.6 * size, - 0.2 * size, 0.0);
  indices[iidx++] = 2; indices[iidx++] = 3;
  positions[vidx++] = Vec3(1.6 * size, 0.2 * size, 0.0);
  positions[vidx++] = Vec3(1.2 * size, - 0.2 * size, 0.0);
  indices[iidx++] = 4; indices[iidx++] = 5;

  // Y-axis
  positions[vidx++] = Vec3(0.0, size, 0.0);
  positions[vidx++] = Vec3(0.0, 0.0, 0.0);
  indices[iidx++] = 6; indices[iidx++] = 7;
  positions[vidx++] = Vec3(0.0, 1.2 * size, 0.0);
  positions[vidx++] = Vec3(0.0, 1.4 * size, 0.0);
  indices[iidx++] = 8; indices[iidx++] = 9;
  positions[vidx++] = Vec3(-0.2 * size, 1.6 * size, 0.0);
  indices[iidx++] = 9; indices[iidx++] = 10;
  positions[vidx++] = Vec3(0.2 * size, 1.6 * size, 0.0);
  indices[iidx++] = 9; indices[iidx++] = 11;

  // Z-axis
  positions[vidx++] = Vec3(0.0, 0.0, size);
  positions[vidx++] = Vec3(0.0, 0.0, 0.0);
  indices[iidx++] = 12; indices[iidx++] = 13;
  positions[vidx++] = Vec3(0.0, - 0.2 * size, 1.2 * size);
  positions[vidx++] = Vec3(0.0, - 0.2 * size, 1.6 * size);
  indices[iidx++] = 14; indices[iidx++] = 15;
  positions[vidx++] = Vec3(0.0, 0.2 * size, 1.2 * size);
  indices[iidx++] = 15; indices[iidx++] = 16;
  positions[vidx++] = Vec3(0.0, 0.2 * size, 1.6 * size);
  indices[iidx++] = 16; indices[iidx++] = 17;

}