/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

use OGLTextureCube;


operator bindCubeMap(
  io FabricResource resource0,
  io FabricResource resource1,
  io FabricResource resource2,
  io FabricResource resource3,
  io FabricResource resource4,
  io FabricResource resource5,
  io OGLTextureCube cubeMap,
  io Integer textureUnit
){
  if(cubeMap.bufferID == 0){
    Size width, height;
    RGBA imageLDR[];
    var Data NULL;
    report(resource0);
    if((resource0.data.size() != 0 || Boolean(resource0.dataExternalLocation)) && !cubeMap.isFaceDataStored(0)){
      decodeRGBAImageData(resource0, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 0);
    }
    if((resource1.data.size() != 0 || Boolean(resource1.dataExternalLocation)) && !cubeMap.isFaceDataStored(1)){
      decodeRGBAImageData(resource1, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 1);
    }
    if((resource2.data.size() != 0 || Boolean(resource2.dataExternalLocation)) && !cubeMap.isFaceDataStored(2)){
      decodeRGBAImageData(resource2, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 2);
    }
    if((resource3.data.size() != 0 || Boolean(resource3.dataExternalLocation)) && !cubeMap.isFaceDataStored(3)){
      decodeRGBAImageData(resource3, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 3);
    }
    if((resource4.data.size() != 0 || Boolean(resource4.dataExternalLocation)) && !cubeMap.isFaceDataStored(4)){
      decodeRGBAImageData(resource4, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 4);
    }
    if((resource5.data.size() != 0 || Boolean(resource5.dataExternalLocation)) && !cubeMap.isFaceDataStored(5)){
      decodeRGBAImageData(resource5, width, height, imageLDR);
      cubeMap.storeData(imageLDR, width, height, 5);
    }
    cubeMap.configure(textureUnit);
    cubeMap.bind(textureUnit);
  }
  else{
    cubeMap.bind(textureUnit);
  }
}


