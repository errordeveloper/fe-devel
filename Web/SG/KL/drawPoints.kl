//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricOGL;
use OGLBuffer;
use OGLShaderProgram;

operator preDrawSpritePoints(
  io Scalar pointSize
) {
  glEnable(GL_POINT_SPRITE);
  glTexEnvi(GL_POINT_SPRITE, GL_COORD_REPLACE, 1);
  glEnable(GL_VERTEX_PROGRAM_POINT_SIZE);
  glPointSize(pointSize);
  glBlendFunc(GL_SRC_ALPHA, GL_ONE);
  glEnable(GL_BLEND);
  glDepthMask(GL_FALSE);
  glColor3f(1.0, 1.0, 1.0);
}

operator postDrawSpritePoints() {
  glDisable(GL_POINT_SPRITE);
  glDisable(GL_BLEND);
  glDepthMask(GL_TRUE);
}

operator setPointSize(io Scalar pointSize) {
  glPointSize(pointSize);
}

operator setPointCount(
  Size pointCount,
  io Size instancePointCount
) {
  instancePointCount = pointCount;
}

operator drawPoints(
  io OGLShaderProgram shaderProgram,
  io Boolean drawToggle,
  io Size numDrawnVerticies,
  io Size numDrawnGeometries
) {
  if(shaderProgram.debug){
    report("drawPoints:"+shaderProgram.name);
  }
  if (drawToggle && shaderProgram.programId != 0) {
    shaderProgram.preDraw();
    glDrawArrays(GL_POINTS, 0, shaderProgram.attributesElementCount);
    numDrawnVerticies += shaderProgram.attributesElementCount;
    numDrawnGeometries++;
  }
  shaderProgram.postDraw();
}