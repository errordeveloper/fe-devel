//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Vec3;
use Xfo;
use FabricBULLET;

operator createBulletWorld(
  io BulletWorld world
){
  Boolean result;
  world.create(result);  
}

operator stepBulletWorld(
  io BulletWorld world,
  io Scalar prevTime,
  io Scalar time,
){
  Scalar steppedTime = time - prevTime;
  if(time == 0.0 && prevTime > 0.0) {
    world.reset();
    prevTime = 0.0;
  } else {
    world.step(steppedTime);
    prevTime = time - steppedTime;
  }
}

operator raycastBulletWorld(
  io Boolean select,
  io RayIntersection intersection,
  io Ray ray,
  io BulletWorld world,
  io Boolean enable
) {
  Vec3 road = ray.direction * 10000.0;
  Vec3 to = ray.start + road;
  Boolean filterPassiveObjects = true;
  BulletContact contacts[];
  world.raycast(ray.start,to,filterPassiveObjects,contacts);
  if(contacts.size() > 0) {
    select = true;
    intersection.point = ray.start + road * contacts[0].fraction;
    intersection.normal = contacts[0].normal;
    intersection.distance = (ray.start - intersection.point).length();
  }
}

operator applyBulletForce(
  io BulletWorld world,
  io BulletForce force[]
){
  for(Size i=0;i<force.size();i++) {
    if(force[i].enabled) {
      world.applyForce(force[i]);
      if(force[i].autoDisable)
        force[i].enabled = false;
    }
  }
}

operator createBulletShape(
  io BulletShape shape
){
  Boolean result;
  shape.create(result);
}

operator copyShapeVertices(
  io BulletShape shape,
  io Vec3 positions<>
){
  shape.vertices.resize(positions.size());
  for(Size i=0;i<positions.size();i++)
    shape.vertices[i] = positions[i];
}

operator copyShapeIndices(
  io BulletShape shape,
  io Integer indices[]
){
  shape.indices.resize(indices.size());
  for(Size i=0;i<indices.size();i++)
    shape.indices[i] = indices[i];
}

operator createBulletRigidBody(
  io BulletWorld world,
  io BulletShape shape,
  io BulletRigidBody body[]
){
  Boolean result;
  for(Size i=0;i<body.size();i++) {
    body[i].create(shape,result);
    if(result) {
      world.addRigidBody(body[i]);  
    }
  }
}

operator getBulletRigidBodyTransform(
  in Size index,
  io BulletRigidBody body[],
  io Xfo transform
){
  if(body[index].mass > 0.0) {
    transform = body[index].getTransform();
  }
  else {
    body[index].setTransform(transform);
  }
}

operator setBulletRigidBodyTransform(
  io BulletRigidBody body[],
  io Xfo transform[],
  io Scalar time
){
  if(body.size() == transform.size() && time == 0.0) {
    for(var Size i=0;i<body.size();i++) {
      body[i].setTransform(transform[i]);
    }
  }
}

operator createBulletSoftBody(
  io BulletWorld world,
  io BulletSoftBody body,
  io Vec3 positions<>,
  io Vec3 normals<>,
  io Integer indices[]
){
  Boolean result = false;
  body.create(result,world,positions,normals,indices);
  if(result) {
    world.addSoftBody(body);
  }
}

operator getBulletSoftBodyPosition(
  in Size index,
  io BulletSoftBody body,
  io Vec3 position,
  io Vec3 normal,
){
  body.getPosition(index, position, normal);
}

operator createBulletConstraint(
  io BulletWorld world,
  io BulletConstraint constraint[],
  io BulletRigidBody bodiesA[],
  io BulletRigidBody bodiesB[]
){
  Boolean result;
  for(Size i=0;i<constraint.size();i++) {
    constraint[i].create(result,bodiesA,bodiesB);
    if(result) {
      world.addConstraint(constraint[i]);  
    }
  }
}

operator createBulletAnchor(
  io BulletWorld world,
  io BulletAnchor anchor[],
  io BulletRigidBody rigidBodies[],
  io BulletSoftBody softBody
){
  Boolean result;
  for(Size i=0;i<anchor.size();i++) {
    anchor[i].create(result,rigidBodies,softBody);
  }
}
