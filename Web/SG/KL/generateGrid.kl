
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

operator generateGrid(
  io Container container,
  io Vec3 positions<>,
  io Integer indices[],
  io Scalar sizeX,
  io Scalar sizeY,
  io Scalar sizeZ,
  io Integer numXsections,
  io Integer numYsections,
  io Integer numZsections
) {
  if (numXsections < 1) numXsections = 1;
    if (numYsections < 1) numYsections = 1;
    if (numZsections < 1) numZsections = 1;

    var Integer numlineSegments = 0;
  if (numZsections > 1) numlineSegments += (numXsections * numYsections);
    if (numYsections > 1) numlineSegments += (numXsections * numZsections);
    if (numXsections > 1) numlineSegments += (numYsections * numZsections);

  container.resize(Size(numlineSegments * 2));
  indices.resize(numlineSegments * 2);
  var Integer i, j, k, indexid = 0;
  var Scalar x, y, z;
  var Scalar fNumX = Scalar(numXsections) - 1.0;
  var Scalar fNumY = Scalar(numYsections) - 1.0;
  var Scalar fNumZ = Scalar(numZsections) - 1.0;

  if (numZsections > 1) {
    x = 0.0;
    for (i = 0; i < numXsections; i++) {
      y = 0.0;
      for (j = 0; j < numYsections; j++) {

        if (numXsections > 1) positions[indexid + 0].x = (-sizeX / 2.0) + (sizeX * (x / fNumX));
          if (numYsections > 1) positions[indexid + 0].y = (-sizeY / 2.0) + (sizeY * (y / fNumY));
          positions[indexid + 0].z = - sizeZ / 2.0;

        if (numXsections > 1) positions[indexid + 1].x = (-sizeX / 2.0) + (sizeX * (x / fNumX));
          if (numYsections > 1) positions[indexid + 1].y = (-sizeY / 2.0) + (sizeY * (y / fNumY));
          positions[indexid + 1].z = sizeZ / 2.0;

        indices[indexid + 0] = indexid + 0;
        indices[indexid + 1] = indexid + 1;
        indexid += 2;
        y += 1.0;
      }
      x += 1.0;
    }
  }
  if (numYsections > 1) {
    x = 0.0;
    for (i = 0; i < numXsections; i++) {
      z = 0.0;
      for (j = 0; j < numZsections; j++) {

        if (numXsections > 1) positions[indexid + 0].x = (-sizeX / 2.0) + (sizeX * (x / fNumX));
          positions[indexid + 0].y = - sizeY / 2.0;
        if (numZsections > 1) positions[indexid + 0].z = (-sizeZ / 2.0) + (sizeZ * (z / fNumZ));

          if (numXsections > 1) positions[indexid + 1].x = (-sizeX / 2.0) + (sizeX * (x / fNumX));
          positions[indexid + 1].y = sizeY / 2.0;
        if (numZsections > 1) positions[indexid + 1].z = (-sizeZ / 2.0) + (sizeZ * (z / fNumZ));

          indices[indexid + 0] = indexid + 0;
        indices[indexid + 1] = indexid + 1;
        z += 1.0;
      }
      x += 1.0;
    }
  }
  if (numXsections > 1) {
    y = 0.0;
    for (i = 0; i < numYsections; i++) {
      z = 0.0;
      for (j = 0; j < numZsections; j++) {

        positions[indexid + 0].x = - sizeX / 2.0;
        if (numYsections > 1) positions[indexid + 0].y = (-sizeY / 2.0) + (sizeY * (y / fNumY));
          if (numZsections > 1) positions[indexid + 0].z = (-sizeZ / 2.0) + (sizeZ * (z / fNumZ));

          positions[indexid + 1].x = sizeX / 2.0;
        if (numYsections > 1) positions[indexid + 1].y = (-sizeY / 2.0) + (sizeY * (y / fNumY));
          if (numZsections > 1) positions[indexid + 1].z = (-sizeZ / 2.0) + (sizeZ * (z / fNumZ));

          indices[indexid + 0] = indexid + 0;
        indices[indexid + 1] = indexid + 1;
        indexid += 2;
        z += 1.0;
      }
      y += 1.0;
    }
  }
}