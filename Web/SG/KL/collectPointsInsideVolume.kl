//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use CollectedPoints;
use Mat33;
use Mat44;
use Vec3;
use Xfo;
use Color;

operator collectPointsInsideBrush(
  io Boolean select,
  io CollectedPoints collectedPoints,

  io Mat44 cameraMatrix,
  io Mat44 projectionMatrix,
  io Scalar aspectRatio,

  io Vec3 brushPos,
  io Scalar brushSize,

  io Xfo globalXfo,
  io Vec3 positions<>,
  io Vec3 normals<>
) {
  select = true;
  Mat44 modelMatrix = globalXfo.toMat44();
  Mat44 modelViewProjectionMatrix = projectionMatrix * cameraMatrix * modelMatrix;
  Mat33 normalMatrix = modelViewProjectionMatrix.upperLeft().inverse().transpose();

  collectedPoints.distances.resize(0);
  collectedPoints.points.resize(0);
  for (var Integer i = 0; i < positions.size(); i++) {
    Vec3 n = normalMatrix * normals[i];
    if (n.z > 0) {
      continue;
    }
    Vec3 v = modelViewProjectionMatrix * positions[i];
    Vec3 delta = v - brushPos;
    delta.x *= aspectRatio;
    delta.z *= 0.0;
    Scalar dist = delta.length();

    if (dist < brushSize) {
      collectedPoints.distances.push(dist);
      collectedPoints.points.push(i);
    }
  }
}