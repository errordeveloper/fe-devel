
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//



function Integer HashTable.calcCellIndex(
  in Vec3 position,
  io Vec3 cellcoords
) {
  // determine the cell that this particle belongs to.
  var Vec3 num_sections(Scalar(this.x_count), Scalar(this.y_count), Scalar(this.z_count));
  var Vec3 gridDim = num_sections * this.cellsize;
  cellcoords = (((position + (gridDim * 0.5)) / gridDim) * num_sections);
  return Integer(cellcoords.x) + ((Integer(cellcoords.z)) * this.x_count) + ((Integer(cellcoords.y)) * this.x_count * this.z_count);
}


function HashTable.addCellParticlesToNeighborsArray(
  io Integer neighbors[],
  in Integer x_index,
  in Integer y_index,
  in Integer z_index
) {
  var Integer cell[] = this.cells[x_index + (z_index * this.x_count) + (y_index * this.x_count * this.z_count)];

  for (var Integer i = 0; i < cell.size; i++) {
    neighbors.push(cell[i]);
  }
}

// This function returns all the neighbors from the current particles cell,
// and the neighboring cells.
function HashTable.getNeighboringIndices(
  in Integer cellindex,
  in Vec3 cellcoords,
  io Integer neighbors[]
) {
  Integer bufferSize = neighbors.size();
  ///////////////////////////////////////////////
  // Broad Phase Interaction Detection
  neighbors.resize(this.cells[cellindex].size);
  for (var Integer i = 0; i < this.cells[cellindex].size; i++) {
    neighbors[i] = this.cells[cellindex][i];
  }

  var Integer i;

  var Integer x_index = Integer(cellcoords.x);
  var Integer y_index = Integer(cellcoords.y);
  var Integer z_index = Integer(cellcoords.z);
  var Vec3 flooredCellCoords(Scalar(x_index), Scalar(y_index), Scalar(z_index));
  var Vec3 cellFraction = cellcoords - flooredCellCoords;

  // A particle willneed to check as least 1 cell (if it is centered exactly in its cell),
  // and at most 4(if it is tending towards one of the corners of its cell).
  // Note: It may be more efficient to simple check all particles in all 8 cells surrounding the current one.
  if (cellFraction.x < 0.5 && x_index > 0) {
    this.addCellParticlesToNeighborsArray(neighbors, x_index - 1, y_index, z_index);

    // Now check diagonal cells
    if (cellFraction.z < 0.5 && z_index > 0) {
      this.addCellParticlesToNeighborsArray(neighbors, x_index - 1, y_index, z_index - 1);
    }
    else if (cellFraction.z > 0.5 && z_index < (this.z_count - 1)) {
      this.addCellParticlesToNeighborsArray(neighbors, x_index - 1, y_index, z_index + 1);
    }
  }
  else if (cellFraction.x > 0.5 && x_index < (this.x_count - 1)) {
    this.addCellParticlesToNeighborsArray(neighbors, x_index + 1, y_index, z_index);

    // Now check diagonal cells
    if (cellFraction.z < 0.5 && z_index > 0) {
      this.addCellParticlesToNeighborsArray(neighbors, x_index + 1, y_index, z_index - 1);
    }
    else if (cellFraction.z > 0.5 && z_index < (this.x_count - 1)) {
      this.addCellParticlesToNeighborsArray(neighbors, x_index + 1, y_index, z_index + 1);
    }
  }
  //  if( cellFraction.y < 0.5 && y_index > 0 ){
  //    addCellParticlesToNeighborsArray( neighbors, x_index, y_index-1, z_index );
  //  }else if( cellFraction.y > 0.5 && y_index < this.y_count ){
  //    addCellParticlesToNeighborsArray( neighbors, x_index, y_index+1, z_index );
  //  }

  
  if (cellFraction.z < 0.5 && z_index > 0) {
    this.addCellParticlesToNeighborsArray(neighbors, x_index, y_index, z_index - 1);
  }
  else if (cellFraction.z > 0.5 && z_index < (this.z_count - 1)) {
    this.addCellParticlesToNeighborsArray(neighbors, x_index, y_index, z_index + 1);
  }
}


////////////////////////////////////////////////
// Clamp the position value within the bounds of the hash grid
function Vec3 HashTable.clampPosition(
  in Vec3 position,
) {
  Vec3 clampedPosition = position;
  if (clampedPosition.x > (Scalar(this.x_count)-0.25) * this.cellsize * 0.5) {
    clampedPosition.x = (Scalar(this.x_count)-0.25) * this.cellsize * 0.5;
  }
  if (clampedPosition.x < (Scalar(-this.x_count)+0.25) * this.cellsize * 0.5) {
    clampedPosition.x = (Scalar(-this.x_count)+0.25) * this.cellsize * 0.5;
  }
  if (clampedPosition.z > (Scalar(this.z_count)-0.25) * this.cellsize * 0.5) {
    clampedPosition.z = (Scalar(this.z_count)-0.25) * this.cellsize * 0.5;
  }
  if (clampedPosition.z < (Scalar(-this.z_count)+0.25) * this.cellsize * 0.5) {
    clampedPosition.z = (Scalar(-this.z_count)+0.25) * this.cellsize * 0.5;
  }
  return clampedPosition;
}

