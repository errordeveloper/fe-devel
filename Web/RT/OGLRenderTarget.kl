/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

use FabricOGL, OGLTexture2D;

function OGLRenderTarget.genTextures() {
//  report("OGLTexture2D.genTextures width:" + this.width + " height:" + this.height);

  Integer ints[]; ints.resize(1);
  Integer i, maxColorBuffers;
  glGetIntegerv(GL_MAX_COLOR_ATTACHMENTS, ints); maxColorBuffers = ints[0];
  this.numColorBuffers = 0;
  for(i=0; i<this.textures.size(); i++){
    if(this.textures[i].type == 2)//COLOR_BUFFER:
      this.numColorBuffers++;
  }
  if(maxColorBuffers < this.numColorBuffers){
    report("ERROR: Your OpenGL implementation supports only " + maxColorBuffers + " but " + this.numColorBuffers + " are needed");
    return;
  }

  //Create Frame Buffer Object
  Integer fbos[];
  fbos.resize(1);
  glGenFramebuffers(1, fbos);
  this.fbo = fbos[0];
  
  glBindFramebuffer(GL_FRAMEBUFFER, this.fbo);
  
  this.numColorBuffers = 0;
  Integer textureIDs[];
  textureIDs.resize(1);
  
  for(i=0; i<this.textures.size(); i++){
    if(this.textures[i].texture.bufferID!=0){
      report("Error: texture is already generated");
      break;
    }
    switch(this.textures[i].type){
      case 1://DEPTH_BUFFER:
        {
          if(this.depthBuffer != -1){
            report( "ERROR: Creating 2 or more depth buffers is not possible!");
            break;
          }
          if(this.hasDepthBufferTexture){
            report( "ERROR: A depth buffer texture has already been created, can not create another depth texture");
            break;
          }
          if(this.textures[i].texture.glInternalFormat != GL_DEPTH_COMPONENT){
            report( "ERROR: A Depth Buffer must impliment a GL_DEPTH_COMPONENT internal format.");
            break;
          }
          
          this.textures[i].texture.genTexture(this.width, this.height);
          if(this.textures[i].texture.bufferID==0){
            report("ERROR: Error generating texture");
            break;
          }
          
          glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, this.textures[i].texture.bufferID, 0);
          if(this.resolution != 1.0) {
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
          }
          
          this.depthBuffer = i;
          this.hasDepthBufferTexture = true;
        }
        break;
      case 2://COLOR_BUFFER:
        {
          this.textures[i].texture.genTexture(this.width, this.height);
          if(this.textures[i].texture.bufferID==0){
            report("ERROR: Error generating texture");
            continue;
          }
          glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0+this.numColorBuffers, GL_TEXTURE_2D, this.textures[i].texture.bufferID, 0);
          if(this.resolution != 1.0) {
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
          }
          
          this.numColorBuffers++;
        }
        break;
    }
  }

  /*
  //Depth buffer only
  if(this.numColorBuffers <= 0){
    glDrawBuffer(GL_NONE);
    glReadBuffer(GL_NONE);
  }
  */
  
  var Integer status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
  if (status != GL_FRAMEBUFFER_COMPLETE){
    switch(status){
      case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
        report( "ERROR: incomplete attachment");
        break;
      case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
        report( "ERROR: missing attachment");
        break;
      case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER:
        report( "ERROR: missing draw buffer");
        break;
      case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER:
        report( "ERROR: missing read buffer");
        break;
      case GL_FRAMEBUFFER_UNSUPPORTED:
        report( "ERROR: rendertarget not supported");
        break;
      default:
        report( "ERROR: unkown error");
        break;
    }
  }
}


function OGLRenderTarget.prebind(
  Integer currWidth,
  Integer currHeight
) {
//  report("prebind:"+currWidth + ","+currHeight );
  if(this.fbo == 0){
    this.width = currWidth * this.resolution;
    this.height = currHeight * this.resolution;
  }
  else {
    if (this.width != Size(currWidth * this.resolution) || this.height != Size(currHeight * this.resolution) ) {
      // If this FBO is a full screen FBO, then we check to see
      // if the viewport dimensions have changed, and rebuild
      // the textures if they have.
    
      Size numTextures = (this.hasDepthBufferTexture ? 1 : 0) + this.numColorBuffers;
      Integer bufferIDs[];
      bufferIDs.resize(1);
      
      // Textures need to be deleted first.;
      for(Integer i=0; i<this.textures.size(); i++){
        bufferIDs[0] = this.textures[i].texture.bufferID;
        glDeleteTextures(1, bufferIDs);
        this.textures[i].texture.bufferID = 0;
      }

      bufferIDs.resize(1);
      bufferIDs[0] = this.fbo;
      glDeleteFramebuffers(1, bufferIDs);

      this.fbo = 0;
      this.depthBuffer = -1;
      this.hasDepthBufferTexture = false;
      this.width = currWidth * this.resolution;
      this.height = currHeight * this.resolution;
    }
  }
}

function OGLRenderTarget.bindFbo(Boolean clearDepth) {
  Integer prevFbos[];
  prevFbos.resize(1);
  glGetIntegerv(GL_FRAMEBUFFER_BINDING, prevFbos);
  this.prevFbo = prevFbos[0];
  
  if(this.fbo==0){
    this.genTextures();
  }
  
  glBindFramebuffer(GL_FRAMEBUFFER, this.fbo);
  glPushAttrib(GL_VIEWPORT_BIT | GL_TEXTURE_BIT | GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);
  glViewport(0,0, this.width, this.height);
  glClearColor(this.clearColor.r, this.clearColor.g, this.clearColor.b, this.clearColor.a);
  if(this.hasDepthBufferTexture && clearDepth)
    glClear(GL_DEPTH_BUFFER_BIT);
}

function OGLRenderTarget.bindColorBuffers(io Integer drawBufferIDs[]) {
  if(drawBufferIDs.size() > 0) {
    glDrawBuffers(drawBufferIDs.size(), drawBufferIDs);
    glClear(GL_COLOR_BUFFER_BIT);
  }
  else {
    glDrawBuffer(GL_NONE);
    glReadBuffer(GL_NONE);
  }
}

function OGLRenderTarget.bindAllBuffers() {
  Integer drawBufferIDs[];
  for(Size i=0; i<this.textures.size(); i++){
    if(this.textures[i].texture.bufferID!=0 && this.textures[i].type == 2){
      drawBufferIDs.push(Integer(GL_COLOR_ATTACHMENT0 + drawBufferIDs.size()));
    }
  }
  this.bindColorBuffers(drawBufferIDs);
}

function OGLRenderTarget.bind() {
//  report("OGLRenderTarget.bind()");
  this.bindFbo(true);
  this.bindAllBuffers();
}

function OGLRenderTarget.unbind() {
//  report("OGLRenderTarget.unbind() prevFbo:" + this.prevFbo);
  
  if(this.fbo==0){
    report("Error: FBO not generated");
  }
  // restore the OpenGL state

  glPopAttrib();
  glBindFramebuffer(GL_FRAMEBUFFER, this.prevFbo);
}


function OGLRenderTarget.getAllRGBAPixels(io Color pixels[]) {
  if(this.fbo == 0) {
    pixels.resize(0);
    return;
  }
  pixels.resize(Size(this.width * this.height));

  Integer prevFbos[];
  prevFbos.resize(1);
  glGetIntegerv(GL_FRAMEBUFFER_BINDING, prevFbos);
  Integer prevFbo = prevFbos[0];
  
  if(prevFbo != this.fbo){
    glBindFramebuffer(GL_FRAMEBUFFER, this.fbo);
  }
  glReadPixels(0, 0, this.width, this.height, GL_RGBA,  GL_FLOAT,  pixels.data());
  if(prevFbo != this.fbo){
    glBindFramebuffer(GL_FRAMEBUFFER, prevFbo);
  }
}


function OGLRenderTarget.getRGBAPixels(io Vec2 pos, io Vec2 size, io Color pixels[]) {
  if(this.fbo == 0) {
    pixels.resize(0);
    return;
  }
  pixels.resize(Size(size.x * size.y));

  Integer prevFbos[];
  prevFbos.resize(1);
  glGetIntegerv(GL_FRAMEBUFFER_BINDING, prevFbos);
  Integer prevFbo = prevFbos[0];
  
  if(prevFbo != this.fbo){
    glBindFramebuffer(GL_FRAMEBUFFER, this.fbo);
  }
  glReadPixels(pos.x, pos.y, size.x, size.y, GL_RGBA, GL_FLOAT,  pixels.data());

  if(prevFbo != this.fbo){
    glBindFramebuffer(GL_FRAMEBUFFER, prevFbo);
  }
}
