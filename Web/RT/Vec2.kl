
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Math;

function Vec2(Scalar x, Scalar y) {
  this.set(x, y);
}

function Vec2.set(Scalar x, Scalar y) {
  this.x = x;
  this.y = y;
}

function Vec2.setNull() {
  this.x = this.y = 0.0;
}

function Boolean Vec2.equal (in Vec2 other) {
  return this.x == other.x && this.y == other.y;
}

function Boolean Vec2.almostEqual(in Vec2 other, in Scalar precision) {
  return
      (abs(this.x - other.x) < precision) &&
      (abs(this.y - other.y) < precision);
}

function Boolean Vec2.almostEqual(in Vec2 other) {
  return this.almostEqual(other, PRECISION);
}

function Scalar Vec2.component( Size i ) {
  if(i == 0)
    return this.x;
  else
    return this.y;
}

function Vec3.setComponent( Size i, Scalar v ) {
  if(i == 0)
    this.x = v;
  else
    this.y = v;
}

function Vec2 + (Vec2 a, Vec2 b) {
  return Vec2(a.x + b.x, a.y + b.y);
}

function Vec2. += (Vec2 other) {
  this = this + other;
}

function Vec2 - (Vec2 a, Vec2 b) {
  return Vec2(a.x - b.x, a.y - b.y);
}

function Vec2. -= (Vec2 other) {
  this = this - other;
}

function Vec2 * (Scalar a, Vec2 b) {
  return Vec2(a * b.x, a * b.y);
}

function Vec2 * (Vec2 a, Scalar b) {
  return Vec2(a.x * b, a.y * b);
}

function Vec2 * (Vec2 a, Vec2 b) {
  return Vec2(a.x * b.x, a.y * b.y);
}

function Vec2. *= (Scalar other) {
  this = this * other;
}

function Vec2. *= (Vec2 other) {
  this = this * other;
}

function Vec2 / (Vec2 a, Vec2 b) {
  if( Math_badDivisor( b.x ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( b.x, "Vec2.divide: b.x" );
  if( Math_badDivisor( b.y ) )
    Math_reportBadDivisor( b.y, "Vec2.divide: b.y" );
  return Vec2(a.x / b.x, a.y / b.y);
}

function Vec2 / (Vec2 a, Scalar b) {
  if( Math_badDivisor( b ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( b, "Vec2.divide" );
  return a * (1.0 / b);
}

function Vec2. /= (Scalar other) {
  this = this / other;
}

function Vec2. /= (Vec2 other) {
  this = this / other;
}

function Vec2 Vec2.negate() {
  return Vec2(-this.x, - this.y);
}

function Vec2 Vec2.inverse() {
  if( Math_badDivisor( this.x ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( this.x, "Vec2.inverse: this.x" );
  if( Math_badDivisor( this.y ) )
    Math_reportBadDivisor( this.y, "Vec2.inverse: this.y" );
  return Vec2(1.0/this.x, 1.0/this.y);
}

function Scalar Vec2.dot(Vec2 other) {
  return this.x * other.x + this.y * other.y;
}

function Scalar Vec2.cross(in Vec2 other) {
  return this.x * other.y - this.y * other.x;
}

function Scalar Vec2.lengthSquared() {
  return this.dot(this);
}

function Scalar Vec2.length() {
  return sqrt(this.lengthSquared());
}

function Vec2 Vec2.unit() {
  Scalar n = this.length();
  if( Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Vec2.unit" );
  return this / n;
}

//TODO: uncomment when some 'mutable' keyword is implemented //Note: setUnit returns the previous length
function /*Scalar*/ Vec2.setUnit() {
  Scalar n = this.length();
  if( Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Vec2.setUnit" );
  this /= n;
  //return n;
}

function Vec2 Vec2.clamp(in Vec2 min, in Vec2 max) {
  return Vec2(
    (this.x < min.x ? min.x : (this.x > max.x ? max.x : this.x)),
    (this.y < min.y ? min.y : (this.y > max.y ? max.y : this.y))
  );
}

//Note: expects both vectors to be units (else use angleTo)
function Scalar Vec2.unitsAngleTo(in Vec2 other) {
  Scalar acosAngle = Math_clamp(this.dot(other), -1.0, 1.0);
  return acos(acosAngle);
}

function Scalar Vec2.angleTo(in Vec2 other) {
  return this.unit().unitsAngleTo(other.unit());
}

function Scalar Vec2.distanceTo(in Vec2 other) {
  return (this - other).length();
}

function Vec2 Vec2.linearInterpolate(in Vec2 other, in Scalar t) {
  return this + ((other - this) * t);
}
