//IMPORTANT - READ THIS FIRST:
//
//  This code runs in both KL and JS. To declare any local variable, add new entries
//  to runTests's input arg 'localVariables'.
//
//  Don't use any operators like '*', '-' etc. Instead, use the JS naming, and make 
//  sure the KL equivalent version have been generated by calling 'appendKLOpAdaptors'.
//
//  To test KL unary operator such as '+=', use 'addInPlace' nomenclature instead, and 
//  make sure that KL adaptors have been generated by calling 'appendKLOpAdaptors' and 
//  JS adaptors have been  generated by calling 'defineInPlaceOpAdaptors'.

m1.appendResult(tests, results, 'set');

res.setNull();
res.appendResult(tests, results, 'setNull');

res.setIdentity();
res.appendResult(tests, results, 'setIdentity');

res.setDiagonal(5.0);
res.appendResult(tests, results, 'setDiagonal');

res.setDiagonal(xAxis);
res.appendResult(tests, results, 'setDiagonalVec');

res = m1.multiplyScalar(1.000005);
res.appendBooleanResult(tests, results, 'equal', m1.equal(m1));
res.appendBooleanResult(tests, results, 'equal2', m1.equal(res));
res.appendBooleanResult(tests, results, 'equal3', m1.almostEqual(res, 1e-4));

res = m1.add(XtoY);
res.appendResult(tests, results, 'add');

res.addInPlace(XtoY);
res.appendResult(tests, results, 'addInPlace');

res = m1.subtract(XtoY);
res.appendResult(tests, results, 'subtract');

res.subtractInPlace(XtoY);
res.appendResult(tests, results, 'subtractInPlace');

res = YtoMinusY.multiply(XtoY);
res.appendResult(tests, results, 'multiply');

v1 = res.multiplyVector(xAxis);
v1.appendResult(tests, results, 'multiplyVector');

res.multiplyInPlace(m1);
res.appendResult(tests, results, 'multiplyInPlace');

v1 = res.multiplyVector(xAxis);
v1.appendResult(tests, results, 'multiplyVector2');

res = m1.multiplyScalar(2.0);
res.appendResult(tests, results, 'multiplyScalar');

res.set(m1);
res.multiplyScalarInPlace(3.0);
res.appendResult(tests, results, 'multiplyScalarInPlace');

res = m1.divideScalar(2.0);
res.appendResult(tests, results, 'divideScalar');

res.set(m1);
res.divideScalarInPlace(3.0);
res.appendResult(tests, results, 'divideScalarInPlace');

res = m1.add(XtoY);
s1 = res.determinant();
res.appendScalarResult(tests, results, 'determinant', s1);

res = res.adjoint();
res.appendResult(tests, results, 'adjoint');

res.setNull();
res.inverse();//log warnings

res = m1.add(XtoY).multiply(YtoMinusY);
res = res.multiply(res.inverse());
res.appendResult(tests, results, 'multByInverse');

res = m1.transpose();
res.appendResult(tests, results, 'transpose');
