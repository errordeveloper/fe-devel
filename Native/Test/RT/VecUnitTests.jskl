//IMPORTANT - READ THIS FIRST:
//
//  This code runs in both KL and JS. To declare any local variable, add new entries
//  to runTests's input arg 'localVariables'.
//
//  Don't use any operators like '*', '-' etc. Instead, use the JS naming, and make 
//  sure the KL equivalent version have been generated by calling 'appendKLOpAdaptors'.
//
//  To test KL unary operator such as '+=', use 'addInPlace' nomenclature instead, and 
//  make sure that KL adaptors have been generated by calling 'appendKLOpAdaptors' and 
//  JS adaptors have been  generated by calling 'defineInPlaceOpAdaptors'.

v1.appendResult(tests, results, 'set');

res.set(v1);
res.setNull();
res.appendResult(tests, results, 'setNull');

res = v1.multiplyScalar(1.000005);
v1.appendBooleanResult(tests, results, 'equal', v1.equal(v1));
v1.appendBooleanResult(tests, results, 'equal2', v1.equal(res));
v1.appendBooleanResult(tests, results, 'equal3', v1.almostEqual(res, 1e-4));

res = v1.add(v2);
res.appendResult(tests, results, 'add');

res.addInPlace(v2);
res.appendResult(tests, results, 'addInPlace');

res = v1.subtract(v2);
res.appendResult(tests, results, 'subtract');

res.subtractInPlace(v2);
res.appendResult(tests, results, 'subtractInPlace');

res = v1.multiply(v2);
res.appendResult(tests, results, 'multiply');

res.multiplyInPlace(v2);
res.appendResult(tests, results, 'multiplyInPlace');

res = v1.multiplyScalar(2.0);
res.appendResult(tests, results, 'multiplyScalar');

res.set(v1);
res.multiplyScalarInPlace(3.0);
res.appendResult(tests, results, 'multiplyScalarInPlace');

res = v1.divide(v2);
res.appendResult(tests, results, 'divide');

res.divideInPlace(v2);
res.appendResult(tests, results, 'divideInPlace');

res = v1.divideScalar(2.0);
res.appendResult(tests, results, 'divideScalar');

res.set(v1);
res.divideScalarInPlace(3.0);
res.appendResult(tests, results, 'dividecalarInPlace');

res = v1.negate();
res.appendResult(tests, results, 'negate');

res = v1.inverse();
res.appendResult(tests, results, 'inverse');

res.setNull();
res.inverse();//log 'bad divisor'

s1 = v1.dot(v2);
v1.appendScalarResult(tests, results, 'dot', s1);

s1 = v1.lengthSquared();
v1.appendScalarResult(tests, results, 'lengthSquared', s1);

s1 = v1.length();
v1.appendScalarResult(tests, results, 'length', s1);

res = v1.unit();
res.appendResult(tests, results, 'unit');

res.set(v2);
res.setUnit(); //todo: check return result when KL compile issue is fixed
res.appendResult(tests, results, 'setUnit');

res = v1.multiplyScalar(2.0);
res = res.clamp(v1.negate(),v1);
res.appendResult(tests, results, 'clampDown');

res = v1.multiplyScalar(-2.0);
res = res.clamp(v1.negate(),v1);
res.appendResult(tests, results, 'clampUp');

s1 = v1.angleTo( v2 );
v1.appendScalarResult(tests, results, 'angleTo', s1);

s1 = v1.distanceTo( v2 );
v1.appendScalarResult(tests, results, 'distanceTo', s1);

res = v1.linearInterpolate( v2, 0.25 );
res.appendResult(tests, results, 'linearInterpolate');
