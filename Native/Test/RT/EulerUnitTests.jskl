//IMPORTANT - READ THIS FIRST:
//
//  This code runs in both KL and JS. To declare any local variable, add new entries
//  to runTests's input arg 'localVariables'.
//
//  Don't use any operators like '*', '-' etc. Instead, use the JS naming, and make 
//  sure the KL equivalent version have been generated by calling 'appendKLOpAdaptors'.
//
//  To test KL unary operator such as '+=', use 'addInPlace' nomenclature instead, and 
//  make sure that KL adaptors have been generated by calling 'appendKLOpAdaptors' and 
//  JS adaptors have been  generated by calling 'defineInPlaceOpAdaptors'.

ro1.setYZX();
e1.set(0.5,0.6,0.7,ro1);
e1.appendResult(tests, results, 'set');

e1.appendBooleanResult(tests, results, 'isYZX', ro1.isYZX());
e1.appendBooleanResult(tests, results, 'isXYZ', ro1.isXYZ());

v1.set(0.5,1.0,1.5);
ro1.setZYX();
e1.set(v1,ro1);
e1.appendResult(tests, results, 'set vec+ro');

e1.getAngles().appendResult(tests, results, 'getAngles');

e2.set(e1);
e1.appendBooleanResult(tests, results, 'equal', e1.equal(e2));

ro1.setXYZ();
e2.ro = ro1;
e1.appendBooleanResult(tests, results, 'equal2', e1.equal(e2));

e2.set(e1);
e2.x = 0.50001;
e1.appendBooleanResult(tests, results, 'equal3', e1.equal(e2));
e1.appendBooleanResult(tests, results, 'almostEqual', e1.almostEqual(e2,1e-4));

ro1.setYZX();
e1.set(0.0, 1.570796326794896, 1.570796326794896, ro1);
m1 = e1.toMat33();
m1.appendResult(tests, results, 'toMat33');

//Note: we have a right hand, counter clockwise, row major system.
v1.set(1.0, 0.0, 0.0);
m1.multiplyVector(v1).appendResult(tests, results, 'matMultVector');
