//IMPORTANT - READ THIS FIRST:
//
//  This code runs in both KL and JS. To declare any local variable, add new entries
//  to runTests's input arg 'localVariables'.
//
//  Don't use any operators like '*', '-' etc. Instead, use the JS naming, and make 
//  sure the KL equivalent version have been generated by calling 'appendKLOpAdaptors'.
//
//  To test KL unary operator such as '+=', use 'addInPlace' nomenclature instead, and 
//  make sure that KL adaptors have been generated by calling 'appendKLOpAdaptors' and 
//  JS adaptors have been  generated by calling 'defineInPlaceOpAdaptors'.

v1.set(1.0,2.0,3.0,4.0);
v1.appendResult(tests, results, 'set');

v1.setNull();
v1.appendResult(tests, results, 'setNull');

v1.set(1.0,1.0,1.0,1.000005);
v2.set(1.0,1.0,1.0,1.0);
v1.appendBooleanResult(tests, results, 'equal', v1.equal(v1));
v1.appendBooleanResult(tests, results, 'equal2', v1.equal(v2));
v1.appendBooleanResult(tests, results, 'equal3', v1.almostEqual(v2, 1e-5));

v1.set(1.0,2.0,3.0,4.0);
v2.set(2.0,2.0,1.0,1.0);

v3 = v1.add(v2);
v3.appendResult(tests, results, 'add');

v3.addInPlace(v2);
v3.appendResult(tests, results, 'addInPlace');

v3 = v1.subtract(v2);
v3.appendResult(tests, results, 'subtract');

v3.subtractInPlace(v2);
v3.appendResult(tests, results, 'subtractInPlace');

v3 = v1.multiply(v2);
v3.appendResult(tests, results, 'multiply');

v3.multiplyInPlace(v2);
v3.appendResult(tests, results, 'multiplyInPlace');
