/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

operator map2(
  Integer input,
  io Scalar output
  )
{
  output += input;
}

operator map3(
  Integer input,
  io Scalar output,
  Size index
  )
{
  output += input;
}

operator map4(
  Integer input,
  io Scalar output,
  Size index,
  Size count
  )
{
  report("map4: count=" + count);
  output += input;
}

operator map5(
  Integer input,
  io Scalar output,
  Size index,
  Size count,
  String shared
  )
{
  report("map5: count=" + count + " shared=" + shared);
  output += input;
}

operator entry() {
  Integer va[];
  for (Integer i=0; i<10; ++i)
    va.push(i);

  ArrayProducer<Integer> cap = createConstArray(va);
  report("cap.getCount() = " + cap.getCount());

  ValueProducer<Scalar> am2 = createReduce(cap, map2);
  report(am2);
  report(am2.produce());

  ValueProducer<Scalar> am3 = createReduce(cap, map3);
  report(am3);
  report(am3.produce());

  ValueProducer<Scalar> am4 = createReduce(cap, map4);
  report(am4);
  report(am4.produce());

  ValueProducer<Scalar> am5 = createReduce(cap, map5, createConstValue("hello"));
  report(am5);
  report(am5.produce());
}
