/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

operator map2(
  Integer input,
  io Scalar output
  )
{
  report("map2: input=" + input);
  output = 1.0 / (Scalar(input + 1) * Scalar(input + 1));
}

operator map3(
  Integer input,
  io Scalar output,
  Index index
  )
{
  report("map3: input=" + input + " index=" + index);
  output = 1.0 / (Scalar(input + 1) * Scalar(input + 1));
}

operator map4(
  Integer input,
  io Scalar output,
  Index index,
  Size count
  )
{
  report("map4: input=" + input + " index=" + index + " count=" + count);
  output = 1.0 / (Scalar(input + 1) * Scalar(input + 1));
}

operator map5(
  Integer input,
  io Scalar output,
  Index index,
  Size count,
  String shared
  )
{
  report("map5: input=" + input + " index=" + index + " count=" + count + " shared=" + shared);
  output = 1.0 / (Scalar(input + 1) * Scalar(input + 1));
}

operator entry() {
  Integer va[];
  for (Integer i=0; i<10; ++i)
    va.push(i);

  ArrayProducer<Integer> cap = createConstArray(va);
  report("cap.getCount() = " + cap.getCount());

  ArrayProducer<Scalar> am2 = createArrayMap(cap, map2);
  report(am2);
  report(am2.getCount());
  for (Index i=0; i<10; ++i)
    report(am2.produce(i));

  ArrayProducer<Scalar> am3 = createArrayMap(cap, map3);
  report(am3);
  report(am3.getCount());
  for (Index i=0; i<10; ++i)
    report(am3.produce(i));

  ArrayProducer<Scalar> am4 = createArrayMap(cap, map4);
  report(am4);
  report(am4.getCount());
  for (Index i=0; i<10; ++i)
    report(am4.produce(i));

  ArrayProducer<Scalar> am5 = createArrayMap(cap, map5, createConstValue("hello"));
  report(am5);
  report(am5.getCount());
  for (Index i=0; i<10; ++i)
    report(am5.produce(i));
}
