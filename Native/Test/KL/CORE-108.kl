/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

struct Vec3
{
  Scalar x;
  Scalar y;
  Scalar z;
};

function Vec3 ( Scalar x, Scalar y, Scalar z )
{
  this.x = x;
  this.y = y;
  this.z = z;
}

function Vec3.set( Scalar x, Scalar y, Scalar z )
{
  this.x = x;
  this.y = y;
  this.z = z;
}

function Vec3.setNull( )
{
  this.x = this.y = this.z = 0.0;
}

function Vec3 Vec3.max( in Vec3 other )
{
  var Vec3  v;
  v.x = this.x > other.x ? this.x : other.x;
  v.y = this.y > other.y ? this.y : other.y;
  v.z = this.z > other.z ? this.z : other.z;
  return v;
}

function Vec3 Vec3.min( in Vec3 other )
{
  var Vec3  v;
  v.x = this.x < other.x ? this.x : other.x;
  v.y = this.y < other.y ? this.y : other.y;
  v.z = this.z < other.z ? this.z : other.z;
  return v;
}


function Vec3 +( Vec3 a, Vec3 b )
{
  return Vec3( a.x + b.x, a.y + b.y, a.z + b.z );
}

function Vec3 -( Vec3 a, Vec3 b )
{
  return Vec3( a.x - b.x, a.y - b.y, a.z - b.z );
}

function Vec3 *( Scalar a, Vec3 b )
{
  return Vec3( a * b.x, a * b.y, a * b.z );
}

function Vec3 *( Vec3 a, Scalar b )
{
  return Vec3( a.x * b, a.y * b, a.z * b );
}

function Vec3 *( Vec3 a, Vec3 b )
{
  return Vec3( a.x * b.x, a.y * b.y, a.z * b.z );
}

function Vec3 /( Vec3 a, Scalar b )
{
  return Vec3( a.x / b, a.y / b, a.z / b );
}

function Vec3 Vec3.neg( )
{
  return Vec3( -this.x, -this.y, -this.z );
}

function Scalar Vec3.dot( Vec3 other )
{
  return this.x*other.x + this.y*other.y + this.z*other.z;
}

function Scalar Vec3.normSq( )
{
  return this.dot( this );
}

function Scalar Vec3.norm( )
{
  return sqrt( this.normSq() );
}

function Vec3 Vec3.unit( )
{
  return this / this.norm();
}

function Vec3.setUnit( )
{
  this = this.unit();
}

function Vec3 Vec3.cross( in Vec3 other )
{
  return Vec3(
    this.y * other.z - this.z * other.y,
    this.z * other.x - this.x * other.z,
    this.x * other.y - this.y * other.x
    );
}


struct Patch
{
  Integer idx[4][4];
};


function Patch( 
  in Integer a00, in Integer a01, in Integer a02, in Integer a03, 
  in Integer a10, in Integer a11, in Integer a12, in Integer a13, 
  in Integer a20, in Integer a21, in Integer a22, in Integer a23, 
  in Integer a30, in Integer a31, in Integer a32, in Integer a33
  )
{
  this.idx[0][0] = a00; this.idx[0][1] = a01; this.idx[0][2] = a02; this.idx[0][3] = a03; 
  this.idx[1][0] = a10; this.idx[1][1] = a11; this.idx[1][2] = a12; this.idx[1][3] = a13; 
  this.idx[2][0] = a20; this.idx[2][1] = a21; this.idx[2][2] = a22; this.idx[2][3] = a23; 
  this.idx[3][0] = a30; this.idx[3][1] = a31; this.idx[3][2] = a32; this.idx[3][3] = a33; 
}

struct Quad
{
  Integer idx[2][2];
  Vec3          normal;
};

function Quad( in Vec3 v[], in Integer i00, in Integer i01, in Integer i10, in Integer i11 )
{
  this.idx[0][0] = i00;
  this.idx[0][1] = i01;
  this.idx[1][0] = i10;
  this.idx[1][1] = i11;
  
  // Compute the face normal from the diagonals
  var Vec3   d0, d1;
  
  d0 = v[i11]-v[i00];
  d1 = v[i10]-v[i01];
  
  this.normal = d0.cross( d1 ).unit();
}

struct Adjacency
{
  Integer qidx[];
};


function computeNormals
(
  io Patch p[],
  io Vec3 v[],
  io Vec3 n[]
  )
{
  var Quad  q[];
  
  // Break patches into quads
  for( var Size i = 0; i < p.size(); i++ )
    for( var Size j = 0; j < 3; j++ )
      for( var Size k = 0; k < 3; k++ )
        q.push( Quad( v, p[i].idx[j][k], p[i].idx[j][k+1], p[i].idx[j+1][k], p[i].idx[j+1][k+1] ) );
  
  var Adjacency a[];
  a.resize( v.size() );
  
  // Build adjacency information
  for( var Size i = 0; i < q.size(); i++ )
    for( var Size j = 0; j < 2; j++ )
      for( var Size k = 0; k < 2; k++ )
        a[ q[i].idx[j][k] ].qidx.push( Integer( i ) );
  
  // Compute vertex normals from surrounding face normals
  n.resize( v.size() );
  for( var Size i = 0; i < a.size(); i++ )
  {
    var Vec3   avgn( 0.0, 0.0, 0.0 );
    
    for( var Size j = 0; j < a[i].qidx.size(); j++ )
      avgn = avgn + q[a[i].qidx[j]].normal;
    
    if( avgn.norm() > 0.0 )
      avgn.setUnit();
    
    n[i] = avgn;
  }
}

function getTeapotHull
(
  io Patch p[],
  io Vec3 v[],
  io Vec3 n[]
  )
{
  p.resize( 32 );
  p[0]=Patch( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 );
  p[1]=Patch( 3, 16, 17, 18, 7, 19, 20, 21, 11, 22, 23, 24, 15, 25, 26, 27 );
  p[2]=Patch( 18, 28, 29, 30, 21, 31, 32, 33, 24, 34, 35, 36, 27, 37, 38, 39 );
  p[3]=Patch( 30, 40, 41, 0, 33, 42, 43, 4, 36, 44, 45, 8, 39, 46, 47, 12 );
  p[4]=Patch( 12, 13, 14, 15, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 );
  p[5]=Patch( 15, 25, 26, 27, 51, 60, 61, 62, 55, 63, 64, 65, 59, 66, 67, 68 );
  p[6]=Patch( 27, 37, 38, 39, 62, 69, 70, 71, 65, 72, 73, 74, 68, 75, 76, 77 );
  p[7]=Patch( 39, 46, 47, 12, 71, 78, 79, 48, 74, 80, 81, 52, 77, 82, 83, 56 );
  p[8]=Patch( 56, 57, 58, 59, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95 );
  p[9]=Patch( 59, 66, 67, 68, 87, 96, 97, 98, 91, 99, 100, 101, 95, 102, 103, 104 );
  p[10]=Patch( 68, 75, 76, 77, 98, 105, 106, 107, 101, 108, 109, 110, 104, 111, 112, 113 );
  p[11]=Patch( 77, 82, 83, 56, 107, 114, 115, 84, 110, 116, 117, 88, 113, 118, 119, 92 );
  p[12]=Patch( 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135 );
  p[13]=Patch( 123, 136, 137, 120, 127, 138, 139, 124, 131, 140, 141, 128, 135, 142, 143, 132 );
  p[14]=Patch( 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 68, 152, 153, 154 );
  p[15]=Patch( 135, 142, 143, 132, 147, 155, 156, 144, 151, 157, 158, 148, 154, 159, 160, 68 );
  p[16]=Patch( 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176 );
  p[17]=Patch( 164, 177, 178, 161, 168, 179, 180, 165, 172, 181, 182, 169, 176, 183, 184, 173 );
  p[18]=Patch( 173, 174, 175, 176, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196 );
  p[19]=Patch( 176, 183, 184, 173, 188, 197, 198, 185, 192, 199, 200, 189, 196, 201, 202, 193 );
  p[20]=Patch( 203, 203, 203, 203, 206, 207, 208, 209, 210, 210, 210, 210, 211, 212, 213, 214 );
  p[21]=Patch( 203, 203, 203, 203, 209, 216, 217, 218, 210, 210, 210, 210, 214, 219, 220, 221 );
  p[22]=Patch( 203, 203, 203, 203, 218, 223, 224, 225, 210, 210, 210, 210, 221, 226, 227, 228 );
  p[23]=Patch( 203, 203, 203, 203, 225, 229, 230, 206, 210, 210, 210, 210, 228, 231, 232, 211 );
  p[24]=Patch( 211, 212, 213, 214, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244 );
  p[25]=Patch( 214, 219, 220, 221, 236, 245, 246, 247, 240, 248, 249, 250, 244, 251, 252, 253 );
  p[26]=Patch( 221, 226, 227, 228, 247, 254, 255, 256, 250, 257, 258, 259, 253, 260, 261, 262 );
  p[27]=Patch( 228, 231, 232, 211, 256, 263, 264, 233, 259, 265, 266, 237, 262, 267, 268, 241 );
  p[28]=Patch( 269, 269, 269, 269, 278, 279, 280, 281, 274, 275, 276, 277, 270, 271, 272, 273 );
  p[29]=Patch( 269, 269, 269, 269, 281, 288, 289, 290, 277, 285, 286, 287, 273, 282, 283, 284 );
  p[30]=Patch( 269, 269, 269, 269, 290, 297, 298, 299, 287, 294, 295, 296, 284, 291, 292, 293 );
  p[31]=Patch( 269, 269, 269, 269, 299, 304, 305, 278, 296, 302, 303, 274, 293, 300, 301, 270 );

  v.resize( 306 );
  v[0].x=1.4; v[0].y=2.4; v[0].z=-0;   v[1].x=1.4; v[1].y=2.4; v[1].z=0.784;   v[2].x=0.784; v[2].y=2.4; v[2].z=1.4;   v[3].x=0; v[3].y=2.4; v[3].z=1.4;   v[4].x=1.3375; v[4].y=2.53125; v[4].z=-0;   v[5].x=1.3375; v[5].y=2.53125; v[5].z=0.749;   v[6].x=0.749; v[6].y=2.53125; v[6].z=1.3375;   v[7].x=0; v[7].y=2.53125; v[7].z=1.3375;   v[8].x=1.4375; v[8].y=2.53125; v[8].z=-0;   v[9].x=1.4375; v[9].y=2.53125; v[9].z=0.805;
  v[10].x=0.805; v[10].y=2.53125; v[10].z=1.4375;   v[11].x=0; v[11].y=2.53125; v[11].z=1.4375;   v[12].x=1.5; v[12].y=2.4; v[12].z=-0;   v[13].x=1.5; v[13].y=2.4; v[13].z=0.84;   v[14].x=0.84; v[14].y=2.4; v[14].z=1.5;   v[15].x=0; v[15].y=2.4; v[15].z=1.5;   v[16].x=-0.784; v[16].y=2.4; v[16].z=1.4;   v[17].x=-1.4; v[17].y=2.4; v[17].z=0.784;   v[18].x=-1.4; v[18].y=2.4; v[18].z=-0;   v[19].x=-0.749; v[19].y=2.53125; v[19].z=1.3375;
  v[20].x=-1.3375; v[20].y=2.53125; v[20].z=0.749;   v[21].x=-1.3375; v[21].y=2.53125; v[21].z=-0;   v[22].x=-0.805; v[22].y=2.53125; v[22].z=1.4375;   v[23].x=-1.4375; v[23].y=2.53125; v[23].z=0.805;   v[24].x=-1.4375; v[24].y=2.53125; v[24].z=-0;   v[25].x=-0.84; v[25].y=2.4; v[25].z=1.5;   v[26].x=-1.5; v[26].y=2.4; v[26].z=0.84;   v[27].x=-1.5; v[27].y=2.4; v[27].z=-0;   v[28].x=-1.4; v[28].y=2.4; v[28].z=-0.784;   v[29].x=-0.784; v[29].y=2.4; v[29].z=-1.4;
  v[30].x=0; v[30].y=2.4; v[30].z=-1.4;   v[31].x=-1.3375; v[31].y=2.53125; v[31].z=-0.749;   v[32].x=-0.749; v[32].y=2.53125; v[32].z=-1.3375;   v[33].x=0; v[33].y=2.53125; v[33].z=-1.3375;   v[34].x=-1.4375; v[34].y=2.53125; v[34].z=-0.805;   v[35].x=-0.805; v[35].y=2.53125; v[35].z=-1.4375;   v[36].x=0; v[36].y=2.53125; v[36].z=-1.4375;   v[37].x=-1.5; v[37].y=2.4; v[37].z=-0.84;   v[38].x=-0.84; v[38].y=2.4; v[38].z=-1.5;   v[39].x=0; v[39].y=2.4; v[39].z=-1.5;
  v[40].x=0.784; v[40].y=2.4; v[40].z=-1.4;   v[41].x=1.4; v[41].y=2.4; v[41].z=-0.784;   v[42].x=0.749; v[42].y=2.53125; v[42].z=-1.3375;   v[43].x=1.3375; v[43].y=2.53125; v[43].z=-0.749;   v[44].x=0.805; v[44].y=2.53125; v[44].z=-1.4375;   v[45].x=1.4375; v[45].y=2.53125; v[45].z=-0.805;   v[46].x=0.84; v[46].y=2.4; v[46].z=-1.5;   v[47].x=1.5; v[47].y=2.4; v[47].z=-0.84;   v[48].x=1.75; v[48].y=1.875; v[48].z=-0;   v[49].x=1.75; v[49].y=1.875; v[49].z=0.98;
  v[50].x=0.98; v[50].y=1.875; v[50].z=1.75;   v[51].x=0; v[51].y=1.875; v[51].z=1.75;   v[52].x=2; v[52].y=1.35; v[52].z=-0;   v[53].x=2; v[53].y=1.35; v[53].z=1.12;   v[54].x=1.12; v[54].y=1.35; v[54].z=2;   v[55].x=0; v[55].y=1.35; v[55].z=2;   v[56].x=2; v[56].y=0.9; v[56].z=-0;   v[57].x=2; v[57].y=0.9; v[57].z=1.12;   v[58].x=1.12; v[58].y=0.9; v[58].z=2;   v[59].x=0; v[59].y=0.9; v[59].z=2;
  v[60].x=-0.98; v[60].y=1.875; v[60].z=1.75;   v[61].x=-1.75; v[61].y=1.875; v[61].z=0.98;   v[62].x=-1.75; v[62].y=1.875; v[62].z=-0;   v[63].x=-1.12; v[63].y=1.35; v[63].z=2;   v[64].x=-2; v[64].y=1.35; v[64].z=1.12;   v[65].x=-2; v[65].y=1.35; v[65].z=-0;   v[66].x=-1.12; v[66].y=0.9; v[66].z=2;   v[67].x=-2; v[67].y=0.9; v[67].z=1.12;   v[68].x=-2; v[68].y=0.9; v[68].z=-0;   v[69].x=-1.75; v[69].y=1.875; v[69].z=-0.98;
  v[70].x=-0.98; v[70].y=1.875; v[70].z=-1.75;   v[71].x=0; v[71].y=1.875; v[71].z=-1.75;   v[72].x=-2; v[72].y=1.35; v[72].z=-1.12;   v[73].x=-1.12; v[73].y=1.35; v[73].z=-2;   v[74].x=0; v[74].y=1.35; v[74].z=-2;   v[75].x=-2; v[75].y=0.9; v[75].z=-1.12;   v[76].x=-1.12; v[76].y=0.9; v[76].z=-2;   v[77].x=0; v[77].y=0.9; v[77].z=-2;   v[78].x=0.98; v[78].y=1.875; v[78].z=-1.75;   v[79].x=1.75; v[79].y=1.875; v[79].z=-0.98;
  v[80].x=1.12; v[80].y=1.35; v[80].z=-2;   v[81].x=2; v[81].y=1.35; v[81].z=-1.12;   v[82].x=1.12; v[82].y=0.9; v[82].z=-2;   v[83].x=2; v[83].y=0.9; v[83].z=-1.12;   v[84].x=2; v[84].y=0.45; v[84].z=-0;   v[85].x=2; v[85].y=0.45; v[85].z=1.12;   v[86].x=1.12; v[86].y=0.45; v[86].z=2;   v[87].x=0; v[87].y=0.45; v[87].z=2;   v[88].x=1.5; v[88].y=0.225; v[88].z=-0;   v[89].x=1.5; v[89].y=0.225; v[89].z=0.84;
  v[90].x=0.84; v[90].y=0.225; v[90].z=1.5;   v[91].x=0; v[91].y=0.225; v[91].z=1.5;   v[92].x=1.5; v[92].y=0.15; v[92].z=-0;   v[93].x=1.5; v[93].y=0.15; v[93].z=0.84;   v[94].x=0.84; v[94].y=0.15; v[94].z=1.5;   v[95].x=0; v[95].y=0.15; v[95].z=1.5;   v[96].x=-1.12; v[96].y=0.45; v[96].z=2;   v[97].x=-2; v[97].y=0.45; v[97].z=1.12;   v[98].x=-2; v[98].y=0.45; v[98].z=-0;   v[99].x=-0.84; v[99].y=0.225; v[99].z=1.5;
  v[100].x=-1.5; v[100].y=0.225; v[100].z=0.84;   v[101].x=-1.5; v[101].y=0.225; v[101].z=-0;   v[102].x=-0.84; v[102].y=0.15; v[102].z=1.5;   v[103].x=-1.5; v[103].y=0.15; v[103].z=0.84;   v[104].x=-1.5; v[104].y=0.15; v[104].z=-0;   v[105].x=-2; v[105].y=0.45; v[105].z=-1.12;   v[106].x=-1.12; v[106].y=0.45; v[106].z=-2;   v[107].x=0; v[107].y=0.45; v[107].z=-2;   v[108].x=-1.5; v[108].y=0.225; v[108].z=-0.84;   v[109].x=-0.84; v[109].y=0.225; v[109].z=-1.5;
  v[110].x=0; v[110].y=0.225; v[110].z=-1.5;   v[111].x=-1.5; v[111].y=0.15; v[111].z=-0.84;   v[112].x=-0.84; v[112].y=0.15; v[112].z=-1.5;   v[113].x=0; v[113].y=0.15; v[113].z=-1.5;   v[114].x=1.12; v[114].y=0.45; v[114].z=-2;   v[115].x=2; v[115].y=0.45; v[115].z=-1.12;   v[116].x=0.84; v[116].y=0.225; v[116].z=-1.5;   v[117].x=1.5; v[117].y=0.225; v[117].z=-0.84;   v[118].x=0.84; v[118].y=0.15; v[118].z=-1.5;   v[119].x=1.5; v[119].y=0.15; v[119].z=-0.84;
  v[120].x=-1.6; v[120].y=2.025; v[120].z=-0;   v[121].x=-1.6; v[121].y=2.025; v[121].z=0.3;   v[122].x=-1.5; v[122].y=2.25; v[122].z=0.3;   v[123].x=-1.5; v[123].y=2.25; v[123].z=-0;   v[124].x=-2.3; v[124].y=2.025; v[124].z=-0;   v[125].x=-2.3; v[125].y=2.025; v[125].z=0.3;   v[126].x=-2.5; v[126].y=2.25; v[126].z=0.3;   v[127].x=-2.5; v[127].y=2.25; v[127].z=-0;   v[128].x=-2.7; v[128].y=2.025; v[128].z=-0;   v[129].x=-2.7; v[129].y=2.025; v[129].z=0.3;
  v[130].x=-3; v[130].y=2.25; v[130].z=0.3;   v[131].x=-3; v[131].y=2.25; v[131].z=-0;   v[132].x=-2.7; v[132].y=1.8; v[132].z=-0;   v[133].x=-2.7; v[133].y=1.8; v[133].z=0.3;   v[134].x=-3; v[134].y=1.8; v[134].z=0.3;   v[135].x=-3; v[135].y=1.8; v[135].z=-0;   v[136].x=-1.5; v[136].y=2.25; v[136].z=-0.3;   v[137].x=-1.6; v[137].y=2.025; v[137].z=-0.3;   v[138].x=-2.5; v[138].y=2.25; v[138].z=-0.3;   v[139].x=-2.3; v[139].y=2.025; v[139].z=-0.3;
  v[140].x=-3; v[140].y=2.25; v[140].z=-0.3;   v[141].x=-2.7; v[141].y=2.025; v[141].z=-0.3;   v[142].x=-3; v[142].y=1.8; v[142].z=-0.3;   v[143].x=-2.7; v[143].y=1.8; v[143].z=-0.3;   v[144].x=-2.7; v[144].y=1.575; v[144].z=-0;   v[145].x=-2.7; v[145].y=1.575; v[145].z=0.3;   v[146].x=-3; v[146].y=1.35; v[146].z=0.3;   v[147].x=-3; v[147].y=1.35; v[147].z=-0;   v[148].x=-2.5; v[148].y=1.125; v[148].z=-0;   v[149].x=-2.5; v[149].y=1.125; v[149].z=0.3;
  v[150].x=-2.65; v[150].y=0.9375; v[150].z=0.3;   v[151].x=-2.65; v[151].y=0.9375; v[151].z=-0;   v[152].x=-2; v[152].y=0.9; v[152].z=0.3;   v[153].x=-1.9; v[153].y=0.6; v[153].z=0.3;   v[154].x=-1.9; v[154].y=0.6; v[154].z=-0;   v[155].x=-3; v[155].y=1.35; v[155].z=-0.3;   v[156].x=-2.7; v[156].y=1.575; v[156].z=-0.3;   v[157].x=-2.65; v[157].y=0.9375; v[157].z=-0.3;   v[158].x=-2.5; v[158].y=1.125; v[158].z=-0.3;   v[159].x=-1.9; v[159].y=0.6; v[159].z=-0.3;
  v[160].x=-2; v[160].y=0.9; v[160].z=-0.3;   v[161].x=1.7; v[161].y=1.425; v[161].z=-0;   v[162].x=1.7; v[162].y=1.425; v[162].z=0.66;   v[163].x=1.7; v[163].y=0.6; v[163].z=0.66;   v[164].x=1.7; v[164].y=0.6; v[164].z=-0;   v[165].x=2.6; v[165].y=1.425; v[165].z=-0;   v[166].x=2.6; v[166].y=1.425; v[166].z=0.66;   v[167].x=3.1; v[167].y=0.825; v[167].z=0.66;   v[168].x=3.1; v[168].y=0.825; v[168].z=-0;   v[169].x=2.3; v[169].y=2.1; v[169].z=-0;
  v[170].x=2.3; v[170].y=2.1; v[170].z=0.25;   v[171].x=2.4; v[171].y=2.025; v[171].z=0.25;   v[172].x=2.4; v[172].y=2.025; v[172].z=-0;   v[173].x=2.7; v[173].y=2.4; v[173].z=-0;   v[174].x=2.7; v[174].y=2.4; v[174].z=0.25;   v[175].x=3.3; v[175].y=2.4; v[175].z=0.25;   v[176].x=3.3; v[176].y=2.4; v[176].z=-0;   v[177].x=1.7; v[177].y=0.6; v[177].z=-0.66;   v[178].x=1.7; v[178].y=1.425; v[178].z=-0.66;   v[179].x=3.1; v[179].y=0.825; v[179].z=-0.66;
  v[180].x=2.6; v[180].y=1.425; v[180].z=-0.66;   v[181].x=2.4; v[181].y=2.025; v[181].z=-0.25;   v[182].x=2.3; v[182].y=2.1; v[182].z=-0.25;   v[183].x=3.3; v[183].y=2.4; v[183].z=-0.25;   v[184].x=2.7; v[184].y=2.4; v[184].z=-0.25;   v[185].x=2.8; v[185].y=2.475; v[185].z=-0;   v[186].x=2.8; v[186].y=2.475; v[186].z=0.25;   v[187].x=3.525; v[187].y=2.49375; v[187].z=0.25;   v[188].x=3.525; v[188].y=2.49375; v[188].z=-0;   v[189].x=2.9; v[189].y=2.475; v[189].z=-0;
  v[190].x=2.9; v[190].y=2.475; v[190].z=0.15;   v[191].x=3.45; v[191].y=2.5125; v[191].z=0.15;   v[192].x=3.45; v[192].y=2.5125; v[192].z=-0;   v[193].x=2.8; v[193].y=2.4; v[193].z=-0;   v[194].x=2.8; v[194].y=2.4; v[194].z=0.15;   v[195].x=3.2; v[195].y=2.4; v[195].z=0.15;   v[196].x=3.2; v[196].y=2.4; v[196].z=-0;   v[197].x=3.525; v[197].y=2.49375; v[197].z=-0.25;   v[198].x=2.8; v[198].y=2.475; v[198].z=-0.25;   v[199].x=3.45; v[199].y=2.5125; v[199].z=-0.15;
  v[200].x=2.9; v[200].y=2.475; v[200].z=-0.15;   v[201].x=3.2; v[201].y=2.4; v[201].z=-0.15;   v[202].x=2.8; v[202].y=2.4; v[202].z=-0.15;   v[203].x=0; v[203].y=3.15; v[203].z=-0;   v[204].x=0; v[204].y=3.15; v[204].z=0.002;   v[205].x=0.002; v[205].y=3.15; v[205].z=-0;   v[206].x=0.8; v[206].y=3.15; v[206].z=-0;   v[207].x=0.8; v[207].y=3.15; v[207].z=0.45;   v[208].x=0.45; v[208].y=3.15; v[208].z=0.8;   v[209].x=0; v[209].y=3.15; v[209].z=0.8;
  v[210].x=0; v[210].y=2.85; v[210].z=-0;   v[211].x=0.2; v[211].y=2.7; v[211].z=-0;   v[212].x=0.2; v[212].y=2.7; v[212].z=0.112;   v[213].x=0.112; v[213].y=2.7; v[213].z=0.2;   v[214].x=0; v[214].y=2.7; v[214].z=0.2;   v[215].x=-0.002; v[215].y=3.15; v[215].z=-0;   v[216].x=-0.45; v[216].y=3.15; v[216].z=0.8;   v[217].x=-0.8; v[217].y=3.15; v[217].z=0.45;   v[218].x=-0.8; v[218].y=3.15; v[218].z=-0;   v[219].x=-0.112; v[219].y=2.7; v[219].z=0.2;
  v[220].x=-0.2; v[220].y=2.7; v[220].z=0.112;   v[221].x=-0.2; v[221].y=2.7; v[221].z=-0;   v[222].x=0; v[222].y=3.15; v[222].z=-0.002;   v[223].x=-0.8; v[223].y=3.15; v[223].z=-0.45;   v[224].x=-0.45; v[224].y=3.15; v[224].z=-0.8;   v[225].x=0; v[225].y=3.15; v[225].z=-0.8;   v[226].x=-0.2; v[226].y=2.7; v[226].z=-0.112;   v[227].x=-0.112; v[227].y=2.7; v[227].z=-0.2;   v[228].x=0; v[228].y=2.7; v[228].z=-0.2;   v[229].x=0.45; v[229].y=3.15; v[229].z=-0.8;
  v[230].x=0.8; v[230].y=3.15; v[230].z=-0.45;   v[231].x=0.112; v[231].y=2.7; v[231].z=-0.2;   v[232].x=0.2; v[232].y=2.7; v[232].z=-0.112;   v[233].x=0.4; v[233].y=2.55; v[233].z=-0;   v[234].x=0.4; v[234].y=2.55; v[234].z=0.224;   v[235].x=0.224; v[235].y=2.55; v[235].z=0.4;   v[236].x=0; v[236].y=2.55; v[236].z=0.4;   v[237].x=1.3; v[237].y=2.55; v[237].z=-0;   v[238].x=1.3; v[238].y=2.55; v[238].z=0.728;   v[239].x=0.728; v[239].y=2.55; v[239].z=1.3;
  v[240].x=0; v[240].y=2.55; v[240].z=1.3;   v[241].x=1.3; v[241].y=2.4; v[241].z=-0;   v[242].x=1.3; v[242].y=2.4; v[242].z=0.728;   v[243].x=0.728; v[243].y=2.4; v[243].z=1.3;   v[244].x=0; v[244].y=2.4; v[244].z=1.3;   v[245].x=-0.224; v[245].y=2.55; v[245].z=0.4;   v[246].x=-0.4; v[246].y=2.55; v[246].z=0.224;   v[247].x=-0.4; v[247].y=2.55; v[247].z=-0;   v[248].x=-0.728; v[248].y=2.55; v[248].z=1.3;   v[249].x=-1.3; v[249].y=2.55; v[249].z=0.728;
  v[250].x=-1.3; v[250].y=2.55; v[250].z=-0;   v[251].x=-0.728; v[251].y=2.4; v[251].z=1.3;   v[252].x=-1.3; v[252].y=2.4; v[252].z=0.728;   v[253].x=-1.3; v[253].y=2.4; v[253].z=-0;   v[254].x=-0.4; v[254].y=2.55; v[254].z=-0.224;   v[255].x=-0.224; v[255].y=2.55; v[255].z=-0.4;   v[256].x=0; v[256].y=2.55; v[256].z=-0.4;   v[257].x=-1.3; v[257].y=2.55; v[257].z=-0.728;   v[258].x=-0.728; v[258].y=2.55; v[258].z=-1.3;   v[259].x=0; v[259].y=2.55; v[259].z=-1.3;
  v[260].x=-1.3; v[260].y=2.4; v[260].z=-0.728;   v[261].x=-0.728; v[261].y=2.4; v[261].z=-1.3;   v[262].x=0; v[262].y=2.4; v[262].z=-1.3;   v[263].x=0.224; v[263].y=2.55; v[263].z=-0.4;   v[264].x=0.4; v[264].y=2.55; v[264].z=-0.224;   v[265].x=0.728; v[265].y=2.55; v[265].z=-1.3;   v[266].x=1.3; v[266].y=2.55; v[266].z=-0.728;   v[267].x=0.728; v[267].y=2.4; v[267].z=-1.3;   v[268].x=1.3; v[268].y=2.4; v[268].z=-0.728;   v[269].x=0; v[269].y=0; v[269].z=-0;
  v[270].x=1.5; v[270].y=0.15; v[270].z=-0;   v[271].x=1.5; v[271].y=0.15; v[271].z=-0.84;   v[272].x=0.84; v[272].y=0.15; v[272].z=-1.5;   v[273].x=0; v[273].y=0.15; v[273].z=-1.5;   v[274].x=1.5; v[274].y=0.075; v[274].z=-0;   v[275].x=1.5; v[275].y=0.075; v[275].z=-0.84;   v[276].x=0.84; v[276].y=0.075; v[276].z=-1.5;   v[277].x=0; v[277].y=0.075; v[277].z=-1.5;   v[278].x=1.425; v[278].y=0; v[278].z=-0;   v[279].x=1.425; v[279].y=0; v[279].z=-0.798;
  v[280].x=0.798; v[280].y=0; v[280].z=-1.425;   v[281].x=0; v[281].y=0; v[281].z=-1.425;   v[282].x=-0.84; v[282].y=0.15; v[282].z=-1.5;   v[283].x=-1.5; v[283].y=0.15; v[283].z=-0.84;   v[284].x=-1.5; v[284].y=0.15; v[284].z=-0;   v[285].x=-0.84; v[285].y=0.075; v[285].z=-1.5;   v[286].x=-1.5; v[286].y=0.075; v[286].z=-0.84;   v[287].x=-1.5; v[287].y=0.075; v[287].z=-0;   v[288].x=-0.798; v[288].y=0; v[288].z=-1.425;   v[289].x=-1.425; v[289].y=0; v[289].z=-0.798;
  v[290].x=-1.425; v[290].y=0; v[290].z=-0;   v[291].x=-1.5; v[291].y=0.15; v[291].z=0.84;   v[292].x=-0.84; v[292].y=0.15; v[292].z=1.5;   v[293].x=0; v[293].y=0.15; v[293].z=1.5;   v[294].x=-1.5; v[294].y=0.075; v[294].z=0.84;   v[295].x=-0.84; v[295].y=0.075; v[295].z=1.5;   v[296].x=0; v[296].y=0.075; v[296].z=1.5;   v[297].x=-1.425; v[297].y=0; v[297].z=0.798;   v[298].x=-0.798; v[298].y=0; v[298].z=1.425;   v[299].x=0; v[299].y=0; v[299].z=1.425;
  v[300].x=0.84; v[300].y=0.15; v[300].z=1.5;   v[301].x=1.5; v[301].y=0.15; v[301].z=0.84;   v[302].x=0.84; v[302].y=0.075; v[302].z=1.5;   v[303].x=1.5; v[303].y=0.075; v[303].z=0.84;   v[304].x=0.798; v[304].y=0; v[304].z=1.425;   v[305].x=1.425; v[305].y=0; v[305].z=0.798;     
  
  // Center teapot's median point
  var Vec3  vmin, vmax, vmid;
  vmin.setNull();
  vmax.setNull();
  for( var Size i = 0; i < v.size(); i++ )
  {
    vmin = vmin.min( v[i] );
    vmax = vmax.max( v[i] );
  }
  
  vmid = (vmin + vmax)*0.5;
  for( var Size i = 0; i < v.size(); i++ )
    v[i] = v[i] - vmid;
  
  computeNormals( p, v, n );
}


operator subdividePatch(
  in Patch p,
  io Vec3  pv[],
  io Vec3  pn[],
  io Vec3  v[],
  io Vec3  n[],
  io Integer idx[],
  io Size voff,
  io Size idxoff,
  in Integer nb_points
  )
{
  // Compute the basis function
  var Scalar b[][4];
  b.resize( nb_points );
  
  for( var Integer i = 0; i < nb_points; i++ )
  {
    var Scalar  t = Scalar( i ) / Scalar( nb_points - 1 );
    b[i][0] = (1-t) * (1-t) * (1-t);
    b[i][1] = 3.0 * t * (1-t) * (1-t);
    b[i][2] = 3.0 * t * t * (1-t);
    b[i][3] = t * t * t;
  }
  
  var Vec3   rv[][4], rn[][4];
  rv.resize( nb_points );
  rn.resize( nb_points );
  
  // Create smoothed control curves along the U iso lines
  for( var Integer i = 0; i < nb_points; i++ )
  {
    for( var Integer j = 0; j < 4; j++ )
    {
      rv[i][j] = 
        b[i][0] * pv[ p.idx[j][0] ] + 
        b[i][1] * pv[ p.idx[j][1] ] + 
        b[i][2] * pv[ p.idx[j][2] ] + 
        b[i][3] * pv[ p.idx[j][3] ];
      rn[i][j] = 
        b[i][0] * pn[ p.idx[j][0] ] + 
        b[i][1] * pn[ p.idx[j][1] ] + 
        b[i][2] * pn[ p.idx[j][2] ] + 
        b[i][3] * pn[ p.idx[j][3] ];
    }
  }
  
  // Create a smooth surface from the smoothed control
  // curves along the V iso lines.
  var Integer  offset = voff;
  for( var Integer i = 0; i < nb_points; i++ )
  {
    for( var Integer j = 0; j < nb_points; j++ )
    {
      v[voff] = 
        b[i][0] * rv[j][0] + 
        b[i][1] * rv[j][1] + 
        b[i][2] * rv[j][2] + 
        b[i][3] * rv[j][3];
      n[voff] = 
        b[i][0] * rn[j][0] + 
        b[i][1] * rn[j][1] + 
        b[i][2] * rn[j][2] + 
        b[i][3] * rn[j][3];
      
      n[voff].setUnit();
      voff++;
    }
  }
  
  for( var Integer i = 0; i < (nb_points-1); i++ )
  {
    for( var Integer j = 0; j < (nb_points-1); j++ )
    {
      var Integer   c0, c1, c2, c3;
      c0 = i * nb_points + j;
      c1 = i * nb_points + j + 1;
      c2 = (i + 1) * nb_points + j;
      c3 = (i + 1) * nb_points + j + 1;

      idx[idxoff++] = offset + c0;
      idx[idxoff++] = offset + c1;
      idx[idxoff++] = offset + c2;
      
      idx[idxoff++] = offset + c1;
      idx[idxoff++] = offset + c3;
      idx[idxoff++] = offset + c2;
    }
  }
}

operator generateTeapot(
	io Vec3 v[],
	io Vec3 n[],
	io Integer idx[],
  io Scalar size,
  io Integer detail
  )
{
  var Integer nb_points = (detail >= 0)?(detail+2):2;

  var Patch tp[];
  var Vec3 tv[], tn[];
    
  getTeapotHull( tp, tv, tn );
  
  v.resize( tp.size() * nb_points * nb_points );
  n.resize( v.size() );
  idx.resize( tp.size() * (nb_points - 1) * (nb_points - 1) * 6 );
  
  var Size  voff = 0, idxoff = 0;
  for( var Size i = 0; i < tp.size(); i++ )
    subdividePatch( tp[i], tv, tn, v, n, idx, voff, idxoff, nb_points ); 
  
  var Scalar maxV = 0.0;
  for( var Size i = 0; i < v.size(); i++ )
    if( v[i].norm() > maxV ) maxV = v[i].norm();
  
  var Scalar scale = (size / maxV) * 2.0;
  
  for( var Size i = 0; i < v.size(); i++ )
    v[i] = v[i] * scale;
}

operator entry()
{
  report( "Entry" );
  var Vec3  v[], n[];
  var Integer idx[];
  var Scalar size = 1.0;
  var Integer detail = 0;
  
  generateTeapot( v, n, idx, size, detail );
  report( v );
}
