/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

operator gen(io String output) {
  report("  Running generator!");
  output = "Hello";
}

operator testCachedGenerator()
{
  report("--- Testing Cached Generator");
  ValueProducer<String> vp = createValueCache(
    createValueGenerator( gen )
  );
  report("vp = " + vp);

  report("Should run generator");
  report(" vp.produce() = " + vp.produce());

  report("Should not run generator (use cache)");
  report(" vp.produce() = " + vp.produce());

  vp.flush();
  report("Should run generator");
  report(" vp.produce() = " + vp.produce());
  report(" ");
}

operator multByTwo(
  io Integer value
  )
{
  report("  Running transform!");
  value *= 2;
}

operator testCachedTransform()
{
  report("--- Testing Cached Transform");
  ValueProducer<Integer> vp = createValueCache(
    createValueTransform(
      createConstValue( 42 ),
      multByTwo
      )
    );
  report("vp = " + vp);

  report("Should run transform");
  report(" vp.produce() = " + vp.produce());

  report("Should not run transform (use cache)");
  report(" vp.produce() = " + vp.produce());

  vp.flush();
  report("Should run transform");
  report(" vp.produce() = " + vp.produce());
  report(" ");
}

operator testNestedCache()
{
  report("--- Testing Nested Caches");
  ValueProducer<String> vp = createValueCache(
    createValueCache(
      createValueGenerator( gen )
    )
  );
  report("vp = " + vp);

  report("Should run generator");
  report(" vp.produce() = " + vp.produce());

  report("Should not run generator (use cache)");
  report(" vp.produce() = " + vp.produce());

  vp.flush();
  report("Should run generator");
  report(" vp.produce() = " + vp.produce());
  report(" ");
}

operator genInteger(io Integer output) {
  report("  Running generator!");
  output = 123;
}

operator testTransformFlushPropagate()
{
  report("--- Testing Transform flush propagation");
  ValueProducer<Integer> vp = 
    createValueTransform(
      createValueCache( createValueGenerator( genInteger ) ),
      multByTwo
    );
  report("vp = " + vp);

  report("Should run generator");
  report(" vp.produce() = " + vp.produce());

  report("Should not run generator (use cache)");
  report(" vp.produce() = " + vp.produce());

  vp.flush();
  report("Should run generator");
  report(" vp.produce() = " + vp.produce());
  report(" ");
}

operator multByPi(
  Integer input,
  io Scalar output
  )
{
  output = 3.14 * input;
}

operator testMapFlushPropagate()
{
  report("--- Testing Map flush propagation");
  ValueProducer<Scalar> vp = 
    createValueMap(
      createValueCache( createValueGenerator( genInteger ) ),
      multByPi
    );
  report("vp = " + vp);

  report("Should run generator");
  report(" vp.produce() = " + vp.produce());

  report("Should not run generator (use cache)");
  report(" vp.produce() = " + vp.produce());

  vp.flush();
  report("Should run generator");
  report(" vp.produce() = " + vp.produce());
  report(" ");
}

operator entry() {
  testCachedGenerator();
  testCachedTransform();
  testNestedCache();
  testTransformFlushPropagate();
  testMapFlushPropagate();
}

