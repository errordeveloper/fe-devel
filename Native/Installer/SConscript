#NOTE: from scons doc (http://www.scons.org/doc/1.0.1/HTML/scons-user/x3627.html), the following 
#      should be in some site_scons/site_tools folder to be automatically loaded, in a "ZipDist.py" file.
#      The problem is that such directory is not in our repository, so either we would complexify
#      the installation steps or we would require an extra cmd line arg when launching scons,
#      so I just inlined the content here (with some modifs).

#######################################################################
# DistZip.py 
# taken from http://www.scons.org/wiki/DistZipBuilder
# + modified so we can specify a zip root dir through DISTZIP_ROOTDIR
#######################################################################

# DistZipBuilder: tool to generate zip files using SCons
#
# Copyright (C) 2005, 2006  Matthew A. Nicholson
# Copyright (C) 2006  John Pye
#
# This file is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Fabric: modified so we can specify a zip root dir through DISTZIP_ROOTDIR

import os,sys
from SCons.Script import *
import SCons.Builder

def DistZipEmitter(target,source,env):

  source,origsource = [], source

  excludeexts = env.Dictionary().get('DISTZIP_EXCLUDEEXTS',[])
  excludedirs = env.Dictionary().get('DISTZIP_EXCLUDEDIRS',[])

  # assume the sources are directories... need to check that
  for item in origsource:
    if os.path.isdir(str(item)):
      for root, dirs, files in os.walk(str(item)):

        # don't make directory dependences as that triggers full build
        # of that directory
        if root in source:
          #print "Removing directory %s" % root
          source.remove(root)
        # loop through files in a directory
        for name in files:
          ext = os.path.splitext(name)
          if not ext[1] in excludeexts:
            relpath = os.path.join(root,name)
            source.append(relpath)
        for d in excludedirs:
          if d in dirs:
            dirs.remove(d)  # don't visit CVS directories etc
    else:
      ext = os.path.splitext(str(item))
      if not ext[1] in excludeexts:
        source.append(str(item))

  return target, source

def DistZipString(target, source, env):
  """
  This is what gets printed on the console. We'll strip out the list or source
  files, since it tends to get very long. If you want to see the contents, the
  easiest way is to uncomment the line 'Adding to ZIP file' below.
  """
  return 'DistZip(%s,...)' % str(target[0])

def DistZip(target, source, env):
  """zip archive builder"""

  import zipfile

  env_dict = env.Dictionary()

  # split the target directory, filename, and stuffix
  base_name = str(target[0]).split('.zip')[0]
  (target_dir, dir_name) = os.path.split(base_name)

  # create the target directory if it does not exist
  if target_dir and not os.path.exists(target_dir):
     os.makedirs(target_dir)

  # open our zip file for writing
  the_zip = zipfile.ZipFile(str(target[0]), "w")

  root_dir = str(env.Dictionary().get('DISTZIP_ROOTDIR',env.Dir( '#' )))

  # write sources to our zip file
  for item in source:
     item = str(item)
     targetItem = item
     if targetItem.startswith( root_dir ):
        targetItem = targetItem.replace(root_dir, '', 1)

     sys.stderr.write(".")
     #print "Adding to ZIP file: %s/%s" % (dir_name,item)
     the_zip.write(item, targetItem, zipfile.ZIP_DEFLATED)

  # all done
  sys.stderr.write("\n") #print "Closing ZIP file"
  the_zip.close()

def DistZipSuffix(env, sources):
   """zip archive suffix generator"""
   return ".zip"

def generateDistZip(env):
  """
  Add builders and construction variables for the DistZip builder.
  """

  env.Append(BUILDERS = {
     'DistZip': env.Builder(
        action = SCons.Action.Action(DistZip, DistZipString),
        suffix = DistZipSuffix,
        emitter = DistZipEmitter,
        target_factory = env.fs.Entry,
     ),
  })

Export('generateDistZip')

#######################################################################
# DistZip.py end
#######################################################################

#
# Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
#

import itertools

Import( 'baseEnv', 'buildOS' )

if 'dist' in COMMAND_LINE_TARGETS:
  installers = []
  installers += SConscript( 'Chrome/SConscript' )
  installers += SConscript( 'Firefox/SConscript' )
  if buildOS != 'Windows':
    installers += SConscript( 'Node/SConscript' )
    installers += SConscript( 'Python/SConscript' )
  Alias( 'dist', installers )
  if 'upload' in COMMAND_LINE_TARGETS:
    if buildOS == 'Windows':
      unixInstallers = ['/c'+'/'.join(str(item).split('\\'))[2:] for item in installers]
      uploadCommand = [ 'scp', '-i', os.environ['HOME'] + '/.ssh/id_rsa' ]
      uploadCommand += unixInstallers
      uploadCommand += [ 'fabric-engine.com:' ]
    else:
      uploadCommand = [ 'rsync', '-e', 'ssh', '--progress', '$SOURCES', 'fabric-engine.com:' ]
    upload = baseEnv.AlwaysBuild( baseEnv.Command(
      'upload',
      installers,
      [uploadCommand]
      ) )
    Alias( 'upload', upload )
