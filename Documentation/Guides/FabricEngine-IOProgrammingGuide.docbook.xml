<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<!DOCTYPE book [
<!ENTITY % allent SYSTEM "w3centities-f.ent">
%allent;
]>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <info>
    <title>IO Programming Guide</title>
    <copyright>
      <year>{{FABRIC_COPYRIGHT_YEARS}}</year>
      <holder>{{FABRIC_COMPANY_NAME}}</holder>
    </copyright>
    <releaseinfo>{{FABRIC_NAME}} Version {{FABRIC_VERSION}}</releaseinfo>
  </info>

  <chapter xml:id="introduction">
    <title>Introduction</title>
    <para>
      The Fabric Engine high-performance computing platform would not be complete without the ability to read and write external data.  Fabric IO collectively refers to a set of features that allows interaction with external data, including both local files and files obtained over HTTP, in the context of both KL programs and Fabric clients.  Fabric IO is a mix of Fabric client functions, specialized dependency graph features and functionality provided by Fabric extensions.  An important feature of Fabric IO is a secure IO model for the browser plugin client.
    </para>
  </chapter>

  <chapter xml:id="fabricio.fabricfilehandle">
    <title>FabricFileHandle</title>

    <para>
      A FabricFileHandle is a KL <code>String</code> which represents a local file or folder, along with a <quote>writable</quote> attribute. Depending on the client security model, a FabricFileHandle can be either a local file path (standalone or encoded as a URI) or a special URI that referes to a local file resource through a secure <quote>proxy</quote> handle.
    </para>

    <section xml:id="fabricio.fabricfilehandle.securitymodel">
      <title>Security model</title>
      <para>
        The enforcement of local file system security and privacy by Fabric depends on the client type. In the context of an end-user browser plugin, Fabric IO will only grant access to the files and folders which have been explicitely selected by the user, along with its permission to modify them. However, this restriction does not apply to the Python and Node.js Fabric clients, and can be bypassed by trusted browser plugin configurations by means of the Fabric FILESYSTEM extension. In order to support both restricted and unrestricted local file system access, Fabric IO features share the FabricFileHandle concept that permits this abstraction.
      </para>
    </section>

    <section xml:id="fabricio.fabricfilehandle.form">
      <title>Forms</title>
      <para>
        Depending on the security model, a FabricFileHandle any of the following forms:

        <variablelist>
          <varlistentry>
            <term><code>fabricio://<replaceable>[encoded random bytes]</replaceable></code></term>
            <listitem>
              <para>
                 A URI-like cryptic String in the context of a secure browser plugin client. The content of the FabricFileHandle is generated by Fabric, and is associated to the actual file or folder path and attributes.  Example: <code>fabricio://aWpv1PBn6caEMVFEBAJ+YF7Jj34FamQc</code>
              </para>
              <para>
                 In the case of a writable folder, it is possible to append a relative path at the end of the FabricFileHandle, in which case it takes the form <code>fabricio://<replaceable>[encoded random bytes]</replaceable><replaceable>[relative path]</replaceable></code>.  Example: <code>fabricio://aWpv1PBn6caEMVFEBAJ+YF7Jj34FamQc/images/portrait.jpeg</code>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>file://<replaceable>[local file path]</replaceable></code></term>
            <listitem>
              <para>
                A local file or folder URI, valid in the context of a trusted client.  Example: <code>file://C/images/portrait.jpeg</code> (Windows), <code>file://~/images/portrait.jpeg</code> (Mac OS X/Linux)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code><replaceable>[local file path]</replaceable></code></term>
            <listitem>
              <para>
                Direct local file or folder path, valid in the context of a trusted client.  Example: <code>C:\images\portrait.jpeg</code> (Windows), <code>~/images/portrait.jpeg</code> (Mac OS X/Linux)
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </section>

    <section xml:id="fabricio.fabricfilehandle.attributes">
      <title>Associated attributes</title>
      <para>
        When a FabricFleHandle is constructed, it is associated with the following attributes:
        <variablelist>
          <varlistentry>
            <term>local path</term>
            <listitem>
              <para>A local filesystem path.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>writeAccess attribute</term>
            <listitem>
              <para>If writable, Fabric IO functions are allowed to modify the content of the file or folder.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>folder attribute</term>
            <listitem>
              <para>A FabricFileHandle represents either a file or a folder. This distinction is made since the ability to change the contents of a folder has different security implications from the ability to change the contents of a file.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <note>
        <itemizedlist>
          <listitem>
            <para>A FabricFileHandle is valid only within the Fabric context in which it is built, and it remains valid until that context is destroyed.</para>
          </listitem>
          <listitem>
            <para>It is valid to build a FabricFileHandle representing a non-existing file or folder. For example, it can be used to store the path of a file that will be created in the future.</para>
          </listitem>
        </itemizedlist>
      </note>
    </section>
  </chapter>
  <chapter xml:id="fabricio.resourceloadnode">
    <title>The Dependency Graph ResourceLoadNode</title>
    <para>
      The ResourceLoadNode is a specialized dependency graph Node that enables reading of external data asynchronously. The source data location is specified in its <code>url</code> member (of type <code>String</code>) which can contain either an HTTP URL (currently supported only by the browser plugin client) or a <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link>. Once available, the ResourceLoadNode’s retrieved external data is stored in its <code>resource</code> member (of type <code>FabricResource</code>) and a notification callback is issued; details are discussed below.
    </para>
    <section xml:id="fabricio.resourceloadnode.datastorage">
      <title>Data storage</title>

      <para>
        Depending on ResourceLoadNode’s <code>storeDataAsFile</code> member value, the retrieved data can either be stored in a memory buffer or in a local file.  In either case, the results are stored as part of the <code>resource</code> member, which is of type <code>FabricResource</code> and contains the following fields:
        <variablelist>
          <varlistentry>
            <term><code>data</code></term>
            <listitem>
              <para>
                 A <code>Byte</code> variable-length array containing the retrieved data.  Only valid if ResourceLoadNode’s <code>storeDataAsFile</code> member is <code>false</code> (the default).
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>dataExternalLocation</code></term>
            <listitem>
              <para>
                A  <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> (<code>String</code>) associated with a local fila containing the retrieved data.  Only valid if ResourceLoadNode’s <code>storeDataAsFile</code> member is <code>true</code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>url</code></term>
            <listitem>
              <para>
                A <code>String</code> containing a copy of ResourceLoadNode’s <code>url</code> member (source data URI).
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>extension</code></term>
            <listitem>
              <para>
                A <code>String</code> containing the source file's extension (or a MIME type's subtype from an HTTP request). Example: <code>jpeg</code>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>mimeType</code></term>
            <listitem>
              <para>
                A <code>String</code> containing the source's full MIME type. Example: <code>image/jpeg</code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </section>
    <section xml:id="fabricio.resourceloadnode.clientusage">
      <title>Fabric Client Interface</title>
      <para>
        A ResourceLoadNode is created using a Fabric client’s <code>DG.createResourceLoadNode(<replaceable>name</replaceable>)</code> function. Once the <code>url</code> member of the ResourceLoadNode is set, the first evaluation of the node will issue a request for the external data; this call may return before the data is retrieved (ie. asynchronously). The <code>resource</code> member's data will remain empty until the data is fully retrieved.  Once the data is set into the <code>resource</code> member, the dependency graph will not re-evaluate automatically; instead, notifications will be sent to the fabric client. The Fabric client’s ResourceLoadNode  provides the following methods to register for these notifications:
        <variablelist>
          <varlistentry>
            <term><code>addOnLoadSuccessCallback</code></term>
            <listitem>
              <para>
                Registers a callback function on the ResourceLoadNode that will be triggered if the data is retrived successfully. The callback has takes parameter: the source ResourceLoadNode.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>addOnLoadFailureCallback</code></term>
            <listitem>
              <para>
                Registers a callback function on the ResourceLoadNode that will be triggered if there is an error retrieving the data. The callback takes one parameter: the source ResourceLoadNode.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>addOnLoadProgressCallback</code></term>
            <listitem>
              <para>
                Registers a callback function on the ResourceLoadNode that will be triggered a few times per second to provide progress information before the <code>addOnLoadSuccessCallback</code>- or <code>addOnLoadFailureCallback</code>- callback is triggered. The callback takes two parameters: the source ResourceLoadNode and a (dynamic language) object containing a <code>total</code> field and a <code>received</code> field, respectively the total number of bytes to be retrieved and the current retrived amount.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <para>
        To complement the ResourceLoadNode features, each Node created through the dependency graph has a <code>putResourceToFile(<replaceable>fabricFileHandle</replaceable>, <replaceable>member</replaceable>)</code> method that saves the data from a <code>FabricResource</code> type member (such as ResourceLoadNode's <code>resource</code> member) to a local file associated with a  <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link>.
      </para>
      <section xml:id="fabricio.resourceloadnode.examplesection">
        <title>Example</title>
        <para>
          The following code is an example of using a ResourceLoadNode in the context of a Node.js Fabric client. In order to trace both the client and the KL runtime aspect of ResourceLoadNode's behavior, an operator is bound to the ResourceLoadNode to provide a trace, and the client registers to the ResourceLoadNode notification callbacks. Although the example was built for the Node.js Fabric client, it is relevant to other Fabric clients types such as Python.
          <example xml:id="resourceloadnode.ex">
            <?dbfo keep-together="auto" ?>
            <title>Building and using a ResourceLoadNode</title>
            <programlisting language="javascript">
            <![CDATA[
FABRIC = require('Fabric').createClient();
node = FABRIC.DependencyGraph.createResourceLoadNode("node");

//Add an operator to the ResourceLoadNode so we can trace its runtime behavior
op = FABRIC.DependencyGraph.createOperator("loadop");
op.setEntryPoint("onLoad");
op.setSourceCode('\
operator onLoad( io FabricResource resource )\n\
{\n\
  if( resource.dataExternalLocation != "" || resource.data.size() != 0 ) {\n\
    report("Loaded " + resource.url);\n\
    if( resource.dataExternalLocation )\n\
      report( "Data loaded into file handle " + resource.dataExternalLocation );\n\
    else\n\
      report( "Data loaded in data buffer of size " + resource.data.size() );\n\
  }\n\
  else\n\
    report("Data not loaded yet");\n\
}\n\
');
binding = FABRIC.DG.createBinding();
binding.setOperator(op);
binding.setParameterLayout([
  "self.resource"
]);
node.bindings.append(binding);

//Trace the progress from the client side by registering to notification callbacks
node.addOnLoadFailureCallback( function( srcNode ) {
  console.log( 'Error loading ' + srcNode.getData('url', 0) );
  FABRIC.close();
});

node.addOnLoadProgressCallback( function( srcNode, progressInfo ) {
  console.log( 'Load progress for ' + srcNode.getData('url', 0) + ' : total = ' + progressInfo.total + ', received = ' + progressInfo.received );
});

node.addOnLoadSuccessCallback( function( srcNode ) {
  node.evaluate();//Ensure we reevaluate now that the data has loaded
  console.log( 'Loading of ' + srcNode.getData('url', 0) + ' succeeded' );
  var targetFileHandle = FABRIC.IO.buildFileHandleFromRelativePath('file://./loadedImage.jpeg');
  srcNode.putResourceToFile(targetFileHandle, 'resource');
  console.log( 'Loaded data written to file ./loadedImage.jpeg' );
  FABRIC.close();
});

node.setData('url',0,'file://image.jpeg');
node.evaluate();
            ]]>
            </programlisting>
            <simpara>Output:</simpara>
            <screen>
              <![CDATA[
[FABRIC] [MT] Data not loaded yet
[FABRIC] [MT] Loaded file://image.jpeg
[FABRIC] [MT] Data loaded in data buffer of size 829667
Loading of file://image.jpeg succeeded
Loaded data written to file ./loadedImage.jpeg
            ]]>
            </screen>
          </example>
        </para>
      </section>
    </section>
  </chapter>
  <chapter xml:id="fabricio.functions">
    <title>Fabric.IO Helper Functions</title>
    <para>
      A Fabric client's <code>IO</code> module contains several helper functions to support the <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> concept. They are most useful for the JavaScript browser plugin client (NPAPI) since they use <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link>'s <link linkend='fabricio.fabricfilehandle.form'>secure form</link> for their results. The following helper functions are available and described later:
      <itemizedlist>
        <listitem>
          <para>
            <link linkend='fabricio.functions.queryUserFileHandle'>IO.queryUserFileHandle</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend='fabricio.functions.queryUserFileAndFolderHandle'>IO.queryUserFileAndFolderHandle</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend='fabricio.functions.buildFileHandleFromRelativePath'>IO.buildFileHandleFromRelativePath</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend='fabricio.functions.buildFolderHandleFromRelativePath'>IO.buildFolderHandleFromRelativePath</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend='fabricio.functions.getFileHandleInfo'>IO.getFileHandleInfo</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend='fabricio.functions.getTextFileContent'>IO.getTextFileContent</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend='fabricio.functions.putTextFileContent'>IO.putTextFileContent</link>
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      <example xml:id="fabricio.functions.ex">
        <title>Fabric.IO functions example</title>
        <para>
          This example illustrates the use of most of the Fabric.IO helper functions, in the context of a browser plugin Fabric client (secure model).
        </para>
        <programlisting language="javascript">
          <![CDATA[
var handles = FABRIC.IO.queryUserFileAndFolderHandle( FABRIC.IO.forSave, "Fabric IO text file test", "txt", "testfile" );
console.log( "Returned file & folder cryptic file handles (random): " + JSON.stringify( handles ) );

FABRIC.IO.putTextFileContent( handles.file, "Test file body", false );
console.log( "File content: " + FABRIC.IO.getTextFileContent( handles.file ) );

var selectedFileInfo = FABRIC.IO.getFileHandleInfo( handles.file );
console.log( "File info: " + JSON.stringify( selectedFileInfo ) );

//In this example we requested the permission to write to the folder. Let's add another file:
var otherFileHandle = FABRIC.IO.buildFileHandleFromRelativePath( handles.folder + '/Other' + selectedFileInfo.fileName );

//Append some text content to Other file
FABRIC.IO.putTextFileContent( otherFileHandle, FABRIC.IO.getTextFileContent( handles.file ), false );
FABRIC.IO.putTextFileContent( otherFileHandle, " with appended content", true );
var otherContent = FABRIC.IO.getTextFileContent( otherFileHandle );
console.log( "Other file content: " + FABRIC.IO.getTextFileContent( otherFileHandle ) );
        ]]>
          </programlisting>
        </example>

        <informalfigure xml:id="fabricio.functions.ex.out">
          <simpara>Output:</simpara>
          <screen>
            <![CDATA[
Returned file & folder cryptic file handles (random): {"file":"fabricio://enXGaI42F3rAmT9hE3j8U8oPUnShOyIa","folder":"fabricio://EqJs7FBMvWuRzQj8ob5BXuW86/hAnj8I"}
File content: Test file body
File info: {"type":"file","writeAccess":true,"exists":true,"fileName":"testfile.txt","fileSize":14}
Other file content: Test file body with appended content
        ]]>
          </screen>
        </informalfigure>
    </para>
    <section xml:id="fabricio.functions.queryUserFileHandle">
      <title>
        IO.queryUserFileHandle
      </title>

      <methodsynopsis language="JavaScript">
        <type>FabricFileHandle</type>
        <methodname>queryUserFileHandle</methodname>
        <methodparam>
          <parameter>mode</parameter>
        </methodparam>
        <methodparam>
          <parameter>uiTitle</parameter>
        </methodparam>
        <methodparam>
          <parameter>extension</parameter>
        </methodparam>
        <methodparam>
          <parameter>defaultFileName</parameter>
        </methodparam>
      </methodsynopsis>
      <para>
        <emphasis>[browser plugin client only]</emphasis> Opens a file browser allowing the user to select a local file, which is returned as a <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link>. Example: see <xref linkend='fabricio.functions.ex'/>
      </para>
      <simplesect>
        <title>Parameters</title>
        <itemizedlist>
          <listitem>
            <para>
              <parameter>mode</parameter> : Access mode requested for the selected file. It can be one of the following:
              <itemizedlist>
                <listitem>
                  <para>
                    <code>IO.forOpen</code> : open an existing file as read-only
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>IO.forOpenWithWriteAccess</code> : open an existing file with read-write access
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>IO.forSave</code> : creates a new file (or overwrites an exiting one) with write access
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>uiTitle</parameter> : <emphasis>[optional]</emphasis> title for the file browser dialog window. Note that for clarity and security reasons, Fabric will automatically be prepend it with "Open File: " (<parameter>mode</parameter> = <code>IO.forOpen</code>), "Save File: " (<parameter>mode</parameter> = <code>IO.forSave</code>) or "Open File with write access: " (<parameter>mode</parameter> = <code>IO.forOpenWithWriteAccess</code>).
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>extension</parameter> : <emphasis>[optional]</emphasis> default extension for the files to be opened or saved, for example: <quote>*.jpeg</quote>
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>defaultFileName</parameter> : <emphasis>[optional]</emphasis> default file name the file to be opened or saved, for example: <quote>image.jpeg</quote>
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>Returned value</parameter> : a <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> associated to the selected file. If <parameter>mode</parameter> = <code>IO.forSave</code>, the file might not have beeen created yet.
            </para>
          </listitem>
        </itemizedlist>
      </simplesect>
    </section>
    <section xml:id="fabricio.functions.queryUserFileAndFolderHandle">
      <title>
        IO.queryUserFileAndFolderHandle
      </title>

      <methodsynopsis language="JavaScript">
        <type>Object</type>
        <methodname>queryUserFileAndFolderHandle</methodname>
        <methodparam>
          <parameter>mode</parameter>
        </methodparam>
        <methodparam>
          <parameter>uiTitle</parameter>
        </methodparam>
        <methodparam>
          <parameter>extension</parameter>
        </methodparam>
        <methodparam>
          <parameter>defaultFileName</parameter>
        </methodparam>
      </methodsynopsis>
      <para>
        <emphasis>[browser plugin client only]</emphasis> Opens a file browser allowing the user to select both local file and its folder, which are returned as an object containing a <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> for the file and another one for the folder. Note that the file browser title will warn the user that a premission to read or write the folder is requested. Example: see <xref linkend='fabricio.functions.ex'/>
      </para>
      <simplesect>
        <title>Parameters</title>
        <itemizedlist>
          <listitem>
            <para>
              <parameter>mode</parameter> : Access mode requested for the selected file and folder. It can be one of the following:
              <itemizedlist>
                <listitem>
                  <para>
                    <code>IO.forOpen</code> : open an existing file and folder as read-only
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>IO.forOpenWithWriteAccess</code> : open an existing file and folder with read-write access
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>IO.forSave</code> : creates a new file (or overwrites an exiting one) with write access to it and its folder
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>uiTitle</parameter> : <emphasis>[optional]</emphasis> title for the file browser dialog window. Note that for clarity and security reasons, Fabric will automatically be prepend it with "Open File with read access to folder: " (<parameter>mode</parameter> = <code>IO.forOpen</code>), "Save File with access to folder: " (<parameter>mode</parameter> = <code>IO.forSave</code>) or "Open File with read &amp; write access to folder: " (<parameter>mode</parameter> = <code>IO.forOpenWithWriteAccess</code>).
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>extension</parameter> : <emphasis>[optional]</emphasis> default extension for the files to be opened or saved, for example: <quote>*.jpeg</quote>
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>defaultFileName</parameter> : <emphasis>[optional]</emphasis> default file name the file to be opened or saved, for example: <quote>image.jpeg</quote>
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>Returned value</parameter> : an <code>Object</code> containing the following members:
              <itemizedlist>
                <listitem>
                  <para>
                    <code>.file</code> : member of type <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> associated to the selected file
                    , and containing a <code>folder</code> member of type <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> associated to its containing folder. If <parameter>mode</parameter> = <code>IO.forSave</code>, the file might not have beeen created yet.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>.folder</code> : member of type <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> associated to file's containing folder
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </itemizedlist>
      </simplesect>
    </section>
    <section xml:id="fabricio.functions.buildFileHandleFromRelativePath">
      <title>
        IO.buildFileHandleFromRelativePath
      </title>

      <methodsynopsis language="JavaScript">
        <type>FabricFileHandle</type>
        <methodname>buildFileHandleFromRelativePath</methodname>
        <methodparam>
          <parameter>handleWithRelativePath</parameter>
        </methodparam>
      </methodsynopsis>
      <para>
        Builds a file <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> from a folder <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> to which a relative path was appended. This method is mostly useful when FabricFileHandles are in a cryptic String <link linkend='fabricio.fabricfilehandle.form'>form</link> in the context of a <link linkend='fabricio.fabricfilehandle.securitymodel'>secure model</link>. The <quote>writable</quote> attribute of the folder handle gets propagated to the returned file handle. The method doesn't validate the existance of the file. Example: see <xref linkend='fabricio.functions.ex'/>
      </para>
      <simplesect>
        <title>Parameters</title>
        <itemizedlist>
          <listitem>
            <para>
              <parameter>handleWithRelativePath</parameter> : A <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> to which a relative file path was appended, for example: <code>fabricio://aWpv1PBn6caEMVFEBAJ+YF7Jj34FamQc/images/portrait.jpeg</code>
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>Returned value</parameter> : a <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> associated to the file of the provided relative path.
            </para>
          </listitem>
        </itemizedlist>
      </simplesect>
    </section>
    <section xml:id="fabricio.functions.buildFolderHandleFromRelativePath">
      <title>
        IO.buildFolderHandleFromRelativePath
      </title>

      <methodsynopsis language="JavaScript">
        <type>FabricFileHandle</type>
        <methodname>buildFolderHandleFromRelativePath</methodname>
        <methodparam>
          <parameter>handleWithRelativePath</parameter>
        </methodparam>
      </methodsynopsis>
      <para>
        Builds a subfolder <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> from a parent folder <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> to which a relative path was appended. This method is mostly useful when FabricFileHandles are in a cryptic String <link linkend='fabricio.fabricfilehandle.form'>form</link> in the context of a <link linkend='fabricio.fabricfilehandle.securitymodel'>secure model</link>. The <quote>writable</quote> attribute of the parent folder handle gets propagated to the returned subfolder handle. Example: see <xref linkend='fabricio.functions.ex'/>
      </para>
      <simplesect>
        <title>Parameters</title>
        <itemizedlist>
          <listitem>
            <para>
              <parameter>handleWithRelativePath</parameter> : A <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> to which a subfolder path was appended, for example: <code>fabricio://aWpv1PBn6caEMVFEBAJ+YF7Jj34FamQc/images</code>
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>Returned value</parameter> : a <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> associated to the subfolder of the provided relative path.
            </para>
          </listitem>
        </itemizedlist>
      </simplesect>
    </section>
    <section xml:id="fabricio.functions.getFileHandleInfo">
      <title>
        IO.getFileHandleInfo
      </title>

      <methodsynopsis language="JavaScript">
        <type>Object</type>
        <methodname>getFileHandleInfo</methodname>
        <methodparam>
          <parameter>fabricFileHandle</parameter>
        </methodparam>
      </methodsynopsis>
      <para>
        Returns an <code>Object</code> containing information associated to a <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link>. Note that, for security and privacy reasons, private information such as the full local file or folder path is not part of the returned object. Relative paths are supported. Example: see <xref linkend='fabricio.functions.ex'/>
      </para>
      <simplesect>
        <title>Parameters</title>
        <itemizedlist>
          <listitem>
            <para>
              <parameter>fabricFileHandle</parameter> : the <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> for which the information is requested
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>Returned value</parameter> : an <code>Object</code> containing the following members:
              <itemizedlist>
                <listitem>
                  <para>
                    <code>.type</code> : a <code>String</code> member indicating the type of the input FabricFileHandle. Its values can be <quote>file</quote>, <quote>folder</quote> or <quote>unknown</quote>. <quote>unknown</quote> will be returned if the input FabricFileHandle has a relative path pointing to a non-existing file or folder.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>.writeAccess</code> : a <code>Boolean</code> member indicating if the associated file or folder can be modified or written to
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>.exists</code> : a <code>Boolean</code> member indicating if the associated file or folder currently exists in the local file system
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>.fileName</code> : a <code>String</code> member indicating the name of the associated file (provided only if <code>.type</code> is <quote>file</quote>)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <code>.fileSize</code> : a <code>String</code> member indicating the size of the associated file (provided only if <code>.type</code> is <quote>file</quote> and <code>.exists</code> is <code>True</code>)
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </itemizedlist>
      </simplesect>
    </section>
    <section xml:id="fabricio.functions.getTextFileContent">
      <title>
        IO.getTextFileContent
      </title>
      <methodsynopsis language="JavaScript">
        <type>String</type>
        <methodname>getTextFileContent</methodname>
        <methodparam>
          <parameter>fabricFileHandle</parameter>
        </methodparam>
      </methodsynopsis>
      <para>
        Reads the content of a file <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> and returns it as a <code>String</code>. This method is not well suited for reading binary data. In the context of a dependency graph, binary data associated to a FabricFileHandle should rather be read using a ResourceLoadNode or the FabricFILESTREAM extension. Example: see <xref linkend='fabricio.functions.ex'/>
      </para>
      <simplesect>
        <title>Parameters</title>
        <itemizedlist>
          <listitem>
            <para>
              <parameter>fabricFileHandle</parameter> : A <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> associated to the file to be read.
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>Returned value</parameter> : a <code>String</code> containing the source file content.
            </para>
          </listitem>
        </itemizedlist>
      </simplesect>
    </section>
    <section xml:id="fabricio.functions.putTextFileContent">
      <title>
        IO.putTextFileContent
      </title>

      <methodsynopsis language="JavaScript">
        <methodname>putTextFileContent</methodname>
        <methodparam>
          <parameter>fabricFileHandle</parameter>
        </methodparam>
        <methodparam>
          <parameter>content</parameter>
        </methodparam>
        <methodparam>
          <parameter>append</parameter>
        </methodparam>
      </methodsynopsis>
      <para>
        Writes a <code>String</code> to the file associated to the input <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link>, by replacing the file content or be appending to it. Note that the input FabricFileHandle must have a <quote>writable</quote> attribute. Example: see <xref linkend='fabricio.functions.ex'/>
      </para>
      <simplesect>
        <title>Parameters</title>
        <itemizedlist>
          <listitem>
            <para>
              <parameter>fabricFileHandle</parameter> : A <link linkend='fabricio.fabricfilehandle'>FabricFileHandle</link> associated to the file to be written.
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>content</parameter> : the <code>String</code> which will be written to the file
            </para>
          </listitem>
          <listitem>
            <para>
              <parameter>append</parameter> : a <code>Boolean</code> indicating if the <parameter>content</parameter> <code>String</code> is appended at the end of the file, else it will replace the file's content.
            </para>
          </listitem>
        </itemizedlist>
      </simplesect>
    </section>
  </chapter>
  <chapter xml:id="fabricio.extensions">
    <title>KL Extensions for IO</title>
    <para>
      Fabric extensions are always trusted code in the sense that they have the same access priviliges as the process in which Fabric is running.  As such, they are given access to the private information associated to the FabricFileHandle, in particular the associated file or folder full path along with other attributes, through the EDK::FileHandleWrapper C++ helper class.
    </para>
    <para>
      Fabric is built with the <emphasis>FabricFILESTREAM</emphasis> and <emphasis>FabricFILESYSTEM</emphasis> C++ extensions in order to enable runtime IO operations directly from KL. However, only the FileSTREAM extension is installed with the browser plugin Fabric client, since the FileSYSTEM extension would enable applications to bypass the browser's security model using KL.  In cases where this is acceptable, such as for the installation of a private, trusted Fabric application, the FileSYSTEM extension can installed separately.
    </para>
    <section xml:id="fabricio.extensions.filestream">
      <title>The FabricFILESTREAM Extension</title>
      <para>
        The FabricFILESTREAM extension provides the ability to read and write to files directly from KL though a FabricFileStream object that is initialized from a FabricFileHandle. Additionally, this extension gives the ability to read and write compressed binary data. This extension is considered secure because it respects the read-write permissions associated with the FabricFileHandle. See the FabricFILESTREAM reference guide for more details about the provided functions.
      </para>
    </section>
    <section xml:id="fabricio.extensions.filesystem">
      <title>The FabricFILESYSTEM Extension</title>
      <para>
        The FabricFILESYSTEM extension enables browsing and modification of the local file system's folder hierarhchy. Because it enables full access to the local file system, this extension is not considered secure and is not installed by default with the Fabric browser plugin.  However, it can be downloaded and installed separately. See the FabricFILESYSTEM reference guide for more details about the provided functions.
      </para>
    </section>
  </chapter>
</book>
