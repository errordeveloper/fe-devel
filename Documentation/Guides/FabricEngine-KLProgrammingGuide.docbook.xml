<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<!DOCTYPE book [
<!ENTITY % allent SYSTEM "w3centities-f.ent">
%allent;
]>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <info>
    <title>KL Programming Guide</title>
    <copyright>
      <year>{{FABRIC_COPYRIGHT_YEARS}}</year>
      <holder>{{FABRIC_COMPANY_NAME}}</holder>
    </copyright>
    <releaseinfo>{{FABRIC_NAME}} Version {{FABRIC_VERSION}}</releaseinfo>
  </info>
  
  <chapter xml:id="introduction">
    <title>Introduction</title>

    <para>
      KL (pronounced <emphasis>kale</emphasis>) is the programming language used for Fabric operators.  KL stands for <quote>kernel language</quote>; in this context, <emphasis>kernel</emphasis> refers to the concept of a computational kernel as used in multithreaded programming.
    </para>

    <para>
      KL was designed with the following goals:

      <itemizedlist>
        <listitem><para>
          KL is designed to run <glossterm>performance-critical</glossterm> sections of <glossterm>dynamic-language</glossterm> programs.  As such, KL is designed so that KL programs run as quickly as possible on modern hardware.
        </para></listitem>
        
        <listitem><para>
          KL should be easy to learn for someone who is already familiar with programming in JavaScript and other scripting languages.
        </para></listitem>

        <listitem><para>
          It must be possible to compile most KL programs to run on different architectures and kinds of hardware, specifically <acronym>CPU</acronym>s and <acronym>GPU</acronym>s.
        </para></listitem>
      </itemizedlist>

      As such, KL is a language with a syntax very similar to JavaScript but that is <emphasis>procedural</emphasis>, <emphasis>strongly-typed</emphasis> and with <emphasis>low-level data layouts</emphasis>.  Being <emphasis>procedural</emphasis> means that, unlike JavaScript, functions (or, rather, closures) are not first-class objects that can be passed around in the language; instead, functions are always globally declared.  Being <emphasis>strongly-typed</emphasis> means that, in a KL program, the types of all variables and function parameters are known at compile type, unlike JavaScript where types are only known at runtime.  Having <emphasis>low-level data layouts</emphasis> means that the size of data and the way that it is laid out in memory is guaranteed and controllable by the programmer.
    </para>
    
    <para>
      Before diving in to the details of the language, we will present some simple examples.  We don't expect you to understand all the details of the examples, but hopefully they will give you a basic idea of what KL programs look like as well as some of what is possible with KL.  All of these examples can be run by downloading and installing the <filename>FabricEngine-KLTool-...</filename> file that is appropriate for your operating system from <link xlink:href="http://dist.fabric-engine.com/latest/"><uri>http://dist.fabric-engine.com/latest/</uri></link>.  Once installed, you can copy the source code to a text file and run <command>kl <replaceable>filename.kl</replaceable></command>.
    </para>
    
    <section xml:id="introduction.hello-world">
      <title>Hello World in KL</title>
      
      <para>
        Traditionally, the first program you see in a language is one that says hello.  In KL, the "Hello, world!" program is simple:
        
        <example xml:id="introduction.hello-world.ex">
          <title>Hello world</title>
          <programlisting language="kl"><![CDATA[
operator entry() {
  report("Hello, world!");
}
          ]]></programlisting>
        </example>
        
        Running this program through the <command>kl</command> tool, the output is:
      
        <informalfigure xml:id="introduction.hello-world.ex.out">
          <screen><![CDATA[
Hello, world!
          ]]></screen>
        </informalfigure>
        
        There's not much to learn from this program, but it does introduce a few concepts:
        
        <itemizedlist>
          <listitem><para>The <code>entry</code> operator is what is run by the <command>kl</command> tool.  KL distinguishes places in the program that can be called from the outside world&mdash;in this case, the outside world is the <command>kl</command> tool itself.  We discuss more about operators in <xref linkend="operators" /></para></listitem>
          <listitem><para>The <code>report</code> function sends some text to wherever messages go.  In the case of the <command>kl</command> tool, messages go to standard output; when running within a web browser, messages appear on the JavaScript console; for console applications (in Node.js or Python for example), messages go to standard error.</para></listitem>
          <listitem><para>The text <code>"Hello, world!"</code> is a <glossterm>string constant</glossterm>.  String constants in KL follow almost exactly the same syntax as JavaScript.</para></listitem>
        </itemizedlist>
      </para>
    </section>
    <section xml:id="introduction.fibonacci">
      <title>Fibonacci Sequence in KL</title>

      <para>
        Next, we present a somewhat more sophisticated example that computes the first few terms of the Fibonacci sequence.  The Fibonacci sequence is the number sequence whose first few terms are 1 and 1, and whose further terms are the sum of the previous two in the sequence, ie. 2, 3, 5, 8, and so on.  There are several ways of computing the Fibonacci sequence in a programming language but we choose the naive, recursive way in order to illustrate some more language features of KL.

        <example xml:id="introuction.fibonacci.ex">
          <title>Fibonacci sequence generator</title>
          <programlisting language="kl"><![CDATA[
/* Recursively compute the Fibonacci sequence.
** The first term is returned with n = 0
*/
function Integer fibonacci(Integer n) {
  if (n <= 1)
    return 1; // The first two terms (n=0 or n=1) are 1
  else 
    return fibonacci(n - 2) + fibonacci(n - 1);
}

operator entry() {
  for (Integer i = 0; i < 10; ++i)
    report(fibonacci(i));
}
          ]]></programlisting>
        </example>
        
        Running this program through the <command>kl</command> tool, the output is:
      
        <informalfigure xml:id="introuction.fibonacci.out">
          <screen><![CDATA[
1
1
2
3
5
8
13
21
34
55
          ]]></screen>
        </informalfigure>
      
        The Fibonacci example highlights a few simple features of KL, including:

        <itemizedlist>
          <listitem><para>Function and parameter declaration</para></listitem>
          <listitem><para>Recursion</para></listitem>
          <listitem><para>Conditional statements</para></listitem>
          <listitem><para>Loops</para></listitem>
          <listitem><para>Comments</para></listitem>
        </itemizedlist>
      </para>
    </section>
    <section xml:id="introduction.mandelbrot">
      <title>Mandelbrot Set in KL</title>
      
      <para>
        Finally, we present an example of a KL program that generates the Mandelbrot set and outputs it visually as ASCII art.  The Mandelbrot set is a mathematical set defined by complex recursive functions, but that it best known because the patterns it contains are visually stunning.  Refer to the Wikipedia entry on the Mandelbrot set at <link xlink:href="http://en.wikipedia.org/wiki/Mandelbrot_set"><uri>http://en.wikipedia.org/wiki/Mandelbrot_set</uri></link> for more information.
      </para>
      
      <para>
        KL includes very powerful features for extending the language for computational problems such as that of computing the values of the Mandelbrot set, as seen in the source code below:
        
        <example xml:id="introuction.mandelbrot.ex">
          <title>Mandelbrot set generator</title>
          <programlisting language="kl"><![CDATA[
struct Complex32 {
  Float32 re;
  Float32 im;
};

function Complex32(Float32 re, Float32 im) {
  this.re = re;
  this.im = im;
}

function Complex32 +(Complex32 lhs, Complex32 rhs) {
  return Complex32(lhs.re + rhs.re, lhs.im + rhs.im);
}

function Complex32 *(Complex32 lhs, Complex32 rhs) {
  return Complex32(lhs.re*rhs.re-lhs.im*rhs.im, lhs.re*rhs.im + lhs.im*rhs.re);
}

function Float32 Complex32.normSq() {
  return this.re*this.re + this.im*this.im;
}

function Byte computeDwell(Complex32 c) {
  Complex32 z = c;
  Size count;
  for (count = 0; count < 255; ++count) {
    if (z.normSq > 4)
      break;
    z = z*z + c;
  }
  return count;
}

operator entry()
{
  Complex32 z;
  for (Size row=9; row<=31; ++row) {
    z.im = 4.0 * row / 40.0 - 2.0;
    String rowString;
    for (Size col=0; col<=78; ++col) {
      z.re = 4.0 * col / 78.0 - 2.0;
      Byte dwell = computeDwell(z);
      
      if (dwell & 192)
        rowString += "#";
      else if (dwell & 48)
        rowString += "*";
      else if (dwell & 12)
        rowString += ".";
      else
        rowString += " ";
    }
    report(rowString);
  }
}
          ]]></programlisting>
        </example>
        
        Running this program through the <command>kl</command> tool, the output is:
      
        <informalfigure xml:id="fig.mandelbrot.out">
          <screen><![CDATA[
                                  .....                                        
                                .......#.                                      
                              ......**.....                                    
                            .......####*.....                                  
                         ..........####.........                               
                    ........*#**##########*...*..                              
               .............*#################....                             
            ...............###################....                             
          ......*..*.*...*#####################...                             
        ........*######*.######################*..                             
      ......*..################################...                             
############################################*.....                             
      ......*..################################...                             
        ........*######*.######################*..                             
          ......*..*.*...*#####################...                             
            ...............###################....                             
               .............*#################....                             
                    ........*#**##########*...*..                              
                         ..........####.........                               
                            .......####*.....                                  
                              ......**.....                                    
                                .......#.                                      
                                  .....                                        
          ]]></screen>
        </informalfigure>
      
        The Mandelbrot set example highlights a few of the more sophisticated features of KL, including:

        <itemizedlist>
          <listitem><para>User-defined types</para></listitem>
          <listitem><para>Constructors</para></listitem>
          <listitem><para>Operator overloads</para></listitem>
          <listitem><para>Methods</para></listitem>
          <listitem><para>Bitwise operators</para></listitem>
          <listitem><para>Variable-length arrays</para></listitem>
        </itemizedlist>
      </para>
    </section>
    <section xml:id="introduction.organization">
      <title>How This Guide is Organized</title>
      
      <para>
        Unlike other languages, KL is a language designed to add performance-critical sections to programs written in dynamic languages.  As such, this guide assumes that you are already familiar with the basic concepts of modern programming languages, including types, expressions, statements (eg. conditional statements, loop statements, return statements) and functions.
      </para>
      
      <para>
        Since it's difficult to provide meaningful examples in a computer language without using many concepts of the language, we will often use or even refer to concepts that aren't discussed until later in the guide.  We leave it up to you to decide whether to jump ahead or to just keep reading and see where things go.
      </para>
        
      <para>
        The remainder of the guide is laid out as follows:
        
        <itemizedlist>
          <listitem><para>
            <xref linkend="syntax" /> describes the syntax of KL.  KL has a syntax very similar to JavaScript (like JavaScript, it is a <quote>C-like</quote> language) so this syntax will be familiar to many programmers.  If you are already familiar with the syntax of JavaScript or C, we recommend that you skip this chapter and move on to the next; you can always come back to it later for reference.
          </para></listitem>
          
          <listitem><para>
            <xref linkend="types" /> introduces the type system of KL.  KL comes with a rich set of base types that includes integers, floating-point numbers, strings and booleans, as well as derived types including structures, arrays and dictionaries.
          </para></listitem>
          
          <listitem><para>
            <xref linkend="globals" /> describes how functions and other global declarations are made in KL.  KL includes support for basic functions (also referred to as procedures in other languages), but also support more complex function concepts such as prototypes, methods and overloaded operators.  It also supports global constants, as well as a facility to import functionality from external modules.
          </para></listitem>
          
          <listitem><para>
            <xref linkend="ops-exprs" /> describes the set of operators supported by KL and the different kinds of expressions that can be formed using these operators.  It also discusses the rules that govern scoping for variables and other symbols.
          </para></listitem>

          <listitem><para>
            <xref linkend="statements" /> describes the different statements that are available for function bodies in KL.
          </para></listitem>
        </itemizedlist>
      </para>
    </section>
  </chapter>
  <chapter xml:id="syntax">
    <title>KL Syntax</title>
    
    <para>
      When KL was developed it was designed to have a syntax as close as possible to JavaScript, which itself is what is referred to as a <quote>C-like language</quote> (as far as syntax is concerned).  This chapter goes into the details of KL syntax, and can act as a reference for you if you are not familiar with C-like languages.  On the other hand, if you are already familiar with the syntax of JavaScript and/or C, we recommend that you skip this chapter and move on to the next.
    </para>
      
    <para>
      Some of the key characteristics of C-like languages are:
      
      <itemizedlist>
        <listitem><para>
          Programs are plain, human-readable text files.
        </para></listitem>
        
        <listitem><para>
          A program is a sequence of <glossterm>tokens</glossterm>.  There are four major types of tokens: keywords, identifiers, symbols and constants.
        </para></listitem>
        
        <listitem><para>
          Tokens may be separated by arbitrary whitespace and <emphasis>must</emphasis> be separated by whitespace in the case that it would make two adjacent tokens appear to be a single, different token.  By whitespace, we mean spaces (ASCII 32), newlines (ASCII 10), tabs (ASCII 9), carriage returns (ASCII 13) and vertical tabs (ASCII 11).
        </para></listitem>
        
        <listitem><para>
          Programs can contain comments anywhere and comments are treated like whitespace when the program is processed by the computer.  There are two types of comments: block comments, which begin with <code>/*</code> and end with <code>*/</code>, and line comments, which begin with <code>//</code> and continue to the next newline (ASCII 10).
        </para></listitem>
        
        <listitem><para>
          Blocks are delimited by <code>{</code> and <code>}</code>
        </para></listitem>
        
        <listitem><para>
          Statements are terminated with <code>;</code>
        </para></listitem>
      </itemizedlist>
      
      We delve into some more details of the KL syntax below.
    </para>
    
    <section xml:id="syntax.encoding">
      <title>Encoding</title>
      
      <para>
        Although KL programs are plain, human-readable text files, KL does specify an encoding for the text files: UTF-8.  The KL compiler assumes that all KL source code is encoded as UTF-8 without any encoding marks.  KL programs which contain invalid UTF-8 sequences cannot be compiled and will result in syntax errors.
      </para>
      
      <para>
        If you don't understand exactly what this means, don't worry: plain 7-bit ASCII text files, such as used for C source code (and often for JavaScript source code) are by default UTF-8 encoded.  The only thing to keep in mind is that text files saved on Windows in <quote>Unicode format</quote> (which technically means they are encoded as UCS-2) cannot be read by the KL compiler.  If you want to insert foreign language characters into a KL source file you must use an editor that can write UTF-8 files.
      </para>
      
      <para>
        The benefit of specifying an encoding is that high-bit characters, such as foreign language characters, can be inserted directly into string constants in KL source files.
      </para>
    </section>
    <section xml:id="syntax.line-continuations">
      <title>Line Continuations</title>
      
      <para>
        Like C, any line of a KL program that ends with a <code>\</code> (backslash) character causes the line to be joined with the next line.  This is useful for breaking long lines into multiple lines when a single token needs to be split; usually this token would be a long string.
      </para>
            
      <example xml:id="syntax.line-continuations.ex">
        <title>Line continuations</title>
        <programlisting language="kl"><![CDATA[
operator entry() {
  report("\
This is a really, really long string \
that spans multiple lines.  Note that \
     <-- the SPACES at the beginning \
of the next line are preserved!");
}
        ]]></programlisting>
      </example>
      
      <informalfigure xml:id="syntax.line-continuations.out">
        <simpara>Output:</simpara>
        <screen><![CDATA[
This is a really, really long string that spans multiple lines.  Note that      <-- the SPACES at the beginning of the next line are preserved!
        ]]></screen>
      </informalfigure>
    </section>
    <section xml:id="syntax.comments">
      <title>Comments</title>
      
      <para>
        As mentioned previously, KL supports the same two types of comments as C and JavaScript: block comments and line comments.
      </para>
        
      <section xml:id="syntax.comments.block">
        <title>Block Comments</title>
        
        <para>
          A block comment in KL is an arbitrary sequence of characters that begins with the characters <code>/*</code> and ends with the characters <code>*/</code>.  Like C, KL ends a block comment as soon as it encounters the first sequence <code>*/</code>.  Also like C, KL does not recognize nested comments.  The following examples illustrate acceptable and erroneous bad block comments in KL.
        </para>
        
        <example xml:id="syntax.comments.block.good.ex">
          <title>Acceptable block comments</title>
          <programlisting language="kl"><![CDATA[
/* A simple, one-line block comment */

/* This is
   a multi-line
   block comment
   */
   
/*
** And so is this
*/

operator entry() {
  /* comments can appear in source code */
  report("Hello!"); /* pretty much anywhere */
  foo( 32 /*, 53*/ ); /* block comments are a simple way to temporarily remove code */
}
          ]]></programlisting>
        </example>
        
        <example xml:id="syntax.comments.block.bad.ex">
          <title>Erroneous block comments</title>
          <programlisting language="kl"><![CDATA[
/* KL ends the comment
 * as soon as the first */
 * is seen, so this is
 * a bad block comment that 
 * results in a syntax error
 */

/* Like C, block comments
 * cannot nest in KL,
   /* so this is also
    * a bad comment that
    * will result in a
    * syntax error
    */
 */
          ]]></programlisting>
        </example>
        
        <para>
          Be careful with block comments; if either of the errors of the type given above occur in your program it can be very difficult to figure out what has gone wrong; the syntax errors you are given will seem to have nothing to do with your program.  For this reason, we recommend that you use line comments, which are described next.
        </para>
      </section>
      <section xml:id="syntax.comments.line">
        <title>Line Comments</title>
        
        <para>
          A line comment in KL begins with the character sequence <code>//</code> and continues until the end of the line (ASCII character 10).  Unlike block comments, there are no <quote>gotchas</quote> with line comments: they work exactly as expected.  However, they can't be used to comment out sections of code in the middle of a line
        </para>
        
        <example xml:id="syntax.comments.line.ex">
          <title>Line comments</title>
          <programlisting language="kl"><![CDATA[
// A simple, one-line line comment

// This is
// a multi-line
// line comment

operator entry() {
  // comment can appear in source code
  report("Hello!"); // pretty much anywhere
  foo( 32 //, 53 ); // can't comment out code in the middle of the line
          ); // but you can continue it on the next line.
}
          ]]></programlisting>
        </example>
      </section>
    </section>
    <section xml:id="syntax.tokens">
      <title>Tokens</title>
      
      <para>
        A KL program is <glossterm>parsed</glossterm> as a sequence of tokens.  A token is a sequence of characters that begins with something other than whitespace and is not a comment.  There are four categories of tokens in KL: keywords, identifiers, symbols, and constants.
      </para>
      
      <section xml:id="keywords">
        <title>Keywords</title>
        
        <para>
          The following is the list of all the keywords in KL:
          
          <simplelist type="vert" columns="4">
            <member><code>alias</code></member>
            <member><code>break</code></member>
            <member><code>case</code></member>
            <member><code>const</code></member>
            <member><code>continue</code></member>
            <member><code>default</code></member>
            <member><code>do</code></member>
            <member><code>else</code></member>
            <member><code>false</code></member>
            <member><code>for</code></member>
            <member><code>function</code></member>
            <member><code>if</code></member>
            <member><code>in</code></member>
            <member><code>io</code></member>
            <member><code>operator</code></member>
            <member><code>require</code></member>
            <member><code>return</code></member>
            <member><code>struct</code></member>
            <member><code>switch</code></member>
            <member><code>throw</code></member>
            <member><code>true</code></member>
            <member><code>var</code></member>
            <member><code>while</code></member>
          </simplelist>
        </para>
        
        <para>
          Keywords cannot be used as identifiers, ie. cannot be used for variable, parameter, function, constant or type names.
        </para>
      </section>
      <section xml:id="syntax.tokens.identifiers">
        <title>Identifiers</title>
        
        <para>
          Identifiers are a sequence of one or more characters that:
          
          <itemizedlist>
            <listitem><para>begin with any of the characters <code>a</code>...<code>z</code>, <code>A</code>...<code>Z</code> or <code>_</code>; and</para></listitem>
            <listitem><para>are followed by zero or more of the characters <code>a</code>...<code>z</code>, <code>A</code>...<code>Z</code>, <code>0</code>...<code>9</code> or <code>_</code>; and</para></listitem>
          </itemizedlist>
        </para>
        
        <para>
          Identifiers are used in KL for variable names, parameter names, function names, constant names, method names and type names.
          
          <note><para>The built-in base types in KL (eg. <code>Boolean</code>, <code>String</code>, <code>Float32</code>) are not keywords but rather identifiers.  This is a technical detail that is important in the design of the language grammar but doesn't make much difference in practice; it simply changes certain syntax errors into semantic errors.</para></note>
        </para>
        
        <para>
          Some examples of valid identifiers in KL:
          
          <itemizedlist>
            <listitem><para><code>foo</code></para></listitem>
            <listitem><para><code>someVariable</code></para></listitem>
            <listitem><para><code>MyType</code></para></listitem>
            <listitem><para><code>MyTypeVersion2</code></para></listitem>
            <listitem><para><code>variable_with_underscores</code></para></listitem>
            <listitem><para><code>piBy2</code></para></listitem>
            <listitem><para><code>_</code></para></listitem>
          </itemizedlist>
          
          Some examples of invalid identifiers:
          
          <itemizedlist>
            <listitem><para><code>2by4</code></para></listitem>
            <listitem><para><code>my%Share</code></para></listitem>
            <listitem><para><code>peter.zion@fabric-engine.com</code></para></listitem>
          </itemizedlist>
        </para>
      </section>
      <section xml:id="syntax.tokens.symbols">
        <title>Symbols</title>
        
        <para>
          A small set of non-alphanumeric, non-underscore characters or short sequences of such characters are the symbols in KL.  They are specifically:

          <simplelist type="vert" columns="8">
            <member><code>=</code></member>
            <member><code>==</code></member>
            <member><code>+</code></member>
            <member><code>+=</code></member>
            <member><code>++</code></member>
            <member><code>-</code></member>
            <member><code>-=</code></member>
            <member><code>--</code></member>
            <member><code>*</code></member>
            <member><code>*=</code></member>
            <member><code>/</code></member>
            <member><code>/=</code></member>
            <member><code>%</code></member>
            <member><code>%=</code></member>
            <member><code>^</code></member>
            <member><code>^=</code></member>
            <member><code>^^</code></member>
            <member><code>&amp;</code></member>
            <member><code>&amp;=</code></member>
            <member><code>&amp;&amp;</code></member>
            <member><code>|</code></member>
            <member><code>|=</code></member>
            <member><code>||</code></member>
            <member><code>[</code></member>
            <member><code>]</code></member>
            <member><code>(</code></member>
            <member><code>)</code></member>
            <member><code>{</code></member>
            <member><code>}</code></member>
            <member><code>;</code></member>
            <member><code>.</code></member>
            <member><code>&lt;</code></member>
            <member><code>&lt;=</code></member>
            <member><code>&lt;&lt;</code></member>
            <member><code>&lt;&lt;=</code></member>
            <member><code>&gt;</code></member>
            <member><code>&gt;=</code></member>
            <member><code>&gt;&gt;</code></member>
            <member><code>&gt;&gt;=</code></member>
            <member><code>~</code></member>
            <member><code>!</code></member>
            <member><code>!=</code></member>
            <member><code>,</code></member>
            <member><code>?</code></member>
            <member><code>;</code></member>
          </simplelist>
        </para>
        
        <para>  
          The KL compiler is <quote>greedy</quote> when looking for symbols: it looks for the longest sequence of characters that are a valid symbol.  This is why <code>==(</code> is treated as the two symbols <code>==</code> and <code>(</code>: there is no symbol starting with <code>==(</code> but <code>==</code> is a symbol.
        </para>
      </section>
      <section xml:id="constants">
        <title>Constants</title>
        
        <para>
          A constant is a token that is interpreted as a fixed value of a specific type. KL supports five types of constants: boolean constants, integer constants, floating-point constants, and string constants.  Each of these are explained below.
        </para>
        
        <section xml:id="syntax.tokens.constants.boolean">
          <title>Boolean Constants</title>
          
          <para>
            The two keywords <code>true</code> and <code>false</code> are the two boolean constants.  They are each a value of type <code>Boolean</code>.
          </para>
          
          <example xml:id="syntax.tokens.constants.boolean.ex">
            <title>Boolean constants</title>
            <programlisting language="kl"><![CDATA[
operator entry() {
  Float32 value = 1.1;
  Index steps = 0;
  Boolean done = false;
  while (!done) {
    value *= value;
    if (value > 2)
      done = true;
    ++steps;
  }
  report("took " + steps + " steps");
}
            ]]></programlisting>
          </example>
          
          <informalfigure xml:id="syntax.tokens.constants.boolean.ex.out">
            <simpara>Output:</simpara>
            <screen><![CDATA[
took 3 steps
            ]]></screen>
          </informalfigure>
        </section>
        <section xml:id="syntax.tokens.constants.integer">
          <title>Integer Constants</title>
          
          <para>
            A integer constant can take one of three forms:

            <itemizedlist>
              <listitem><simpara>The single digit <code>0</code></simpara></listitem>
              <listitem><simpara>A decimal constant that starts with a single digit in the range <code>1</code>...<code>9</code> followed by zero or more digits in the range <code>0</code>...<code>9</code></simpara></listitem>
              <listitem><simpara>The two characters <code>0x</code> or <code>0X</code> followed by one or more characters in one of the ranges <code>0</code>...<code>9</code>, <code>a</code>...<code>f</code> and <code>A</code>...<code>F</code></simpara></listitem>
            </itemizedlist>
            
            The type of an integer constant depends on its value:
            
            <itemizedlist>
              <listitem><para>
                If it is less than <inlineequation><mathphrase>2<superscript >31</superscript>-1</mathphrase></inlineequation> then it is of type <code>Integer</code>;
              </para></listitem>
              
              <listitem><para>
                If it is at least <inlineequation><mathphrase>2<superscript >31</superscript></mathphrase></inlineequation> but less than <inlineequation><mathphrase>2<superscript >32</superscript>-1</mathphrase></inlineequation> (on 32-bit platforms) or <inlineequation><mathphrase>2<superscript >64</superscript>-1</mathphrase></inlineequation> (on 64-bit platforms) then it is of type <code>Size</code>;
              </para></listitem>
              
              <listitem><para>
                Otherwise, the integer constant is too large and the compiler will generate a syntax error.
              </para></listitem>
            </itemizedlist>
            
            <note><para>
              All integer constants are positive; a <code>-</code> (minus sign) followed by an integer constant is interpreted as the unary minus operator applied to the integer constant.
            </para></note>
          </para>
            
          <example xml:id="syntax.tokens.constants.integer.ex">
            <title>Integer constants</title>
            <programlisting language="kl"><![CDATA[
operator entry() {
  report(0);
  report(1);
  report(123456789);
  report(0xA9);
  report(0xdeadBEEF);
}
            ]]></programlisting>
          </example>
          
          <informalfigure xml:id="syntax.tokens.constants.integer.ex.out">
            <simpara>Output:</simpara>
            <screen><![CDATA[
0
1
123456789
169
3735928559
            ]]></screen>
          </informalfigure>
        </section>
        <section xml:id="syntax.tokens.constants.floating-point">
          <title>Floating-Point Constants</title>
          
          <para>
            A floating-point constant takes the following form:

            <itemizedlist>
              <listitem><simpara>Either a single <code>0</code> or one digit in the range <code>1</code>...<code>9</code> followed by zero or more digits in the range <code>0</code>...<code>9</code> (the <glossterm>whole part</glossterm>; the same syntax as a decimal integer constant)...</simpara></listitem>
              <listitem><simpara>...optionally followed by a <code>.</code> and zero or more characters in the range <code>0</code>...<code>9</code> (the <glossterm>fractional part</glossterm>)...</simpara></listitem>
              <listitem><simpara>...optionally followed by an <code>e</code> or an <code>E</code>, then optionally by a <code>+</code> or a <code>-</code>, then by one or more characters in the range <code>0</code>...<code>9</code> (the <glossterm>exponent</glossterm>).</simpara></listitem>
            </itemizedlist>
            
            <note><para>C accepts floating-point constants that start with a <code>.</code> but floating-point constants in KL must start with a digit</para></note>
            
            However, for a constant to be floating-point (and not integer) it must have a fractional part, an exponent, or both.
            
            <note><para>
              It is not possible to represent many decimal fractional expressions in IEEE floating point format.  As such, do not be surprised if the output values of such expressions appear to be slightly off, as seen in the example below with the constant <code>8.9e-6</code>.
            </para></note>
          </para>
            
          <para>
            In KL, all floating-point constants are of type <code>Float64</code>, regardless of value.
            
            <note><para>
              All floating-point constants are positive; a <code>-</code> (minus sign) followed by a floating-point constant is interpreted as the unary minus operator applied to the floating-point constant.
            </para></note>
          </para>
            
          <example>
            <title>Floating-point constants</title>
            <programlisting language="kl"><![CDATA[
operator entry() {
  report(0.0);
  report(1.4142);
  report(3.14159265358979);
  report(8.9e-6);
  report(4356.123E42);
}
            ]]></programlisting>
          </example>
          
          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[
0
1.4142
3.14159265358979
8.899999999999999e-06
4.356123e+45
            ]]></screen>
          </informalfigure>
        </section>
        <section xml:id="syntax.tokens.constants.string">
          <title>String Constants</title>
          
          <para>
            A <glossterm>string constant</glossterm> is a constant value of type <code>String</code>.  It takes one of the following forms:

            <itemizedlist>
              <listitem><para>
                A sequence of characters, possibly including string constant escape sequences (described below), enclosed in a pair of <code>"</code> (<quote>double-quote</quote>) characters; or
              </para></listitem>
              <listitem><para>
                A sequence of characters, possibly including string constant escape sequences (described below), enclosed in a pair of <code>'</code> (<quote>single-quote</quote>) characters; or
              </para></listitem>
            </itemizedlist>
            
            A <glossterm>string constant escape sequence</glossterm> is one of the following sequences of characters, describing what the sequence is replaced by in the string: 
            
            <variablelist>
              <varlistentry><term><code>\n</code></term><listitem><simpara>a single newline (ASCII 10) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\f</code></term><listitem><simpara>a single form feed (ASCII 12) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\r</code></term><listitem><simpara>a single carriage return (ASCII 13) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\t</code></term><listitem><simpara>a single carriage tab (ASCII 9) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\v</code></term><listitem><simpara>a single vertical tab (ASCII 11) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\a</code></term><listitem><simpara>a single bell (ASCII 7) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\b</code></term><listitem><simpara>a single backspace (ASCII 8) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\0</code></term><listitem><simpara>a single null (ASCII 0) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\"</code></term><listitem><simpara>a single double-quote (ASCII 34) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\'</code></term><listitem><simpara>a single single-quote (ASCII 39) character</simpara></listitem></varlistentry>
              <varlistentry><term><code>\\</code></term><listitem><simpara>a single backslash (ASCII 92) character</simpara></listitem></varlistentry>
              <varlistentry>
                <term><code>\x<replaceable>HH</replaceable></code></term>
                <listitem><para>
                  A single character whose ASCCI code is given in hexadecimal.  The two characters <code><replaceable>HH</replaceable></code> must each be a hexadecimal character, ie. in one of the ranges <code>0</code>...<code>9</code>, <code>a</code>...<code>f</code> and <code>A</code>...<code>F</code>.  For example, the escape sequence <code>0x0A</code> (decimal 10) is equivalent to the escape sequence <code>\n</code> (ASCII 10).
                </para></listitem>
              </varlistentry>
            </variablelist>
          </para>
          
          <example xml:id="syntax.tokens.constants.string.ex">
            <title>String constants</title>
            <programlisting language="kl"><![CDATA[
operator entry() {
  report("double-quoted!");
  report('single-quoted\nwith a newline');
  report("double-quoted containing \"double quotes\"");
}
            ]]></programlisting>
          </example>
          
          <informalfigure xml:id="syntax.tokens.constants.string.ex.out">
            <simpara>Output:</simpara>
            <screen><![CDATA[
double-quoted!
single-quoted
with a newline
double-quoted containing "double quotes"
            ]]></screen>
          </informalfigure>
        </section>
      </section>
    </section>
    <section xml:id="syntax.structure">
      <title>Program Structure</title>
      
      <para>
        A KL program consists of zero or more <glossterm>global declarations</glossterm> in sequence.  A global declaration is one of:
        
        <itemizedlist>
          <listitem><para>
            A declaration of a function, a function prototype, an operator, a method or an operator overload; see <xref linkend="functions" />.
          </para></listitem>
          <listitem><para>
            A declaration of structure; see <xref linkend="structs" />.
          </para></listitem>
          <listitem><para>
            A declaration of global constant; see <xref linkend="global-constants" />.
          </para></listitem>
          <listitem><para>
            A <code>require</code> statement; see <xref linkend="use" />.
          </para></listitem>
        </itemizedlist>
      </para>
    
      <para>
        In turn, functions, operators, and other similar constructs consist of zero or more <glossterm>statements</glossterm>.  Each statement is terminated with a <code>; </code> (semicolon) character.  For more detailed information on all the statements available in KL, see <xref linkend="statements" />.
      </para>
      
      <para>
        A sequence of statements, surrounded by braces (a <code>{</code> and a <code>}</code>), can take the place of a single statement.  This also introduces a nested scope; for more information, see <xref linkend="scope.compound-statement" />.
      </para>
    </section>
  </chapter>
  <chapter xml:id="types">
    <title>The KL Type System</title>

    <para>
      Unlike most languages, KL has a dynamic type system that is inherited from the Fabric environment.  In most cases, compound types are registered from the Fabric environment running in a dynamic language (eg. JavaScript or Python); those types are then automatically made available to KL programs running in that environment.  This does not, however, affect the semantics of the language; the KL type system can still be explained purely from the point of view of the language itself.
    </para>

    <para>
      Like most programming languages, KL has support for both a fixed set of base types from which other types are derived as well as different kinds of derived types.
    </para>

    <section xml:id="types.base">
      <title>Base Types</title>

      <para>
        The base types in KL are the following:

        <variablelist>
          <varlistentry>
            <term><code>Boolean</code></term>
            <listitem><para>can be either <code>true</code> or <code>false</code></para></listitem>
          </varlistentry>
    
          <varlistentry>
            <term><code>Byte</code></term>
            <listitem><para>an 8-bit unsigned integer</para></listitem>
          </varlistentry>
    
          <varlistentry>
            <term><code>Integer</code></term>
            <listitem><para>a 32-bit signed integer</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Size</code></term>
            <listitem><para>an unsigned integer that is 32-bit on 32-bit platforms and 64-bit on 64-bit platforms.  <code>Size</code> is usually used to either index into or count the number of elements in an array</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Index</code></term>
            <listitem><para>an alias for <code>Size</code></para></listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Float32</code></term>
            <listitem><para>a 32-bit IEEE floating point</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Scalar</code></term>
            <listitem><para>an alias for <code>Float32</code></para></listitem>
          </varlistentry>

          <varlistentry>
            <term><code>Float64</code></term>
            <listitem><para>a 64-bit IEEE floating point</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><code>String</code></term>
            <listitem><para>a sequence of zero or more characters</para></listitem>
          </varlistentry>
        </variablelist>
      </para>
      
      <section xml:id="types.base.boolean">
        <title>The <code>Boolean</code> Type</title>

        <para>
          The value of an expression of <code>Boolean</code> type is either logical true or logical false.  The type has the following properties:

          <itemizedlist>
            <listitem><para>
              The constants <code>true</code> and <code>false</code> are <code>Boolean</code> values with logical values true and false, respectively.
            </para></listitem>

            <listitem><para>
              All other base types cast to Boolean as follows:
              
              <itemizedlist>
                <listitem><para><code>Byte</code>, <code>Integer</code> and <code>Size</code> values cast to true if and only if the value is non-zero</para></listitem>
                <listitem><para><code>Float32</code> and <code>Float64</code> values cast true if and only if the value is not equal to <code>0.0</code> or <code>-0.0</code></para></listitem>
                <listitem><para><code>String</code> values cast to true if and only if their length is greater than zero</para></listitem>
                <listitem><para>arrays and dictionaries cast to true if and only if they are non-empty</para></listitem>
                <listitem><para>by default, structures do not cast to <code>Boolean</code>, but you can implement the cast if desired by creating a <code>Boolean</code> constructor that takes the structure as a parameter; see <xref linkend="constructors" /></para></listitem>
              </itemizedlist>
            </para></listitem>

            <listitem><para>
              For operators:
              
              <itemizedlist>
                <listitem><para>None of the arithmetic operators (binary <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> as well as unary <code>-</code> and <code>+</code>) are valid for <code>Boolean</code> values</para></listitem>
                <listitem><para>Only the <code>==</code> and <code>!=</code> comparison operators are valid for <code>Boolean</code> values</para></listitem>
                <listitem><para>All of the bitwise binary operators (<code>|</code>, <code>&amp;</code>, <code>^</code> and <code>~</code>) are valid for <code>Boolean</code> values and treat the value as if were a single bit</para></listitem>
              </itemizedlist>
            </para></listitem>
          </itemizedlist>
        </para>
        
        <example xml:id="types.base.boolean.ex">
          <title>The <code>Boolean</code> type</title>
          <programlisting language="kl"><![CDATA[
operator entry() {
  Boolean a = true;
  report(a);
  Boolean b = a & false;
  report(b);
  report(a != b);
}
          ]]></programlisting>
        </example>
        <informalfigure xml:id="types.base.boolean.ex.out">
          <simpara>Output:</simpara>
          <screen><![CDATA[
true
false
true              
          ]]></screen>
        </informalfigure>
      </section>
      <section xml:id="integers">
        <title>Integer Types</title>
        
        <para>
          The <code>Byte</code>, <code>Integer</code> and <code>Size</code> types (collectively known as <glossterm>integer types</glossterm>) represent whole integers.  These types differ only in their bit width and whether they are signed or unsigned, as follows:
          
          <variablelist>
            <varlistentry>
              <term><code>Byte</code></term>
              <listitem><simpara>an 8-bit unsigned integer</simpara></listitem>
            </varlistentry>
            
            <varlistentry>
              <term><code>Integer</code></term>
              <listitem><simpara>a 32-bit signed integer</simpara></listitem>
            </varlistentry>
            
            <varlistentry>
              <term><code>Size</code></term>
              <listitem><simpara>an unsigned integer that is 32-bit on 32-bit systems and 64-bit on 64-bit systems</simpara></listitem>
            </varlistentry>
            
            <varlistentry>
              <term><code>Index</code></term>
              <listitem><simpara>an alias for <code>Size</code></simpara></listitem>
            </varlistentry>
          </variablelist>
        </para>
        
        <para>
          Integer types behave as follows:
          
          <itemizedlist>
            <listitem><simpara>
              Integer constants (eg. <code>43562</code>) are of type <code>Integer</code> if their value is less than <inlineequation><mathphrase>2<superscript >31</superscript>-1</mathphrase></inlineequation>, otherwise they are of type <code>Size</code>.  For more details, see <xref linkend="syntax.tokens.constants.integer" />.
            </simpara></listitem>

            <listitem><para>
              All of the <link linkend="arithmetic-ops">arithmetic</link>, <link linkend="logical-ops">logical</link> and <link linkend="bitwise-ops">bitwise</link> operators work as expected for all integer types.
              
              <note><para>
                The result of applying the unary <code>-</code> (minus) operator to a <code>Byte</code> or a <code>Size</code> is still a positive number; it is the resulting unsigned integer that, when added to the original, results in 0 because of the type <quote>wrapping around</quote>.
              </para></note>
            </para></listitem>
          </itemizedlist>
        </para>
        
        <example xml:id="types.base.integers.ex">
          <title>Integer types</title>
          <programlisting language="kl"><![CDATA[
operator entry() {
  Byte b = 64;
  report(b);
  Size s = 45 * Size(b) + 32;
  report(s);
  Integer i = -75 * Integer(s) + 18;
  report(i);
}
          ]]></programlisting>
        </example>
        <informalfigure xml:id="types.base.integers.ex.out">
          <simpara>Output:</simpara>
          <screen><![CDATA[
64
2912
-218382
          ]]></screen>
        </informalfigure>
      </section>
      <section xml:id="types.base.floating-point">
        <title>Floating-Point Types</title>
        
        <para>
          The <code>Float32</code>, <code>Float64</code> and <code>Scalar</code> types (collectively known as <glossterm>floating-point types</glossterm>) represent <acronym>IEEE</acronym> floating-point numbers.  These types differ only in their bit width, as follows:
          
          <variablelist>
            <varlistentry>
              <term><code>Float32</code></term>
              <listitem><simpara>a 32-bit <acronym>IEEE</acronym> floating-point number</simpara></listitem>
            </varlistentry>
            
            <varlistentry>
              <term><code>Float64</code></term>
              <listitem><simpara>a 64-bit <acronym>IEEE</acronym> floating-point number</simpara></listitem>
            </varlistentry>
            
            <varlistentry>
              <term><code>Scalar</code></term>
              <listitem><para>
                an alias for <code>Float32</code>
                <warning><para>The <code>Scalar</code> alias will probably be removed in a future version of KL.  We recommend that you not use it in any new code.</para></warning>
              </para></listitem>
            </varlistentry>
          </variablelist>
        </para>
        
        <para>
          Floating-point types behave as follows:
          
          <itemizedlist>
            <listitem><para>
              Floating-point constants have the same syntax as in JavaScript and C, and are of type <code>Float64</code>.  For more details, see <xref linkend="syntax.tokens.constants.floating-point" />.
            </para></listitem>
            
            <listitem><para>
              All of the arithmetic and comparison operators are valid for floating-point values.  None of the bitwise operators are valid for floating-point values.
            </para></listitem>
          </itemizedlist>
        </para>

        <example xml:id="types.base.floating-points.ex">
          <title>Floating-point types</title>
          <programlisting language="kl"><![CDATA[
operator entry() {
  Float32 x = 3.141;
  report(x);
  Float64 y = 2.718;
  report(y);
  Float32 z = x*x + y*y;
  report(z);
}
          ]]></programlisting>
        </example>
        <informalfigure xml:id="types.base.floating-points.ex.out">
          <simpara>Output:</simpara>
          <screen><![CDATA[
3.141
2.718
17.2534
          ]]></screen>
        </informalfigure>
      </section>
      <section xml:id="string-type">
        <title>The <code>String</code> Type</title>
        
        <para>
          The <code>String</code> type represents a text string, ie. a sequence of zero or more characters.  A value of type <code>String</code> is referred to as a <glossterm>string value</glossterm>.
        </para>

        <para>          
          The semantics of the <code>String</code> type in KL are important to understand.  Strings have the following key properties:
          
          <itemizedlist>
            <listitem><simpara>A string is a sequence of zero or more characters.</simpara></listitem>
            <listitem><simpara>The length of a string is value of type <code>Size</code>, and the maximum length of a string is the maximum value of type <code>Size</code>.</simpara></listitem>
            <listitem><para>
              String constants can be specified inline in KL source files using single- or double-quotation marks, just as JavaScript.  For more details and examples of string constants, see <xref linkend="syntax.tokens.constants.string" />.
            </para></listitem>
            <listitem><simpara>Strings are <emphasis>reference-counted</emphasis> and <emphasis>copy-on-write</emphasis>.  This means that if you assign a string value to multiple variables, there is only one copy of the actual string until someone changes one of the strings.</simpara></listitem>
            <listitem><para>
              Strings support the following operations and properties, which are all exactly the same as JavaScript:
              <itemizedlist>
                <listitem><simpara>They have a <property>.length</property> property which returns the number of characters in the string</simpara></listitem>
                <listitem><simpara>The <code>+=</code> assignment operator is used to append another string to a given string</simpara></listitem>
                <listitem><simpara>A new string can be created by concatenating two other strings using the <code>+</code> binary operation</simpara></listitem>
                <listitem><simpara>Strings can be compared using the usual <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> and <code>&gt;=</code> logical operators.</simpara></listitem>
              </itemizedlist>
            </para></listitem>
            <listitem><simpara>Unlike C or C++, strings can contain the null character (ASCII 0).</simpara></listitem>
            <listitem><simpara>Strings have no notion of encoding; they are just sequences of bytes.  String encodings are determined by the application space where the strings are used.  Note that everything in Fabric itself uses the UTF-8 encoding, but Fabric extensions may need to convert strings into other encodings.</simpara></listitem>
            <listitem><simpara>All other types in KL can be converted to strings through a cast; this conversion simply creates a string that is a human-readable version of the value.</simpara></listitem>
          </itemizedlist>
        </para>

        <example xml:id="types.base.string.ex">
          <title>String type</title>
          <programlisting language="kl"><![CDATA[
operator entry() {
  String a = "A string";
  report(a);
  report("a has length " + a.length);
  String b = "Another string";
  report(b);
  String c = a + " and " + b;
  report(c);
  b += " now includes " + a;
  report(b);
}
          ]]></programlisting>
        </example>
        <informalfigure xml:id="types.base.string.ex.out">
          <simpara>Output:</simpara>
          <screen><![CDATA[
A string
a has length 8
Another string
A string and Another string
Another string now includes A string
          ]]></screen>
        </informalfigure>
      </section>
    </section>
    <section xml:id="types.derived">
      <title>Derived Types</title>
      
      <para>
        In addition to the base types, KL supports three classes of derived types: structures, arrays and dictionaries.
      </para>
      
      <section xml:id="structs">
        <title>Structures</title>
        
        <para>
          A <glossterm>structure</glossterm> is a collection of typed values that are placed together in memory.
        </para>
        
        <para>
          Structures are usually defined outside of KL using Fabric's <glossterm>registered type system</glossterm>, but they can also be declared in KL source code itself using the <code>struct</code> keyword:
          
          <informalexample>
            <programlisting language="kl"><![CDATA[
struct NewType {
  Float32 firstMember;
  String secondMember;
  Integer thirdMemberVarArray[];
};
            ]]></programlisting>
          </informalexample>

          Note the use of the variable-size array as the last member; derived types can nest arbitrarily.

          <note><simpara>All structure declarations in KL must be in the global scope; it is not possible to declare a structure within a function scope.</simpara></note>
        </para>
        
        <para>
          More details about structures:
          
          <itemizedlist>
            <listitem><simpara>Access to structure members is through the <code>.</code> (dot) operator, as in JavaScript.</simpara></listitem>
            <listitem><simpara>Currently, the structure members are <glossterm>packed</glossterm>, meaning that there is no space in member between the structure members.  In a future version of Fabric it will be possible to explicitly specify structure member alignment and packing.</simpara></listitem>
            <listitem><simpara>It is possible to overload operators and add <glossterm>methods</glossterm> to structures; see <xref linkend="methods" />.</simpara></listitem>
          </itemizedlist>
        </para>

        <example xml:id="types.derived.struct.use.ex">
          <title>Structure use</title>
          <programlisting language="kl"><![CDATA[
struct MyNewType {
  Integer i;
  String s;
};

function entry() {
  MyNewType mnt;
  mnt.s = "Hello!";
  mnt.i = 42;
  report(mnt);
}
          ]]></programlisting>
        </example>
        <informalexample xml:id="types.derived.struct.use.ex.out">
          <simpara>Output:</simpara>
          <screen><![CDATA[
{i:42,s:"Hello!"}
          ]]></screen>
        </informalexample>
      </section>
      <section xml:id="arrays">
        <title>Arrays</title>
      
        <para>
          An <glossterm>array</glossterm> is a sequence of values of the same type (referred to as the array's <glossterm>element type</glossterm>) that are indexed by integers and placed sequentially in memory.  KL supports three types of arrays: variable-size arrays, fixed-length arrays, and sliced arrays.  The details of each array type are discussed below.
        </para>
      
        <para xml:id="array-properties">
          Regardless of specific type, arrays in KL have several common behaviours:
      
          <itemizedlist>
              <listitem><para>
                Arrays are indexed using the <code>[</code>..<code>]</code> operator, exactly as in JavaScript and C.  The indexing of arrays is 0-based, again just as in JavaScript and C.
              
                <informalexample>
                  <programlisting language="kl"><![CDATA[
Size sizes[];    // Declare a variable-size array
sizes.push(42);  // Push some elements onto the end of the array
sizes.push(21);
sizes.push(3);
report(sizes[1]); // outputs "21"
                  ]]></programlisting>
                </informalexample>
              </para></listitem>
            
              <listitem><simpara>The size of an array is of type <code>Size</code> and the indexing operator takes an index of type <code>Index</code> (which is an alias for <code>Size</code>).</simpara></listitem>
            
              <listitem><para>
                Array declarations can be nested, and can be co-nested with other array types.
                <informalexample>
                  <programlisting language="kl"><![CDATA[
Integer b[][];  // A variable-size array of variable-size arrays of integers
Boolean a[2][]; // An array of 2 variable-size arrays of booleans
String c<>[];   // A sliced array of variable-size 
                  ]]></programlisting>
                </informalexample>
              </para></listitem>

              <listitem><simpara>
                Arrays are <glossterm>passed by reference</glossterm> into functions and operators, ie. they are not copied.  This means that it takes just a long to pass an array with one million elements to a function as it does to pass an array with one element.
              </simpara></listitem>
            
              <listitem><simpara>
                When running within a web browser, indexing into arrays using the indexing operator is bounds-checked; if the index runs off the end of the array, an exception is thrown.  When running Fabric from the command line, arrays are not bounds-checked.
              </simpara></listitem>            
          </itemizedlist>
        </para>
      
        <section xml:id="types.derived.arrays.variable">
          <title>Variable-Size Arrays</title>
        
          <para>
            A <glossterm>variable-size array</glossterm> is an array whose size can be changed at runtime.  Variable-size arrays are declared by appending <code>[]</code> to the name of the variable, parameter or structure member where they are declared, eg. <code>String strings[]</code>.
          </para>
          
          <para>
            Variable-size arrays have all the <link linkend="array-properties">properties of arrays</link> as well as the following additional properties:
          
            <itemizedlist>
              <listitem><para>
                The maximum size of a variable-size array is the maximum value of the <code>Size</code> type.  This means that variable-size arrays can be much larger on 64-bit machines than they can on 32-bit machines.
              </para></listitem>
            
              <listitem><para>
                Variable-size arrays are <glossterm>duplicate-on-modify</glossterm>, meaning that it is inexpensive to assign one variable-size array to another but as soon as one of the <quote>copies</quote> is modified the contents are duplciated.
              </para></listitem>
            
              <listitem><para>
                Variable-size arrays support the following methods:
                <itemizedlist>
                  <listitem><simpara>The <code>push(element)</code> method appends an element to the end of the variable-size array</simpara></listitem>
                  <listitem><simpara>The <code>size()</code> method returns the number of elements in the variable-size array</simpara></listitem>
                  <listitem><simpara>The <code>resize(newSize)</code> method resizes the array.  Any new elements at the end are initialized with the default value for the underlying type.</simpara></listitem>
                </itemizedlist>
              </para></listitem>
            </itemizedlist>
          </para>
        
          <example xml:id="types.derived.arrays.variable.ex">
            <title>Variable-size arrays</title>
            <programlisting language="kl"><![CDATA[
operator entry() {
  Integer a[];
  report("The array a has size " + a.size + " and value " + a);
  a.push(42);
  a.push(84);
  report("The array NOW has size " + a.size + " and value " + a);
  a.resize(4);
  report("The array NOW has size " + a.size + " and value " + a);
}
            ]]></programlisting>
          </example>
          <informalfigure xml:id="types.derived.arrays.variable.ex.out">
            <simpara>Output:</simpara>
            <screen><![CDATA[
The array a has size 0 and value []
The array NOW has size 2 and value [42,84]
The array NOW has size 4 and value [42,84,0,0]
            ]]></screen>
          </informalfigure>
        </section>
      
        <section xml:id="types.derived.arrays.fixed">
          <title>Fixed-Size Arrays</title>
        
          <para>
            A <glossterm>fixed-size array</glossterm> is an array whose size is fixed at runtime.  Fixed-size arrays have much faster performance characteristics than variable-size arrays, therefore should be used in place of variable-sized arrays when the size of an array is known at compile time.  Fixed-size arrays are declared by appending <code>[<replaceable>size</replaceable>]</code> to the name of the variable, parameter or structure member where they are declared, eg. <code>String strings[4]</code>.
          </para>
        
          <para>
            Fixed-size arrays have all the <link linkend="array-properties">properties of arrays</link> as well as the following additional properties:
          
            <itemizedlist>
              <listitem><para>
                The maximum size of a fixed-size array is the maximum value of the <code>Size</code> type.
                <warning><para>Since fixed-size arrays are allocated on the stack (instead of the heap), using very large fixed-size arrays may result in a stack overflow.  It is recommended that fixed-size arrays only be used for arrays that are reasonably small.</para></warning>              
              </para></listitem>
            
              <listitem><para>
                Fixed-size arrays are copied when they are assigned.
                <note><simpara>Unlike variable-size arrays, this behaviour of fixed-size arrays will never change.</simpara></note>
              </para></listitem>
            </itemizedlist>
          </para>
        
          <example xml:id="types.derived.arrays.fixed.ex">
            <title>Fixed-size arrays</title>
            <programlisting language="kl"><![CDATA[
function Float32 det(Float32 mat[2][2]) {
  return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
}

operator entry() {
  Float32 mat[2][2];
  mat[0][0] = 3.5;
  mat[0][1] = -9.2;
  mat[1][0] = -2.1;
  mat[1][1] = 8.6;
  report("The determinant of " + mat + " is " + det(mat));
}
            ]]></programlisting>
          </example>
          <informalexample xml:id="types.derived.arrays.fixed.ex.out">
            <simpara>Output:</simpara>
            <screen><![CDATA[
The determinant of [[3.5,-9.2],[-2.1,8.6]] is 10.78
            ]]></screen>
          </informalexample>
        </section>

        <section xml:id="types.derived.arrays.sliced">
          <title>Sliced Arrays</title>
        
          <para>
            A <glossterm>sliced array</glossterm> is an array whose size is fixed when it is created.  Sliced arrays have the unique feature that new sliced arrays can be created that access a sub-range of the elements of an existing sliced array.  Sliced arrays are primarily used for operator parameters bound to sliced data inside Fabric's dependency graph, but can also be used on their own within KL.  Sliced arrays are declared by appending <code>&lt;&gt;</code> to the name of the variable, parameter or structure member where they are declared, eg. <code>String strings&lt;&gt;</code>.
          </para>
          
          <para>
            Sliced arrays have all the <link linkend="array-properties">properties of arrays</link> as well as the following additional properties:
          
            <itemizedlist>
              <listitem><para>
                Within KL, sliced arrays can only be created using one of two syntaxes, shown in the example below:
                
                <informalexample>
                  <programlisting language="kl"><![CDATA[
Size sizes<>(8);                // Create a sliced array of 8 elements of type Size
for (Size i=0; i<8; ++i)
  sizes[i] = i;
  
Size subSizes<>( sizes, 2, 4 ); // A sliced array of elements of type Size that accesses
                                // elements 2 through 5 (inclusive) of the underlying
                                // sliced array
report(subSizes[0]);            // will output '2'
report(subSizes.size);          // will output '4'
                  ]]></programlisting>
                </informalexample>
              </para></listitem>
            
              <listitem><para>
                Sliced arrays as a whole cannot be the target of an assignment.  However, an element of a sliced array (accessed through the <code>[</code>...<code>]</code> index operator) can be assigned to.
              </para></listitem>
            
              <listitem><para>
                Sliced arrays support the following methods:
                <itemizedlist>
                  <listitem><simpara>The <code>size()</code> method returns the number of elements in the sliced array.  If a sliced array refers to a subrange of another sliced array, the value returned is the size of the subrange.</simpara></listitem>
                </itemizedlist>
              </para></listitem>
            </itemizedlist>
          </para>
        
          <example xml:id="types.derived.arrays.sliced.ex">
            <title>Sliced arrays</title>
            <programlisting language="kl"><![CDATA[
operator entry() {
  String strings<>(8);
  for (Size i=0; i<8; ++i)
    strings[i] = "string " + (i+1);
  report("strings = " + strings);
  
  String subStrings<>(strings, 2, 4);
  report("subStrings = " + subStrings);
  
  report("Replacing subStrings element...");
  subStrings[3] = "replaced string";
  report("subStrings = " + subStrings);
  report("strings = " + strings);
}
            ]]></programlisting>
          </example>
          <informalfigure xml:id="types.derived.arrays.sliced.ex.out">
            <simpara>Output:</simpara>
            <screen><![CDATA[
strings = ["string 1","string 2","string 3","string 4","string 5","string 6","string 7","string 8"]
subStrings = ["string 3","string 4","string 5","string 6"]
Replacing subStrings element...
subStrings = ["string 3","string 4","string 5","replaced string"]
strings = ["string 1","string 2","string 3","string 4","string 5","replaced string","string 7","string 8"]
            ]]></screen>
          </informalfigure>
        </section>
      </section>
      <section xml:id="dicts">
        <title>Dictionaries</title>
      
        <para>
          KL supports key-value pair dictionaries.  The type of the key of a dictionary can be any of the KL base types (e.g. <code>Boolean</code>, <code>String</code>, or any integer or floating-point type) and the type of the value can be any type.  Dictionaries are declared by appending <code>[<replaceable>KeyType</replaceable>]</code> to the variable, parameter or member name.  For example:
        
          <informalexample><programlisting language="kl"><![CDATA[
String scalarToString[Float32];     // A Float32-to-String dictionary
Boolean integerToBoolean[Integer];  // An Integer-to-Boolean dictionary
          ]]></programlisting></informalexample>
        </para>

        <para>
          Dictionaries in KL have the following properties:
        
          <itemizedlist>
            <listitem><para>
              Dictionaries are <glossterm>duplicate-on-modify</glossterm>, meaning that it is inexpensive to assign one dictionary to another but as soon as one of the <quote>copies</quote> is modified the contents are duplciated.
            </para></listitem>
          
            <listitem><para>
              Dictionaries can be nested, and can be co-nested with array types.  For example:
            
              <informalexample><programlisting language="kl"><![CDATA[
Integer b[String][2]; // An String-to-Fixed-Length-Integer-Array dictionary
Boolean a[][Integer]; // A variable array of Integer-to-Boolean dictionaries
              ]]></programlisting></informalexample>
            </para></listitem>
          
            <listitem><para>There is no limit to the size of dictionaries other than available memory</para></listitem>
            <listitem xml:id="dict-indexing"><para>
              Dictionaries support indexing using the <code>[<replaceable>key</replaceable>]</code> indexing operator to both return the element at the give key or assign to the element at the given key.  When retrieving a value from a dictionary, if there is no value for the given key then an exception is thrown.</para></listitem>
            <listitem><para>Dictionaries support the <code>has(<replaceable>key</replaceable>)</code> method that returns a <code>Boolean</code> value indicating whether there is a value in the dictionary for the given key.</para></listitem>
            <listitem><para>Dictionaries support the <code>delete(<replaceable>key</replaceable>)</code> method that deletes the value for the given key.  If there is no value for the given key, nothing happens.</para></listitem>

            <listitem><para>
              Dictionaries can be iterated over using JavaScript-like <code>in</code> iteration:
            
              <informalexample><programlisting language="kl"><![CDATA[
String dict[String];
for (k in dict)
  report("dict[" + k + "] = " + dict[k]);
              ]]></programlisting></informalexample>
            
              For improved performance, both the key and value can be made available through <code>in</code> iteration.  The value can be assigned to if and only if the dictionary can be assigned to.  For example:
            
              <informalexample><programlisting language="kl"><![CDATA[
String dict[String];
for (k, v in dict)
  report("dict[" + k + "] = " + v);
              ]]></programlisting></informalexample>
            </para></listitem>

            <listitem><para>
              Insertion order (not sort order!) is the iteration order for dictionaries, just as for JavaScript objects.

              <informalexample><programlisting language="kl"><![CDATA[
operator entry() {
  String numbers[Integer];
  numbers[3] = "three";
  numbers[2] = "two";
  report(numbers); // outputs '{3:"three",2:"two"}'
  numbers[1] = "one";
  report(numbers); // outputs '{3:"three",2:"two",1:"one"}'
}
              ]]></programlisting></informalexample>
            </para></listitem>
          </itemizedlist>
        </para>

        <example xml:id="types.derived.dicts.ex">
          <title>Dictionaries</title>
          <programlisting language="kl"><![CDATA[
operator entry() {
  Float32 a[String];
  a['pi'] = 3.14;
  a['e'] = 2.71;
  report("a is:");
  for ( k, v in a ) {
    report("a['" + k + "'] = " + v);
  }
  a.delete('pi');
  report("a is now:");
  for ( k, v in a ) {
    report("a['" + k + "'] = " + v);
  }
}
          ]]></programlisting>
        </example>
        <informalfigure xml:id="types.derived.dicts.ex.out">
          <simpara>Output:</simpara>
          <screen><![CDATA[
a is:
a['pi'] = 3.14
a['e'] = 2.71
a is now:
a['e'] = 2.71
        ]]></screen>
        </informalfigure>
      </section>
      <section xml:id="map-reduce-types">
        <title>Map-Reduce Types</title>
        
        <para>
          There are two additional derived types used exclusively for work within Fabric's map-reduce framework, namely:
          
          <itemizedlist>
            <listitem><para><code>ValueProducer&lt;<replaceable>Type</replaceable>&gt;</code></para></listitem>
            <listitem><para><code>ArrayProducer&lt;<replaceable>Type</replaceable>&gt;</code></para></listitem>
          </itemizedlist>
          
          For more information, see <xref linkend="map-reduce" />.
        </para>
      </section>
    </section>
    <section xml:id="types.aliases">
      <title>Type Aliases</title>
      
      <para>
        The <code>alias</code> statement can be used to alias a type to make code more readable.  Its syntax is the same as a variable declaration:
        
        <programlisting language="kl"><![CDATA[
alias Integer Int32;        // Int32 is now an alias for Integer
alias Float32 float;        // float is now an alias for Float32
alias Float32 Mat22[2][2];  // Mat22 is now an alias for Float32[2][2], ie. a size-2-array-of-size-2-arrays-of-Float32
        ]]></programlisting>
        
        <code>alias</code> statements must appear within the global scope of a KL program.
      </para>
      
      <example xml:id="types.aliases.ex">
        <title>Type aliases</title>
        <programlisting language="kl"><![CDATA[
alias Float32 Mat22[2][2];

operator entry() {
  Mat22 mat22;
  report(mat22);
}
        ]]></programlisting>
      </example>
      <informalfigure xml:id="types.aliases.ex.out">
        <simpara>Output:</simpara>
        <screen><![CDATA[
[[0,0],[0,0]]
      ]]></screen>
      </informalfigure>
    </section>
    <section xml:id="types.data">
      <title>The <code>Data</code> Type and the <code>data</code> and <code>dataSize</code> Methods</title>

      <para>
        When interfacing with external libraries such as OpenGL, it is sometimes necessary to get direct access to the data underlying a value.  An example is a library call that takes a pointer to data.  KL itself has no notion of pointers; instead, KL has the concept of the <code>Data</code> type whose value is a pointer to data which can be passed to an external library call.
      </para>

      <para>
        Most values in KL have a built-in method called <code>data</code> that returns a value of type <code>Data</code>, and a built-in method called <code>dataSize</code> that returns a value of type <code>Size</code>.  The value returned by the <code>data</code> method is a pointer to the data underlying the value, and the value returned by the <code>dataSize</code> method is the number of bytes the value occupies in memory.  The only values which do not support the <code>data</code> and <code>dataSize</code> methods are dictionaries as well as other derived types that do not lay out their elements or members contiguously in memory.
        
        <programlisting language="kl"><![CDATA[
Integer integers[];
report(integers.data);  // OK: integers are contiguous in memory
String strings[];
report(strings.data);   // ERROR: string data is not contiguous in memory
        ]]></programlisting>
      </para>

      <para>
        Unlike pointers in C, the values returned by <code>data</code> methods cannot be inspected or used in any expressions; the only thing which can be done is a cast to <code>Boolean</code>, which will be <code>true</code> if and only if the <code>Data</code> value points to a value whose size is greater than zero.  However, these <code>Data</code> values can be passed directly to external library functions provided by Fabric itself or Fabric extensions, where they are used as pointers to data in memory.
      </para>

      <note><para>
        For values of type <code>String</code>, the value returned by <code>dataSize</code> includes a null terminator that is automatically appended to the string by Fabric; this is so that the string data can be directly used in C library calls as a regular C string.  If you want to pass the number of characters in the string, pass <code>string.length</code> instead.
      </para></note>

      <example xml:id="types.data.ex">
        <title><code>Data</code> values and the <code>data</code> and <code>dataSize</code> methods</title>
        <programlisting language="kl"><![CDATA[
operator entry() {
  String s;
  report("s = '" + s + "'");
  report("s.data = " + s.data);
  report("Boolean(s.data) = " + Boolean(s.data));
  report("s.dataSize = " + s.dataSize);
  s = "Hello";
  report("s = '" + s + "'");
  report("s.data = " + s.data);
  report("Boolean(s.data) = " + Boolean(s.data));
  report("s.dataSize = " + s.dataSize);
}
        ]]></programlisting>
      </example>
      <informalfigure xml:id="types.data.ex.out">
        <simpara>Output:</simpara>
        <screen><![CDATA[
s = ''
s.data = <Opaque>
Boolean(s.data) = false
s.dataSize = 1
s = 'Hello'
s.data = <Opaque>
Boolean(s.data) = true
s.dataSize = 6
      ]]></screen>
      </informalfigure>
    </section>
  </chapter>
  <chapter xml:id="globals">
    <title>Functions and Other Global Declarations</title>

    <section xml:id="functions">
      <title>Function Definitions</title>

      <para>
        Function definitions in KL are much the same as the <quote>traditional</quote> function definition syntax in JavaScript, with the following key differences:

        <itemizedlist>
          <listitem><para>The return type and the type of each function parameter must be explicitly declared.  If a function does not return a value, the return type must be omitted.</para></listitem>
          <listitem><para>The parameter declarations may additionally declare the parameter as input (read-only; the default) by preceding the type by <code>in</code> or input-output (read-write) by preceding the value by <code>io</code>.</para></listitem>
        </itemizedlist>
      </para>

      <example xml:id="functions.ex">
        <title>Function definitions</title>
        <programlisting language="kl"><![CDATA[
// Function returning a value and using only
// input parameters

function Float32 add(Float32 lhs, Float32 rhs) {
  return lhs + rhs;
}

// Function not returning a value and using both
// input and input-output parameters

function add(in Float32 lhs, in Float32 rhs, io Float32 result) {
  result = lhs + rhs;
}
        ]]></programlisting>
      </example>
    </section>
    <section xml:id="function-calls">
      <title>Function Invocations</title>
      
      <para>
        Function invocations (<quote>calls</quote>) are made using the same syntax as JavaScript, namely by appending a comma-delimited list of arguments, surrounded by parentheses, to the function name.
      </para>
      
      <example xml:id="functions.call.ex">
        <title>Function call</title>
        <programlisting language="kl"><![CDATA[
function Integer add(Integer lhs, Integer rhs) {
  return lhs + rhs;
}

operator entry() {
  report("2 plus 2 is " + add(2, 2));
}
        ]]></programlisting>
      </example>
      <informalfigure xml:id="functions.call.ex.out">
        <simpara>Output:</simpara>
        <screen><![CDATA[
2 plus 2 is 4
        ]]></screen>
      </informalfigure>
    </section>
    <section xml:id="prototypes">
      <title>Function Prototypes</title>
      
      <para>
        A <glossterm>function prototype</glossterm> in KL is a function declaration that is missing a body.  Providing a function prototype allows the function to be called before it is defined.  This is useful under two circumstances:
        
        <itemizedlist>
          <listitem><para>
            When two or more functions call each other.  Such functions are sometimes referred to as <glossterm>co-recursive</glossterm>.
            
            <example xml:id="prototypes.ex">
              <title>Co-recursion using a prototype</title>
              <programlisting language="kl"><![CDATA[
// Function prototype for 'two', so that 'one' can call it before it is defined
function two(Integer n);

// The function 'one' calls 'two' even though it is not yet defined
function one(Integer n) {
  report("one");
  if (n > 0)
    two(n - 1);
}

// The definition of the function 'two' comes after its prototype
function two(Integer n) {
  report("two");
  if (n > 0)
    one(n - 1);
}

operator entry() {
  one(4);
}
              ]]></programlisting>
            </example>
            <informalfigure xml:id="prototypes.ex.out">
              <simpara>Output:</simpara>
              <screen><![CDATA[
one
two
one
two
one
              ]]></screen>
            </informalfigure>
          </para></listitem>
          
          <listitem><para>
            When a function definition is provided by a Fabric extension.  The name of the symbol of the function in the Fabric extension is provided by appending <code>= "<replaceable>symbol name</replaceable>"</code> or <code>= '<replaceable>symbol name</replaceable>'</code> to the function prototype.
            
            <example xml:id="prototypes.external.ex">
              <title>External function</title>
              <programlisting language="kl"><![CDATA[
// The prototype 'libc_perror' is linked to an external function 'perror'
function libc_perror(Data cString) = 'perror';

// The KL function 'perror' is what KL functions actually call
function perror(String string) {
  libc_perror(string.data);
}

operator entry() {
  perror("something that caused an error");
}
              ]]></programlisting>
            </example>
          </para></listitem>
        </itemizedlist>
      </para>
    </section>
    <section xml:id="built-in-functions">
      <title>Built-in Functions</title>
      
      <para>
        KL has several built-in functions that are available to all KL programs.
      </para>
      
      <section xml:id="built-in-functions.report">
        <title>The <code>report</code> Function</title>
        
        <para>
          The <code>report</code> function outputs a message to wherever messages are sent from KL; when KL is used from Fabric running in a browser this is to the JavaScript console, whereas when Fabric is used from the command line or when the KL tool is used the output is sent to standard error and standard output respectively.  A newline is appended to the message when it is sent.
        </para>
        
        <para>
          The prototype of the <code>report</code> function is:
          
          <programlisting language="kl"><![CDATA[
function report(String message);
          ]]></programlisting>
        </para>
        
        <para>
          Within Fabric the report function is primarily used for debugging, whereas it is used for general output from the KL tool.
        </para>
      </section>
      <section xml:id="built-in-functions.numerical">
        <title>Numerical Functions</title>
        
        <para>
          KL has support for many of the <quote>standard library</quote> numerical functions from C.  Each of these functions has a version that takes a parameter or parameters of type <code>Float32</code>, and another that takes a parameter or parameters of type <code>Float64</code>.  The one that is called is chosen using polymorphism best-match rules; see <xref linkend="polymorphism" />.
        </para>
        
        <section  xml:id="built-in-functions.numerical.trig">
          <title>Trigonometric Functions</title>
          <variablelist>
            <varlistentry xml:id="built-in-functions.numerical.trig.sin">
              <term><code>sin(x)</code></term>
              <listitem><simpara>Returns the sine of the argument <code>x</code>.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.trig.cos">
              <term><code>cos(x)</code></term>
              <listitem><simpara>Returns the cosine of the argument <code>x</code>.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.trig.tan">
              <term><code>tan(x)</code></term>
              <listitem><simpara>Returns the tangent of the argument <code>x</code>.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.trig.asin">
              <term><code>asin(x)</code></term>
              <listitem><simpara>Returns the arcsine of the argument <code>x</code>.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.trig.acos">
              <term><code>acos(x)</code></term>
              <listitem><simpara>Returns the arccosine of the argument <code>x</code>.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.trig.atan">
              <term><code>atan(x)</code></term>
              <listitem><simpara>Returns the arctangent of the argument <code>x</code>.  <code>atan(x)</code> doesn't work for large <code>x</code> and can only return values in the range <inlineequation><mathphrase>(-&pi;/2,&pi;/2]</mathphrase></inlineequation>; use the <code>atan2</code> function instead when possible.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.trig.atan2">
              <term><code>atan2(y, x)</code></term>
              <listitem><para>Returns the arctangent of the ratio <inlineequation><mathphrase>y/x</mathphrase></inlineequation>; the result is in the range  <inlineequation><mathphrase>(-&pi;,&pi;]</mathphrase></inlineequation>.</para></listitem>
            </varlistentry>
          </variablelist>
        </section>
        
        <section  xml:id="built-in-functions.numerical.exp">
          <title>Exponential and Logarithmic Functions</title>
          <variablelist>
            <varlistentry xml:id="built-in-functions.numerical.exp.pow">
              <term><code>pow(x, y)</code></term>
              <listitem><para>Returns the value of <inlineequation><mathphrase>x<superscript>y</superscript></mathphrase></inlineequation>.</para></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.exp.exp">
              <term><code>exp(x)</code></term>
              <listitem><simpara>Returns the value of <inlineequation><mathphrase>e<superscript>y</superscript></mathphrase></inlineequation> where e is the base of the natural logarithm (2.7182818...).</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.exp.log">
              <term><code>log(x)</code></term>
              <listitem><simpara>Returns the natural logarithm of <code>x</code>.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.exp.log10">
              <term><code>log10(x)</code></term>
              <listitem><simpara>Returns the common (base 10) logarithm of <code>x</code>.</simpara></listitem>
            </varlistentry>
          </variablelist>
        </section>
        
        <section  xml:id="built-in-functions.numerical.nt">
          <title>Non-Transcendental Functions</title>
          <variablelist>
            <varlistentry xml:id="built-in-functions.numerical.nt.abs">
              <term><code>abs(x)</code></term>
              <listitem><para>Returns the absolute value of <code>x</code>.</para></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.nt.round">
              <term><code>round(x)</code></term>
              <listitem><simpara>Returns the value of <code>x</code> rounded to the nearest whole (fractional part of zero) floating-point number.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.nt.floor">
              <term><code>floor(x)</code></term>
              <listitem><simpara>Returns the greatest whole floating-point number less than or equal to <code>x</code>.</simpara></listitem>
            </varlistentry>
            <varlistentry xml:id="built-in-functions.numerical.nt.ceil">
              <term><code>ceil(x)</code></term>
              <listitem><simpara>Returns the smallest whole floating-point number greater than or equal to <code>x</code>.</simpara></listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
    </section>
    <section xml:id="polymorphism">
      <title>Function Polymorphism</title>
      
      <para>
        KL support <glossterm>compile-type function polymorphism</glossterm>.  This means that you can have multiple functions with the same name so long as they have a different number of parameters or those parameters differ by type and/or their input versus input-output qualification.

        <note><para>It is an error to have two functions with the same name that take exactly the same parameter types but return different types</para></note>
      </para>

      <para>
        When a function call is made in KL source, if there are multiple functions with the same name then the KL compiler uses a best-match system to determine which function to call.  Exact parameter type matches are always prioritized over type casts.  If the compiler is unable to choose a unique best match then an error will be reported showing the ambiguity.
      </para>

      <example xml:id="polymorphism.ex">
        <title>Function polymorphism</title>
        <programlisting language="kl"><![CDATA[
function display(Integer a) {
  report("integer value is " + a);
}

function display(String s) {
  report("string value is '" + s + "'");
}

operator entry() {
  Integer integer = 42;
  display(integer);
  
  String string = "hello";
  display(string);
  
  Byte byte = 64;
  display(byte);
}
        ]]></programlisting>
      </example>
      <informalfigure xml:id="polymorphism.ex.out">
        <simpara>Output:</simpara>
        <screen><![CDATA[
integer value is 42
string value is 'hello'
integer value is 64
        ]]></screen>
      </informalfigure>
    </section>
    <section xml:id="operators">
      <title>Operators</title>
      
      <para>
        The <code>operator</code> keyword in KL is used to mark functions that are to be used as entry points into KL from the Fabric dependency graph.  Operators are declared in the same way as functions except that they must not return a value.  Fabric does special type-checking to ensure that operators are bound properly to nodes in a Fabric dependency graph.
      </para>

      <example xml:id="operators.ex">
        <title>Operator definition</title>
        <programlisting language="kl"><![CDATA[
operator addElements(io Float32 lhs, io Float32 rhs, io Float32 result) {
  result = lhs + rhs;
}
        ]]></programlisting>
      </example>
    </section>
    <section xml:id="constructors">
      <title>Constructors</title>
      
      <para>
        A <glossterm>constructor</glossterm> for a user-defined type is a function that initializes a value with the given the type from other values.
      </para>
      
      <section xml:id="constructors.declaration">
        <title>Constructor Declarations</title>
        
        <para>
          A constructor is declared as a function whose name is the name of the user-defined type.  The function can take any number of parameters, all of which must be input parameters; constructors cannot take input-output parameters.  Constructors cannot return values.
        </para>
        
        <para>
          Within the body of a constructor definition, the value being initialized is referred to with the <code>this</code> keyword; its members are accessed using the <code>.</code> operator.  In this context, <code>this</code> is always read-write, ie. its members can be modified.
        </para>

        <example xml:id="constructors.declaration.ex">
          <title>Constructor declarations</title>
          <programlisting language="kl"><![CDATA[
struct Complex32 {
  Float32 re;
  Float32 im;
};

// The empty constructor; 
function Complex32() {
  this.re = this.im = 0.0;
}

// Construct a Complex from a Float32
function Complex32(Float32 x) {
  this.re = x;
  this.im = 0.0;
}

// Construct a Complex from two Float32s
function Complex32(Float32 x, Float32 y) {
  this.re = x;
  this.im = y;
}

operator entry() {
  report(Complex32());
  report(Complex32(3.141));
  report(Complex32(3.141, 2.718));
}
          ]]></programlisting>
        </example>
        
        <informalfigure xml:id="constructors.declaration.ex.out">
          <simpara>Output:</simpara>
          <screen><![CDATA[
{re:0,im:0}
{re:3.141,im:0}
{re:3.141,im:2.718}
          ]]></screen>
        </informalfigure>
      </section>
      
      <section xml:id="constructors.invocation">
        <title>Constructor Invocation</title>
        
        <para>
          Constructors are invoked in one of several ways:
          
          <itemizedlist>
            <listitem xml:id="constructors.invocation.naked">
              <para>
                If a variable is declared without any initialization, the <glossterm>empty constructor</glossterm> (ie. the constructor that takes no parameters) is invoked to initialize the variable.  This is referred to as <glossterm>naked initialization</glossterm>.
              
                <example xml:id="constructors.invocation.naked.ex">
                  <title>Constructor invocation using naked initialization</title>
                  <programlisting language="kl"><![CDATA[
  struct MyType {
    Integer n;
    Float32 x;
  };

  // The empty constructor
  function MyType() {
    this.n = 42;
    this.x = 3.141;
  }

  operator entry() {
    MyType myType; // invokes the empty constructor
    report(myType);
  }
                  ]]></programlisting>
                </example>
                <informalfigure xml:id="constructors.invocation.naked.ex.out">
                  <simpara>Output:</simpara>
                  <screen><![CDATA[
  {n:42,x:3.141}
                  ]]></screen>
                </informalfigure>
              </para>
            </listitem>
            <listitem xml:id="constructors.invocation.assignment">
              <para>
                If a variable is assigned to as part of its declaration, a single-parameter constructor is invoked.  This is referred to as <glossterm>assignment initialization</glossterm>.  If there isn't an exact match for the type of the value assigned, best-match polymorphism rules are used to choose the constructor to invoke.
              
                <example xml:id="constructors.invocation.assignment.ex">
                  <title>Constructor invocation using assignment initialization</title>
                  <programlisting language="kl"><![CDATA[
  struct MyType {
    String string;
  };

  // Construct from a string
  function MyType(String string) {
    this.string = "The string was '" + string + "'";
  }

  // Construct from a scalar
  function MyType(Float64 float64) {
    this.string = "The float64 was " + float64;
  }

  operator entry() {
    // Construct MyType from String value
    MyType myTypeFromString = "foo";
    report(myTypeFromString);
  
    // Construct MyType from Float64 value
    MyType myTypeFromFloat64 = 2.718;
    report(myTypeFromFloat64);
  
    // There is no constructor that takes a Boolean but
    // there is a cast from Boolean to String
    MyType myTypeFromBoolean = true;
    report(myTypeFromBoolean);
  }
                  ]]></programlisting>
                </example>
                <informalfigure xml:id="constructors.invocation.assignment.ex.out">
                  <simpara>Output:</simpara>
                  <screen><![CDATA[
  {string:"The string was 'foo'"}
  {string:"The float64 was 2.718"}
  {string:"The string was 'true'"}
                  ]]></screen>
                </informalfigure>
              </para>
            </listitem>
            <listitem xml:id="constructors.invocation.call">
              <para>
                If a variable is <quote>called</quote> (ie. using function call syntax) as part of its declaration, the constructor taking the given arguments is invoked.  This is referred to as <glossterm>invocation initialization</glossterm>.  If there isn't an exact match for the arguments passed to the call, best-match polymorphism rules are used to choose the constructor to invoke.
              
                <example xml:id="constructors.invocation.call.ex">
                  <title>Constructor invocation using invocation initialization</title>
                  <programlisting language="kl"><![CDATA[
  struct Vec2 {
    Float64 x;
    Float64 y;
  };

  // Construct from two scalars
  function Vec2(Float64 x, Float64 y) {
    this.x = x;
    this.y = y;
  }

  operator entry() {
    Vec2 vec2FromFloat64s(3.141, 2.718);
    report(vec2FromFloat64s);
    Vec2 vec2FromIntegers(42, -7);  // Uses best-match polymorphism to convert Integer to Float64
    report(vec2FromIntegers);
  }
                  ]]></programlisting>
                </example>
                <informalfigure xml:id="constructors.invocation.call.ex.out">
                  <simpara>Output:</simpara>
                  <screen><![CDATA[
  {x:3.141,y:2.718}
  {x:42,y:-7}
                  ]]></screen>
                </informalfigure>
              </para>
            </listitem>
            <listitem xml:id="constructors.invocation.temp">
              <para>
                If a function call is performed where the name of the function is the name of the type, the constructor taking the given arguments is invoked to create a temporary value of the named type.  If there isn't an exact match for the arguments passed to the call, best-match polymorphism rules are used to choose the constructor to invoke.
              
                <note><para>KL does not distinguish between construction and casting.  Casting a value to a different type is the same as constructing a temporary value of the given type and initializing it, using the appropriate constructor, from the given value.</para></note>
              
                <example xml:id="constructors.invocation.temp.ex">
                  <title>Constructor invocation using temporary value</title>
                  <programlisting language="kl"><![CDATA[
struct Vec2 {
  Float64 x;
  Float64 y;
};

// Construct from two scalars
function Vec2(Float64 x, Float64 y) {
  this.x = x;
  this.y = y;
}

operator entry() {
  report(Vec2(3.141, 2.718));
  report(Vec2(42, -7));  // Uses best-match polymorphism to convert Integer to Float64
}
                  ]]></programlisting>
                </example>
                <informalfigure xml:id="constructors.invocation.temp.ex.out">
                  <simpara>Output:</simpara>
                  <screen><![CDATA[
{x:3.141,y:2.718}
{x:42,y:-7}
                  ]]></screen>
                </informalfigure>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <section xml:id="destructors">
      <title>Destructors</title>
      
      <para>
        A destructor is a function that is called when a variable goes out of scope and its resources are freed.  Destructors are declared by prepending <code>~</code> in front of the name of the type and using it as a function.  Destructors cannot take any parameters or return values.  The destructor is called before the value is freed so that its members are still accessible.  In the body of the destructor the value is referred to using the <code>this</code> keyword; the value is input-ouput, ie. it can be modified in the destructor.
      </para>
      
      <example xml:id="destructors.ex">
        <title>Destructor</title>
        <programlisting language="kl"><![CDATA[
struct MyType {
  String s;
};

// Empty constructor
function MyType() {
  this.s = "foo";
  report("Creating MyType: this.s = " + this.s);
}

// Destructor
function ~MyType() {
  report("Destroying MyType: this.s = " + this.s);
}

operator entry() {
  MyType myType;
}
        ]]></programlisting>
      </example>
      <informalfigure xml:id="destructors.ex.out">
        <simpara>Output:</simpara>
        <screen><![CDATA[
Creating MyType: this.s = foo
Destroying MyType: this.s = foo
        ]]></screen>
      </informalfigure>
    </section>
    <section xml:id="methods">
      <title>Methods</title>

      <para>
        A <glossterm>method</glossterm> is a function that operates on a user-defined structure.  It uses a slightly different (and more suggestive) syntax than plain function calls for the case that the function call is strongly tied to a value whose type is a user-defined structure.
      </para>
      
      <section xml:id="method-defs">
        <title>Method Definitions</title>
        
        <para>
          If <code><replaceable>Type</replaceable></code> is a structure or alias, then a method named <code><replaceable>methodName</replaceable></code> can be added to the type using the following syntax:
        
          <programlisting language="kl">
// A method that returns a value
function <replaceable>ReturnType</replaceable> <replaceable>Type</replaceable>.<replaceable>methodName</replaceable>(<replaceable>parameter list</replaceable>) {
  <replaceable>method body</replaceable>
}

// A method that does not return a value
function <replaceable>Type</replaceable>.<replaceable>methodName</replaceable>(<replaceable>parameter list</replaceable>) {
  <replaceable>method body</replaceable>
}
          </programlisting>
        
          Within the method body, <code>this</code> refers to the value on which the method is called.  <code>this</code> is read-only if the method returns a value and is read-write if the method does not return a value.
        </para>
      </section>
      
      <section xml:id="method-calls">
        <title>Method Invocation</title>

        <para>
          If <code><replaceable>value</replaceable></code> is a value of type <code><replaceable>Type</replaceable></code> then the method <code><replaceable>methodName</replaceable></code> can be invoked on <code><replaceable>value</replaceable></code> using the expression <code><replaceable>value</replaceable>.<replaceable>methodName</replaceable>(<replaceable>argument list</replaceable>)</code>.  If a method takes no parameters, then it is optional to use parentheses when calling it.
        </para>
        
        <para>
          Just as there can be multiple functions with the same name, a given type can have multiple methods with the same name.  When deciding which method to invoke, the usual best-match rules apply.
        </para>

        <example xml:id="methods.ex">
          <?dbfo keep-together="auto" ?>
          <title>Method definition and invocation</title>
          <programlisting language="kl"><![CDATA[
struct Type {
  Integer a;
  Float32 b;
};

// Add method desc to Type
function String Type.desc() {
  return "a:" + this.a + "; b:" + this.b;
}

operator entry() {
  Type t;
  t.a = 1;
  t.b = 3.14;
  // Both report 'a:1; b:3.14'
  report(t.desc());
  report(t.desc);
}
          ]]></programlisting>
          <simpara>Output:</simpara>
          <screen><![CDATA[
a:1; b:3.14
a:1; b:3.14
          ]]></screen>
        </example>
      </section>
      <section>
        <title>Methods Taking Read-Only or Read-Write Values for <code>this</code></title>

        <para>
          Whether <code>this</code> is read-only or read-write (in compiler terms, an r-value or an l-value) can be controlled on a per-method basis.  By default, <code>this</code> is read-only when the method returns a value and read-write when the method does not return a value.  This can be controlled by suffixing the method name with <code>!</code> (exclamation mark) to force <code>this</code> to be read-write or <code>?</code> (question mark) to force <code>this</code> to be read-only.
        </para>

        <example>
          <?dbfo keep-together="auto" ?>
          <title>Explicit read-only or read-write <code>this</code> in methods</title>
          <programlisting language="kl"><![CDATA[
struct Vec2 {
  Float64 x;
  Float64 y;
};

function Vec2(in Float64 x, in Float64 y) {
  this.x = x;
  this.y = y;
}

// Explicitly make 'this' read-only
function Vec2.getComponents?(io Float64 x, io Float64 y) {
  x = this.x;
  y = this.y;
}

function Float64 Vec2.normSq() {
  return this.x*this.x + this.y*this.y;
}

function Float64 Vec2.norm() {
  return sqrt(this.normSq());
}

function Vec2./=(in Float64 value) {
  this.x /= value;
  this.y /= value;
}

// Explicitly make 'this' read-write
function Float64 Vec2.normalizeAndReturnOldNorm!() {
  Float64 oldNorm = this.norm();
  this /= oldNorm;
  return oldNorm;
}

operator entry() {
  Vec2 vec2(3.14, 2.71);

  Float64 x, y;
  vec2.getComponents(x, y);
  report("vec2.getComponents: x=" + x + ", y=" + y);

  report("vec2.normalizeAndReturnOldNorm returned " + vec2.normalizeAndReturnOldNorm());
  report("vec2 is now " + vec2);
}
          ]]></programlisting>
          <simpara>Output:</simpara>
          <screen><![CDATA[
vec2.getComponents: x=3.14, y=2.71
vec2.normalizeAndReturnOldNorm returned 4.147734321289154
vec2 is now {x:0.7570398093926274,y:0.6533687526923632}
          ]]></screen>
        </example>
      </section>
    </section>
    <section xml:id="op-overloads">
      <title>Overloaded Operators</title>
      
      <para>
        KL allows overloading of binary operators and compound assignment operators for custom types (ie. specified through <code>struct</code>).
      </para>
        
      <section xml:id="op-overloads.binop">
        <title>Binary Operator Overloads</title>
      
        <para>
          Binary operators can be overloaded using the following syntax:
      
          <example xml:id="op-overloads.binop.ex">
            <title>Binary operator overload</title>
            <programlisting language="kl"><![CDATA[
struct Type {
  Integer a;
  Float32 b;
};

function Type +(Type lhs, Type rhs) {
  Type result;
  result.a = lhs.a + rhs.a;
  result.b = lhs.b + rhs.b;
  return result;
}

operator entry() {
  Type t1; t1.a = 42; t1.b = 3.14; report(t1);
  Type t2; t2.a = 7; t2.b = 2.72; report(t2);
  Type t3 = t1 + t2; report(t3);
}
            ]]></programlisting>
          </example>
          <informalfigure xml:id="op-overloads.binop.ex.out">
            <simpara>Output:</simpara>
            <screen><![CDATA[
{a:42,b:3.14}
{a:7,b:2.72}
{a:49,b:5.86}
            ]]></screen>
          </informalfigure>

          Any of the binary arithmetic (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> and <code>%</code>), bitwise (<code>|</code>, <code>&amp;</code>, <code>^</code>, <code>&lt;&lt;</code> and <code>&gt;&gt;</code>) and comparison (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> and <code>&gt;=</code>) operators can be overloaded.
        </para>
      
        <para>
          Binary operator overloads are subject to the following restrictions:
        
          <itemizedlist>
            <listitem><simpara>They must take exactly two parameters.  The two parameters may be of any type and the two types may be different but they must both be input-only parameters.</simpara></listitem>
            <listitem><simpara>They must return a value.  However, the return type can be any type.</simpara></listitem>
          </itemizedlist>
        </para>
      </section>
    
      <section xml:id="overloading-compound-ass-ops">
        <title>Compound Assignment Overloads</title>
      
        <para>
          KL provides a default plain assignment for custom types which simply assigns each of the members.  It also provides a default <glossterm>compound assignment</glossterm> operator (ie. <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>|=</code>, <code>&amp;=</code>, <code>^=</code>, <code>&lt;&lt;=</code> and <code>&gt;&gt;=</code>) by composing the associated binary operator, if available, with an assignment.
        </para>
      
        <para>
          However, it is also possible to provide an overload for any of the compound assignment operators using the following syntax:

          <example xml:id="op-overloads.assop.ex">
            <title>Compound assignment overload</title>
            <programlisting language="kl"><![CDATA[
struct Type {
  Integer a;
  Float32 b;
};

function Type.+=(Type that) {
  this.a += that.a;
  this.b += that.b;
}

operator entry() {
  Type t1; t1.a = 42; t1.b = 3.14; report("t1 is " + t1);
  Type t2; t2.a = 7; t2.b = 2.72; report("t2 is " + t2);
  t1 += t2; report("t1 is now " + t1);
}
            ]]></programlisting>
          </example>
          <informalfigure xml:id="op-overloads.assop.ex.out">
            <simpara>Output:</simpara>
            <screen><![CDATA[
t1 is {a:42,b:3.14}
t2 is {a:7,b:2.72}
t1 is now {a:49,b:5.86}
            ]]></screen>
          </informalfigure>
        </para>
      
        <para>
          Compound assignment overloads are subject to the following restrictions:
        
          <itemizedlist>
            <listitem><simpara>They must take exactly one parameter.  The parameter may be of any type but it must be an input-only parameter.</simpara></listitem>
            <listitem><simpara>They must not return a value.</simpara></listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <section xml:id="global-constants">
      <title>Global Constants</title>
    
      <para>
        A <glossterm>global constant</glossterm> in KL is a global declaration of the form:
      
        <programlisting language="kl">const <replaceable>Type</replaceable> <replaceable>name</replaceable> = <replaceable>value</replaceable>;</programlisting>
      
        <code><replaceable>Type</replaceable></code> must be an integer or floating-point type; <code><replaceable>name</replaceable></code> must be an identifier; and <code><replaceable>value</replaceable></code> must be constant of the appropriate type.
      </para>
      
      <para>
        It is a compile-time error to try to do any of the following:
        
        <itemizedlist>
          <listitem><para>assign to a global constant</para></listitem>
          <listitem><para>pass a global constant to a function as an input-output parameter</para></listitem>
          <listitem><para>declare a global constant with the same name as a function, operator or another global constant</para></listitem>
        </itemizedlist>
      </para>
    
      <example xml:id="global-constants.ex">
        <title>Global constants</title>
        <programlisting language="kl"><![CDATA[
const Size twoToTheSixteen = 65536;
const Float64 pi = 3.14159365358979;

operator entry() {
  report("twoToTheSixteen = " + twoToTheSixteen);
  report("pi = " + pi);
}
        ]]></programlisting>
      </example>
      <informalfigure xml:id="global-constants.ex.out">
        <simpara>Output:</simpara>
        <screen><![CDATA[
twoToTheSixteen = 65536
pi = 3.14159365358979
        ]]></screen>
      </informalfigure>
    </section>
    <section xml:id="use">
      <title>Importing Functionality With <code>require</code></title>
    
      <para>
        Through integration with Fabric, it is possible for derived KL types and/or Fabric extensions to provide KL code that is defined externally to the current source file.  To use these types and code within the current source file, the <code>require</code> statement is provided; it is similar to the <code>import</code> statement in Python.
      </para>
      
      <para>
        The <code>require</code> statement should be followed by the name of the registered type or extension.  For example, to include the functionality provided by the extension named <quote>Math</quote> and the registered type named <quote>RegType</quote>, the program should start with:
        
        <programlisting language="kl"><![CDATA[
require Math, RegType;
        ]]></programlisting>
        
        Any <code>require</code> statements must appear at the top of the KL program that uses the associated functionality.  You can have as many <code>require</code> statements as you would like.
      </para>
    </section>
  </chapter>
  <chapter xml:id="ops-exprs">
    <title>Operators and Expressions</title>
    
    <para>
      This chapter explains the possible operators and resulting expressions in KL.  Generally, KL has the same operator and expression syntax as JavaScript and C, and in particular follows exactly the same precedence and associativity rules.
    </para>
    
    <section xml:id="ops">
      <title>Operators</title>
      
      <para>
        KL supports the same basic set of operators as JavaScript and C.  These operations are broadly categorized as <link linkend="arithmetic-ops">arithmetic operators</link>, <link linkend="logical-ops">logical operators</link>, <link linkend="bitwise-ops">bitwise operators</link> and <link linkend="ass-ops">assignment operators</link>.
      </para>
      
      <section xml:id="arithmetic-ops">
        <title>Arithmetic Operators</title>
      
        <section xml:id="add-ops">
          <title>Add and Subtract</title>
          
          <para>
            When <code>+</code> or <code>-</code> appear between two expressions they are referred to as the <glossterm>add</glossterm> and <glossterm>subtract</glossterm> binary operators.  These operators are pre-defined for all integer and floating point types, where they perform the usual arithmetic operations, but they can also be overloaded to apply to user-defined structures or different combinations of types.  For example, it is possible to define an operator that takes a user-defined <code>Rect</code> on the left and a user-defined <code>Point</code> on the right.
          </para>

          <para>
            In addition to being pre-defined for integer and floating-point types, the <code>+</code> (add) operator (but not the <code>-</code> [subtract] operator) is defined for the <code>String</code> type; the result of adding two strings is the two strings concatenated together.
          </para>
        </section>
      
        <section xml:id="mul-ops">
          <title>Multiply, Divide and Remainder</title>
          
          <para>
            When <code>*</code>, <code>/</code> or <code>%</code> appear between two expressions they are referred to as the <glossterm>multiply</glossterm>, <glossterm>divide</glossterm> and <glossterm>remainder</glossterm> binary operators.  These operators are pre-defined for all integer and floating point types, where they perform the usual arithmetic operations, but they can also be overloaded to apply to user-defined structures or different combinations of types.  For example, it is possible to define a multiply operator that takes a <code>Float32</code> on the left and a user-defined <code>Vec3</code> on the right.
          </para>
        </section>
      
        <section xml:id="unary-plus-minus-ops">
          <title>Unary Plus and Minus</title>
          
          <para>
            When <code>+</code> or <code>-</code> appears in front of an integer or floating-point expression without an expression to the left they are referred to as the <glossterm>unary plus</glossterm> and <glossterm>unary minus</glossterm> operators.  The unary plus operator doesn't do anything to the value it operates on, but the unary minus operator returns the value that, when added to the original, produces zero (for unsigned integer expressions); for signed integer and floating-point expressions, this is value of the expression with its sign reversed.
          </para>
          
          <para>
            It is currently not possible to overload the unary plus and minus operators; this will be fixed in a future version of Fabric.
          </para>
        </section>

        <section xml:id="inc-dec-ops">
          <title>Increment and Decrement Operators</title>

          <para>
            The <code>++</code> (increment) and <code>--</code> (decrement) operators can be used to add one to or subtract one from a variable.  These operators have the following properties:
        
            <itemizedlist>
              <listitem><para>
                The operators only work on variables or input-output parameters; then cannot operate on constants or input parameters.  This is because they change the value of the expression.
              </para></listitem>
              <listitem><para>
                They only operate on integer values.
              </para></listitem>
              <listitem><para>
                Each operator can appear either <emphasis>precede</emphasis> or <emphasis>follow</emphasis> the variable it operates on.  When it precedes the variable, the value of the expression is the value of the variable <emphasis>after</emphasis> incrementing; this is referred to as a <emphasis>prefix</emphasis> increment (or decrement).  When it follows the variable, the result is the value of the variable <emphasis>before</emphasis> incrementing; this is referred to as a <emphasis>postfix</emphasis> increment (or decrement).
              </para></listitem>
              <listitem><para>
                They cannot be overloaded.
              </para></listitem>
            </itemizedlist>
          </para>
        </section>
      </section>
      <section xml:id="logical-ops">
        <title>Logical Operators</title>
    
        <section xml:id="eq-ops">
          <title>Equality Operators</title>
          
          <para>
            When <code>==</code> or <code>!=</code> appear between two expressions they are referred to as the <glossterm>equal-to</glossterm> or <glossterm>not-equal-to</glossterm> binary operators, respectively; collectively, they are referred to as the <glossterm>equality operators</glossterm>.
          </para>

          <para>
            The equality operators are pre-defined for all integer and floating-point types as well as the <code>Boolean</code> and <code>String</code> types.  They can also be overloaded to apply to user-defined structure types or combinations of different types.
          </para>
        </section>
    
        <section xml:id="rel-ops">
          <title>Relational Operators</title>
          
          <para>
            When <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> or <code>&gt;=</code> appear between two expressions they are referred to as the <glossterm>less-than</glossterm>, <glossterm>less-than-or-equal-to</glossterm>, <glossterm>greater-than</glossterm> or <glossterm>greater-than-or-equal-to</glossterm> binary operators, respectively; collectively, they are referred to as the <glossterm>relational operators</glossterm>.
          </para>

          <para>
            The relational operators are pre-defined for all integer and floating-point types as well as the <code>String</code> type.  They can also be overloaded to apply to user-defined structure types or combinations of different types.
          </para>
        </section>
    
        <section xml:id="log-and-op">
          <title>Logical AND</title>
          
          <para>
            When <code>&amp;&amp;</code> appears between two expressions it is referred to as the <glossterm>logical AND</glossterm> binary operator.  Logical AND operates as follows: the left operand is cast to a <code>Boolean</code> (ie. a <code>Boolean</code> value is constructed from the left hand operand).  If the result is <code>true</code>, the result is the right operand, otherwise the result is the left operand.
          </para>

          <warning>
            <para>
              The behaviour of logical AND is the same as in JavaScript but different than C.  In C, the result value of a logical AND is always an integer (bool in C++).
            </para>
          </warning>
          
          <para>
            It is not possible to overload the logical AND operator.  However, you can <quote>enable</quote> it for custom types (structures) by creating a <code>Boolean</code> constructor with a single parameter whose type is the type of the left operand.
          </para>
        </section>
     
        <section xml:id="log-or-op">
          <title>Logical OR</title>
          
          <para>
            When <code>||</code> appears between two expressions it is referred to as the <glossterm>logical OR</glossterm> binary operator.  Logical OR operates as follows: the left operand is cast to a <code>Boolean</code> (ie. a <code>Boolean</code> value is constructed from the left hand operand).  If the result is <code>true</code>, the result is the left operand, otherwise the result is the right operand.
          </para>

          <warning>
            <para>
              The behaviour of logical OR is the same as in JavaScript but different than C.  In C, the result value of a logical AND is always an integer (bool in C++).
            </para>
          </warning>

          <para>
            It is not possible to overload the logical OR operator.  However, you can <quote>enable</quote> it for custom types (structures) by creating a <code>Boolean</code> constructor with a single parameter whose type is the type of the left operand.
          </para>
        </section>
      
        <section xml:id="logical-not">
          <title>Logical NOT</title>
          
          <para>
            When <code>!</code> (exclamation mark) appears in front of an expression it is referred to as the <glossterm>logical NOT</glossterm> unary operator.  Logical NOT inverts the logical value of expression; more specifically, it constructs a new <code>Boolean</code> value from the expression and then inverts its logical value.  Therefore, logical not can be applied to any expression that has a <code>Boolean</code> constructor that takes a single parameter whose types is the type of the expression.
          </para>
          
          <para>
            It is not possible to overload the logical NOT operator.  However, you can <quote>enable</quote> it for custom types (structures) by creating a <code>Boolean</code> constructor with a single parameter whose type is the structure.
          </para>
        </section>
      
        <section xml:id="cond-op">
          <title>The Conditional Operator</title>
          
          <para>
            When three expressions are separated by <code>?</code> and <code>:</code> it is referred to as the <glossterm>conditional operator</glossterm> (or <glossterm>ternary operator</glossterm>).  The conditional operator constructs a <code>Boolean</code> from the first operand; if it has value <code>true</code>, the result is the second operand, otherwise it is the third.
          </para>
          
          <para>
            It is not possible to overload the conditional operator.
          </para>
        </section>
      </section>
      
      <section xml:id="bitwise-ops">
        <title>Bitwise Operators</title>
    
        <section xml:id="bit-bin-ops">
          <title>Bitwise AND, OR and XOR</title>
          
          <para>
            When <code>&amp;</code>, <code>|</code> or <code>^</code> appear between two expressions they are referred to as <glossterm>bitwise AND</glossterm>, <glossterm>bitwise OR</glossterm> or <glossterm>bitwise XOR</glossterm> binary operators, respectively.
          </para>
          
          <para>
            Bitwise AND, OR and XOR are predefined for all integer types; they perform the usual bitwise operation on the two values.  They are also predefined for the <code>Boolean</code> type, which is treated as if it was a single bit with value 1 (if true) or 0 (if false).
          </para>

          <para>
            Bitwise AND, OR and XOR can be overloaded for user-defined structures or combinations of different types.
          </para>
        </section>
    
        <section xml:id="bitwise-not">
          <title>Bitwise NOT</title>
          
          <para>
            When <code>~</code> (tilde) appears in front of an expression it is referred to as the <glossterm>bitwise NOT</glossterm> unary operator.
          </para>

          <para>
            Bitwise NOT is predefined for all integer types; it inverts the state of the bits of the value.  It is also predefined for the <code>Boolean</code> type, which is treated as if it was a single bit with value 1 (if true) or 0 (if false).
          </para>

          <para>
            It is not currently possible to overload the bitwise NOT operator; this will change in a future version of Fabric.
          </para>
        </section>
 
        <section xml:id="shift-ops">
          <title>Left and Right Shift</title>
          
          <para>
            When <code>&lt;&lt;</code> or <code>&gt;&gt;</code> appear between two expressions they are referred to as the <glossterm>left shift</glossterm> or <glossterm>right shift</glossterm> binary operators, respectively.  These operators are pre-defined for all integer types, where they perform a left or right bit shift of the left operand by the number of bits given in the right operand.
          </para>

          <para>
            A right-shift of a signed integer value will fill the left most bits with the sign bit, not with zeros.  Right shifts of unsigned integer values and left shifts of any integer values always fill with zeros.
          </para>

          <para>
            It is possible to overload the shift operators for user-defined types, and even provide non-integer types as right-hand operands.
          </para>
        </section>
      </section>
      
      <section xml:id="ass-ops">
        <title>Assignment Operators</title>
    
        <section xml:id="direct-ass-op">
          <title>Direct Assignment Operator</title>
          
          <para>
            When <code>=</code> appears between two expressions it is referred to as the <glossterm>direct assignment operator</glossterm>.  The direct assignment operator is predefined for all types; see <xref linkend="types" /> for details on how direct assignment operates for a given type.
          </para>
        </section>
    
        <section xml:id="compound-ass-ops">
          <title>Compound Assignment Operators</title>
          
          <para>
            Any of the arithmetic or bitwise (but not logical) binary operators can be combined with <code>=</code> to form a <glossterm>compound assignment operator</glossterm>; these are specifically <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>^=</code> and <code>|=</code>.
          </para>

          <para>
            A compound assignment operator is predefined for a given type if and only if the corresponding binary operator is predefined for the type.  It is also possible to overload the compound assignment operator for any type, and it is even possible to have different types for the left and right operands. See <xref linkend="overloading-compound-ass-ops" />.
          </para>
        </section>
      </section>

      <section xml:id="ops-and-polymorphism">
        <title>Operators and Polymorphism</title>

        <para>
          Operator invocations are subject to the same rules as function calls with respect to polymorphism.  If an exact match for an operator with the parameter types equal to the operand types is not found, KL will find the best-match among the existing implementations of the operator.  This makes it possible, for instance, to add an integer and a string; the result is that the integer is cast to a string and then the strings are concatenated.
        </para>

        <para>
          For more information on polymorphism and best-match rules, see <xref linkend="polymorphism" />.
        </para>
      </section>
    </section>

    <section xml:id="exprs">
      <title>Expressions</title>
      
      <para>
        There are two types of expressions in KL: simple expressions and compound expressions.
      </para>
      
      <section xml:id="simple-exprs">
        <title>Simple Expressions</title>
        
        <para>
          <glossterm>Simple expressions</glossterm> are the expressions from which more complex expressions are derived.  The simple expressions are:
          
          <itemizedlist>
            <listitem><para>Symbols that refer to variables, function arguments or global constants.  The type of the expression is the type of the entity referred to.  Examples: <code>foo</code>, <code>myParam</code>, <code>mathPI</code>.  See <xref linkend="scope" /> for how symbol names are resolved.</para></listitem>
            <listitem><para>Boolean, integer, floating-point and string constants.  The type of the expression is the type of the constant.  Examples: <code>true</code>, <code>42</code>, <code>3.14159</code>.  See <xref linkend="constants" />.</para></listitem>
          </itemizedlist>
        </para>
      </section>

      <section xml:id="compound-exprs">
        <title>Compound Expressions</title>

        <para>
          <glossterm>Compound expressions</glossterm> are built from <link linkend="simple-exprs">simple expressions</link> and/or other compound expressions using <link linkend="ops">operators</link>.
        </para>

        <para>
          The following table lists all the different compound expressions in KL.  Compound expressions are grouped by <glossterm>type</glossterm>; all expressions of the same type are of the same precedence and share the same associativity.  Compound expression types are listed from highest to lowest precedence.
        </para>

        <table frame='all'>
          <title>Compound expressions</title>
          <tgroup cols='4' align='left' colsep='1' rowsep='1'>
            <colspec colname='type' />
            <colspec colname='assoc' />
            <colspec colname='expr'/>
            <colspec colname='ref' />
            <thead>
              <row>
                <entry>Type</entry>
                <entry>Associativity</entry>
                <entry>Expression(s)</entry>
                <entry>Reference</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry morerows="5">Postfix</entry>
                <entry morerows="5">left-to-right</entry>
                <entry><code><replaceable>function</replaceable>(<replaceable>args</replaceable>)</code></entry>
                <entry><xref linkend="function-calls" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable>[<replaceable>expr</replaceable>]</code></entry>
                <entry><xref linkend="arrays" />; <xref linkend="dicts" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable>.<replaceable>member</replaceable></code></entry>
                <entry><xref linkend="structs" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable>.<replaceable>method</replaceable>(<replaceable>args</replaceable>)</code></entry>
                <entry><xref linkend="method-calls" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable>++</code></entry>
                <entry morerows="1"><xref linkend="inc-dec-ops" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable>--</code></entry>
              </row>
              <row>
                <entry morerows="5">Prefix</entry>
                <entry morerows="5">right-to-left</entry>
                <entry><code>+<replaceable>expr</replaceable></code></entry>
                <entry morerows="1"><xref linkend="unary-plus-minus-ops" /></entry>
              </row>
              <row>
                <entry><code>-<replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code>++<replaceable>expr</replaceable></code></entry>
                <entry morerows="1"><xref linkend="inc-dec-ops" /></entry>
              </row>
              <row>
                <entry><code>--<replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code>!<replaceable>expr</replaceable></code></entry>
                <entry><xref linkend="logical-not" /></entry>
              </row>
              <row>
                <entry><code>~<replaceable>expr</replaceable></code></entry>
                <entry><xref linkend="bitwise-not" /></entry>
              </row>
              <row>
                <entry morerows="2">Multiplicative</entry>
                <entry morerows="2">left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> * <replaceable>expr</replaceable></code></entry>
                <entry morerows="2"><xref linkend="mul-ops" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> / <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> % <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry morerows="1">Additive</entry>
                <entry morerows="1">left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> + <replaceable>expr</replaceable></code></entry>
                <entry morerows="1"><xref linkend="add-ops" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> - <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry morerows="1">Shift</entry>
                <entry morerows="1">left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> &lt;&lt; <replaceable>expr</replaceable></code></entry>
                <entry morerows="1"><xref linkend="shift-ops" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> &gt;&gt; <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry morerows="3">Relational</entry>
                <entry morerows="3">left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> &lt; <replaceable>expr</replaceable></code></entry>
                <entry morerows="3"><xref linkend="rel-ops" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> &lt;= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> &gt; <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> &gt;= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry morerows="1">Equality</entry>
                <entry morerows="1">left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> == <replaceable>expr</replaceable></code></entry>
                <entry morerows="1"><xref linkend="eq-ops" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> != <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry>Bitwise AND</entry>
                <entry>left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> &amp; <replaceable>expr</replaceable></code></entry>
                <entry morerows="2"><xref linkend="bit-bin-ops" /></entry>
              </row>
              <row>
                <entry>Bitwise XOR</entry>
                <entry>left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> ^ <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry>Bitwise OR</entry>
                <entry>left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> | <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry>Logical AND</entry>
                <entry>left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> &amp;&amp; <replaceable>expr</replaceable></code></entry>
                <entry><xref linkend="log-and-op" /></entry>
              </row>
              <row>
                <entry>Logical OR</entry>
                <entry>left-to-right</entry>
                <entry><code><replaceable>expr</replaceable> || <replaceable>expr</replaceable></code></entry>
                <entry><xref linkend="log-or-op" /></entry>
              </row>
              <row>
                <entry>Conditional</entry>
                <entry>right-to-left</entry>
                <entry><code><replaceable>expr</replaceable>? <replaceable>expr</replaceable>: <replaceable>expr</replaceable></code></entry>
                <entry><xref linkend="cond-op" /></entry>
              </row>
              <row>
                <entry morerows="10">Assignment</entry>
                <entry morerows="10">right-to-left</entry>
                <entry><code><replaceable>expr</replaceable> = <replaceable>expr</replaceable></code></entry>
                <entry><xref linkend="direct-ass-op" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> += <replaceable>expr</replaceable></code></entry>
                <entry morerows="9"><xref linkend="compound-ass-ops" /></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> -= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> *= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> /= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> %= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> &lt;&lt;= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> &gt;&gt;= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> &amp;= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> ^= <replaceable>expr</replaceable></code></entry>
              </row>
              <row>
                <entry><code><replaceable>expr</replaceable> |= <replaceable>expr</replaceable></code></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>

    <section xml:id="order-of-ops">
      <title>Controlling Order of Operations</title>
      
      <para>
        The order of operations can be explicitly controlled by putting <code>(</code> and <code>)</code> (parentheses) around expressions.
      </para>
      
      <example>
        <title>Controlling Order of Operations</title>
        <programlisting language="kl"><![CDATA[
operator entry() {
  report( (2 * 3) + 5 );
  report( 2 * (3 + 5) );
}
        ]]></programlisting>
      </example>
      <informalfigure>
        <simpara>Output:</simpara>
        <screen><![CDATA[
11
16
        ]]></screen>
      </informalfigure>
    </section>
    <section xml:id="scope">
      <title>Scoping Rules</title>
    
      <para>
        The term <glossterm>scope</glossterm> in programming languages refers to the parts of a program in which variables, constants and functions are visible; the rules that govern how scopes work are referred to as <glossterm>scoping rules</glossterm>.  Scopes are also responsible for managing the <quote>lifecycle</quote> of variables; in the case of KL, this refers to when destructors are called for structure values.
      </para>
    
      <section xml:id="scope.types">
        <title>Types of Scopes</title>
      
        <para>
          In KL, there are four kinds scopes: the global scope, function scopes, compound statement scopes and temporary scopes.  Scopes <glossterm>nest</glossterm> inside each other; when a KL program refers to a variable by name, the compiler determines which variable is being referred to by searching from the current innermost scope outwards through the nested scopes to the outermost scope (which is always the global scope).  Like C, KL is a statically-scoped language, meaning that the exact variable that is being referred to is resolved at compile time (and not at run time).
        </para>
  
        <section xml:id="scope.global">
          <title>The Global Scope</title>
    
          <para>
            The global scope is the top-level scope of a KL program.  The symbols that are visible in the global scope are global constants as well as functions and operators.  The global scope is always the outermost scope at any point in a KL program.
          </para>
        </section>
        <section xml:id="scope.function">
          <title>Function Scope</title>
    
          <para>
            Whenever a function or operator is defined, a function scope is created that is nested inside the global scope.  The arguments to the function are provided within the function scope.  Within the function scope, a function definition also creates a compound statement scope corresponding to the compound statement that constitutes the body of the function.
          </para>
        </section>
        <section xml:id="scope.compound-statement">
          <title>Compound Statement Scope</title>
    
          <para>
            Any time that a <code>{</code> followed by zero or more statements followed by <code>}</code> is used to introduce a compound statement, a new <glossterm>compound statement scope</glossterm> is introduced.  Compound statement scopes are nested inside function scopes (when they correspond to the compound statement that constitutes the body of a function) or inside other compound statement scopes.
          </para>
    
          <para>
            When control reaches the end of a compound statement (by executing the last statement or via the <code>return</code>, <code>break</code> or <code>continue</code> statements), any structure values that have corresponding destructors will have those destructors executed.
          </para>
    
          <para>
            Note that declaring a loop index variable inside a loop statement is a special case of a compound statement scope.  In the case that the loop body is a compound statement, the corresponding compound statement scope is nested inside the loop's compound statement scope.
          </para>
        </section>
        <section xml:id="scope.temporary">
          <title>Temporary Scope</title>
    
          <para>
            Any time that a constructor is directly invoked to create a temporary value (see <xref linkend="constructors.invocation.call" />), a scope is created to contain the temporary value.  The scope encloses the surrounding expression of the temporary value; this means that when the surrounding expression is finished execution, the temporary value's destructor, if it exists, is executed.
          </para>
        </section>
      </section>

      <section xml:id="scope.example">
        <title>Nested Scopes Example</title>
      
        <para>
          For a precise understanding of the nesting of KL scopes, study the following example carefully!
        </para>
  
        <example xml:id="scope.ex">
          <title>Nested scopes</title>
          <programlisting language="kl"><![CDATA[
struct T {
  String s;
};

function T(String s) {
  this.s = s;
  report("created T; s = " + this.s);
}

function ~T() {
  report("destroying T; s = " + this.s);
}

function foo(T t) {
  report("start of foo; t is now " + t);
  T t("fooT");
  report("declared t in foo; t is now " + t);
  for (Index i=0; i<3; ++i) {
    report("top of loop body; t is now " + t);
    T t("loopT:" + i);
    report("declared t in loop; t is now " + t);
  }
  report("after loop; t is now " + t);
}

const Float32 t = 2.75;

operator entry() {
  report("top of entry; t is now " + t);
  T t("entryT");
  report("declared t in entry; t is now " + t);
  foo(t);
  report("came back from foo; t is now " + t);
}
          ]]></programlisting>
        </example>
        <informalfigure>
          <simpara>Output:</simpara>
          <screen><![CDATA[
top of entry; t is now 2.75
created T; s = entryT
declared t in entry; t is now {s:"entryT"}
start of foo; t is now {s:"entryT"}
created T; s = fooT
declared t in foo; t is now {s:"fooT"}
top of loop body; t is now {s:"fooT"}
created T; s = loopT:0
declared t in loop; t is now {s:"loopT:0"}
destroying T; s = loopT:0
top of loop body; t is now {s:"fooT"}
created T; s = loopT:1
declared t in loop; t is now {s:"loopT:1"}
destroying T; s = loopT:1
top of loop body; t is now {s:"fooT"}
created T; s = loopT:2
declared t in loop; t is now {s:"loopT:2"}
destroying T; s = loopT:2
after loop; t is now {s:"fooT"}
destroying T; s = fooT
came back from foo; t is now {s:"entryT"}
destroying T; s = entryT
          ]]></screen>
        </informalfigure>
      </section>
    </section>
  </chapter>
  <chapter xml:id="statements">
    <title>Statements</title>
    
    <para>
      The bodies of functions, operators, and so on are composed of <glossterm>statements</glossterm>.  Statements are the parts of KL programs that actually do something.  Statements cause expressions to be evaluated, can conditionally execute other statements, or can iterate over another set of statements until a condition is met.
    </para>

    <para>
      The remainder of the chapter describes the different statements that can be used inside KL function definitions.  Statements are divided into two categories: simple statements and complex statements.
    </para>

    <section xml:id="simple-statements">
      <title>Simple Statements</title>

      <para>
        A simple statement is a statement that does not check conditions or create a nested scope.  Simple statements always end with a <code>;</code> (semicolon) character.

        <warning><para>
          It is a common syntax error in KL and other C-like languages to forget to finish a simple statement with a semicolon.
        </para></warning>
      </para>

      <section xml:id="expr-statements">
        <title>Expression Statements</title>

        <para>
          Any expression, followed by a <code>;</code> (semicolon), is a statement.  The statement operates by evaluating the expression and then discarding the resulting value (if any).  The most common form of an expression statement is one that invokes a function call (eg. <code>report</code>).
        </para>

        <example>
          <title>Expression statements</title>
          <programlisting language="kl">
            <![CDATA[
operator entry() {
  // A very useless expression statement:
  // evaluates 2 + 2 then discards the
  // result
  2 + 2;

  // A more useful expression statement:
  // evaluates the report function, which
  // causes text to appear
  report("Hello!"); 
}
            ]]>
          </programlisting>
        </example>
      </section>

      <section xml:id="throw-statement">
        <title>The <code>throw</code> Statement</title>

        <para>
          The keyword <code>throw</code>, followed by any argument, causes the argument to a string and then throws an exception whose value is the string.  This can be used to throw an exception, exiting out of the KL environment entirely and returning the exception to the calling environment (ie. the dynamic language using KL).
        </para>

        <note><para>
          Currently there is no way of catching exceptions from within KL itself. This functionality will be added in a later version of Fabric Engine.
        </para></note>

        <example>
          <title>The <code>throw</code> statement</title>
          <programlisting language="kl">
            <![CDATA[
operator entry() {
  report("before throw");
  throw "Test Exception";
  report("after throw");
}
            ]]>
          </programlisting>
        </example>

        <informalfigure>
          <simpara>Output:</simpara>
          <screen>
            <![CDATA[
before throw
Caught exception: Test Exception
          ]]>
          </screen>
        </informalfigure>
      </section>

      <section xml:id="empty-statement">
        <title>The Empty Statement</title>

        <para>
          A <code>;</code> (semicolon) alone is a statement that does nothing.  This can be used in cases where a statement is required but there is nothing to do.
        </para>

        <example>
          <title>The empty statement</title>
          <programlisting language="kl">
            <![CDATA[
function foo(io MyType myType) {
  for (; returnsFalseWhenDone(myType); )
    ; // Do nothing
}
            ]]>
          </programlisting>
        </example>
      </section>

      <section xml:id="var-decl-statements">
        <title>Variable Declaration Statements</title>

        <para>
          A <glossterm>variable declaration statement</glossterm> introduces one or more new variables into the innermost scope.  These variables remain visible for the rest of the scope and are destroyed, executing destructors when appropriate, when execution exists this scope.
        </para>

        <para>
          Variable declarations require a type.  Multiple variables can be declared in the same statement by separating them with commas.
        </para>

        <para>
          The variable names can be followed by array and dictionary specifications.  See <xref linkend="arrays" /> and <xref linkend="dicts" /> for more information on array and dictionary specifications.
        </para>

        <para>
          Variables can be constructed or assigned to when declared to set their initial values; see <xref linkend="constructors" />.
        </para>

        <example>
          <title>Variable declaration statements</title>
          <programlisting language="kl">
          <![CDATA[
operator entry() {
  Scalar a;
  report(a);
  Integer b[], c[2][2], d;
  report(b);
  report(c);
  report(d);
}
            ]]>
          </programlisting>
        </example>

        <informalfigure>
          <simpara>Output:</simpara>
          <screen>
            <![CDATA[
0
[]
[[0,0],[0,0]]
0
          ]]>
          </screen>
        </informalfigure>

        <note><para>
          As of this writing, it is not yet possible to initialize arrays in KL in the statement where the variable is declared.
        </para></note>
      </section>
    </section>

    <section xml:id="complex-statements">
      <title>Complex Statements</title>

      <para>
        A <glossterm>complex statement</glossterm> is a statement that groups together and/or conditionally executes other statements.  Complex statements are built from simple statements, other complex statements, and expressions.
      </para>

      <section xml:id="compound-statements">
        <title>Compound Statements</title>

        <para>
          At any point when a single statement can be inserted in KL source code, it is possible to insert multiple statements surrounded by <code>{</code> (left brace) and <code>}</code> (right brace).  This has the following effects:

          <itemizedlist>
            <listitem><para>
              The statements are executed, in order, as if they were together a single statement; and
            </para></listitem>

            <listitem><para>
              A new, nested scope is introduced; see <xref linkend="scope" />.
            </para></listitem>
          </itemizedlist>
        </para>
      </section>

      <section xml:id="cond-statements">
        <title>Conditional Statements</title>

        <section xml:id="if-statement">
          <title>The <code>if</code> Statement</title>

          <para>
            The <code>if</code> keyword begins a conditional statement, which can optionally include an <code>else</code> clause.  As in JavaScript and C, <code>if</code> and <code>else</code> statements can chain.
          </para>

          <example>
            <title>The <code>if</code> statement</title>
            <programlisting language="kl">
              <![CDATA[
function String desc(Integer n) {
  if (n == 0)
    return "zero";
  else if (n == 1)
    return "one";
  else
    return "lots";
}
              ]]>
            </programlisting>
          </example>
        </section>

        <section xml:id="switch-statement">
          <title>The <code>switch</code> Statement</title>

          <para>
            The <code>switch</code>...<code>case</code> construct is a more compact form for a sequence of <code>if</code>...<code>else</code> statements, just as in JavaScript and C.
          </para>

          <example>
            <title>The <code>switch</code> statement</title>
            <programlisting language="kl">
              <![CDATA[
function String descNumber(Integer i) {
  switch (i) {
    case 0:
      return "zero";
    case 1:
      return "one";
    case 2:
    case 3;
    case 4:
      return "a few";
    default:
      return "many";
  }
}
              ]]>
            </programlisting>
          </example>
        </section>
      </section>

      <section xml:id="return-statement">
        <title>The <code>return</code> Statement</title>

        <para>
          The <code>return</code> statement takes two forms:

          <itemizedlist>
            <listitem><para>
              For a function which returns a value, the <code>return</code> statement immediately returns the given value to the calling function.  There is an implicit cast to the type of the return value as specified in the function definition.
            </para></listitem>

            <listitem><para>
              For a function which does not return a value, the <code>return</code> statement does not take a value and simply returns immediately to the calling function.
            </para></listitem>
          </itemizedlist>
        </para>

        <example>
          <title>The <code>return</code> statement</title>
          <programlisting language="kl">
            <![CDATA[
// Function that returns a value
function String markupName(String name) {
  return "My name is '" + name + "'";
}

// Function that does not return a value
function suffixIndexDesc(io String strings[], Size index) {
  if (index >= strings.size)
    return;
  strings[index] += " (was at index " + index + ")";
}
            ]]>
          </programlisting>
        </example>
      </section>

      <section xml:id="loop-statements">
        <title>Loop Statements</title>

        <section xml:id="c-style-loop">
          <title><quote>C-Style</quote> Loops</title>

          <para>
            A <glossterm>C-style loop</glossterm> takes the form <code>for (<replaceable>start</replaceable>; <replaceable>check</replaceable>; <replaceable>next</replaceable>) <replaceable>body</replaceable></code>, where <code><replaceable>start</replaceable></code> is a statement (possibly empty), <code><replaceable>check</replaceable></code> and <code><replaceable>next</replaceable></code> are optional expressions, and <code><replaceable>body</replaceable></code> is a statement.  The loop operates as follows:

            <itemizedlist>
              <listitem><para>
                A new, nested scope is created.  This scope is destroyed when the loop finishes.
              </para></listitem>
              <listitem><para>
                The <code><replaceable>start</replaceable></code> statement is executed.
              </para></listitem>
              <listitem><para>
                The <code><replaceable>check</replaceable></code> expression, if present, is evaluated, and the resulting value is converted to a <code>Boolean</code>.  If the result is false, the loop finishes.
              </para></listitem>
              <listitem><para>
                The <code><replaceable>body</replaceable></code> statement is executed.
              </para></listitem>
              <listitem><para>
                The <code><replaceable>next</replaceable></code> expression, if present, is evaluated, and the resulting value is discarded.  Execution is transferred back to the step that evaluates the <code><replaceable>check</replaceable></code> expression.
              </para></listitem>
            </itemizedlist>

            Note that since <code><replaceable>start</replaceable></code> is a statement, it is possible to declare a new variable there.  This variable will go out-of-scope when the loop finishes.  It is common practice to declare loop-bound index variables in the <code><replaceable>start</replaceable></code> statement.
          </para>

          <example>
            <title><quote>C-Style</quote> loop</title>
            <programlisting language="kl">
              <![CDATA[
operator entry() {
  for (Index i=0; i<10; ++i)
    report("i is now " + i);
}
              ]]>
            </programlisting>
          </example>
        </section>

        <section xml:id="while-loops">
          <title><code>while</code> Loops</title>

          <para>
            A <glossterm>while loop</glossterm> takes the form <code>while (<replaceable>check</replaceable>) <replaceable>body</replaceable></code>, where <code><replaceable>check</replaceable></code> is a expression and <code><replaceable>body</replaceable></code> is a statement.  The loop operates as follows:

            <itemizedlist>
              <listitem><para>
                The <code><replaceable>check</replaceable></code> expression is evaluated, and the resulting value is converted to a <code>Boolean</code>.  If the result is false, the loop finishes.
              </para></listitem>
              <listitem><para>
                The <code><replaceable>body</replaceable></code> statement is executed.
              </para></listitem>
              <listitem><para>
                Execution is transferred back to the step that evaluates the <code><replaceable>check</replaceable></code> expression.
              </para></listitem>
            </itemizedlist>
          </para>

          <example>
            <title><code>while</code> loop</title>
            <programlisting language="kl">
              <![CDATA[
operator entry() {
  Integer i = 0;
  while (i < 10) {
    report("i is now " + i);
    ++i;
  }
}
              ]]>
            </programlisting>
          </example>
        </section>

        <section xml:id="do-while-loops">
          <title><code>do</code>...<code>while</code> Loops</title>

          <para>
            A <glossterm>do-while loop</glossterm> takes the form <code>do <replaceable>body</replaceable> while (<replaceable>check</replaceable>);</code>, where <code><replaceable>check</replaceable></code> is a expression and <code><replaceable>body</replaceable></code> is a statement.  The loop operates as follows:

            <itemizedlist>
              <listitem><para>
                The <code><replaceable>body</replaceable></code> statement is executed.
              </para></listitem>
              <listitem><para>
                The <code><replaceable>check</replaceable></code> expression is evaluated, and the resulting value is converted to a <code>Boolean</code>.  If the result is false, the loop finishes.
              </para></listitem>
              <listitem><para>
                Execution is transferred back to the step that executes the <code><replaceable>body</replaceable></code> statement.
              </para></listitem>
            </itemizedlist>
          </para>

          <example>
            <title><code>do</code>...<code>while</code> loop</title>
            <programlisting language="kl">
              <![CDATA[
operator entry() {
  Integer i=0;
  do {
    report("i is now " + i);
    ++i;
  } while (i<10);
}
              ]]>
            </programlisting>
          </example>
        </section>

        <section xml:id="dict-loops">
          <title>Dictionary Loops</title>

          <para>
            A dictionary loop iterates over all the keys and values, or just the values, in a dictionary.  For more information on dictionary loops, see <xref linkend="dicts" />.
          </para>
        </section>

        <section xml:id="loop-control-statements">
          <title>Loop Control Statements</title>

          <para>
            Within the body of a loop, the <code>break</code> and <code>continue</code> statements can be used to prematurely end the current iteration of the loop as described below.
          </para>

          <section xml:id="break-statement">
            <title>The <code>break</code> Statement</title>

            <para>
              The <code>break;</code> statement immediately exits the innermost loop.  It is an error to use the <code>break</code> statement outside of a loop.
            </para>

            <example>
              <title>The <code>break</code> statement</title>
              <programlisting language="kl">
                <![CDATA[
operator entry() {
  // Only loops 5 times
  for (Integer i=0; ; ++i) {
    if (i == 5)
      break;
  }
}
                ]]>
              </programlisting>
            </example>
          </section>

          <section xml:id="continue-statement">
            <title>The <code>continue</code> Statement</title>

            <para>
              The <code>continue;</code> statement immediately jumps to the next iteration of the innermost loop.  It is an error to use the <code>continue</code> statement outside of a loop.
            </para>

            <example>
              <title>The <code>continue</code> statement</title>
              <programlisting language="kl">
                <![CDATA[
operator entry() {
  // Only prints 7
  for (Integer i=0; i<10; ++i) {
    if (i != 7)
      continue;
    report(i);
  }
}
                ]]>
              </programlisting>
            </example>
          </section>
        </section>
      </section>
    </section>
  </chapter>

  <chapter xml:id="map-reduce">
    <title>Map-Reduce</title>
    
    <para>
      Fabric Engine provides a generic map-reduce framework that can be used to create recursively-parallel operations on large data sets.
    </para>

    <para>
      This chapter does not attempt to explain the concepts behind and usage of the Fabric Engine map-reduce framework; it serves purely to enumerate the types and functions that are provided in KL to support the framework.  For more information on concepts and usage of the map-reduce framework, refer to the 
      <link condition="html" xlink:href="http://documentation.fabric-engine.com/latest/FabricEngine-MapReduceProgrammingGuide.html">
        <quote>Map-Reduce Programming Guide</quote>
      </link>
      <link condition="pdf" xlink:href="http://documentation.fabric-engine.com/latest/FabricEngine-MapReduceProgrammingGuide.pdf">
        <quote>Map-Reduce Programming Guide</quote>
      </link>
      .
    </para>

    <section xml:id="mr-types">
      <title>Map-Reduce Types</title>

      <para>
        In order to support map-reduce, KL introduces two new derived types: <code>ValueProducer&lt;<replaceable>...</replaceable>&gt;</code> and <code>ArrayProducer&lt;<replaceable>...</replaceable>&gt;</code>.
      </para>

      <section xml:id="value-producer">
        <title>The <code>ValueProducer&lt;<replaceable>...</replaceable>&gt;</code> Type</title>

        <para>
          Given an existing type <code><replaceable>ValueType</replaceable></code>, the type <code>ValueProducer&lt;<replaceable>ValueType</replaceable>&gt;</code> is a map-reduce value producer that produces values of type <code><replaceable>ValueType</replaceable></code>.  Values of type <code>ValueProducer&lt;<replaceable>ValueType</replaceable>&gt;</code> have the following properties:

          <itemizedlist>
            <listitem><para>
              They can be assigned to variables of the same type; however, there must be an exact match for <code><replaceable>ValueType</replaceable></code>.  In other words, <code>ValueProducer&lt;<replaceable>ValueType1</replaceable>&gt;</code> and <code>ValueProducer&lt;<replaceable>ValueType2</replaceable>&gt;</code> are the same type if and only if <code><replaceable>ValueType1</replaceable></code> and <code><replaceable>ValueType2</replaceable></code> are the same type.
            </para></listitem>

            <listitem><para>
              They support a method <programlisting language="kl">function <replaceable>ValueType</replaceable> ValueProducer&lt;<replaceable>ValueType</replaceable>&gt;.produce();</programlisting> that produces the value producer's value.
            </para></listitem>

            <listitem><para>
              They support a method <programlisting language="kl">function ValueProducer&lt;<replaceable>ValueType</replaceable>&gt;.flush();</programlisting> that recursively flushes any caches connected to the value producer.
            </para></listitem>
          </itemizedlist>
        </para>
      </section>

      <section xml:id="array-producer">
        <title>The <code>ArrayProducer&lt;<replaceable>...</replaceable>&gt;</code> Type</title>

        <para>
          Given an existing type <code><replaceable>ElementType</replaceable></code>, the type <code>ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt;</code> is a map-reduce array producer that produces values of type <code><replaceable>ElementType</replaceable></code>.  Values of type <code>ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt;</code> have the following properties:

          <itemizedlist>
            <listitem><para>
              They can be assigned to variables of the same type; however, there must be an exact match for <code><replaceable>ElementType</replaceable></code>.  In other words, <code>ArrayProducer&lt;<replaceable>ElementType1</replaceable>&gt;</code> and <code>ArrayProducer&lt;<replaceable>ElementType2</replaceable>&gt;</code> are the same type if and only if <code><replaceable>ElementType1</replaceable></code> and <code><replaceable>ElementType2</replaceable></code> are the same type.
            </para></listitem>

            <listitem><para>
              They support a method <programlisting language="kl">function Size ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt;.getCount();</programlisting> that returns the number of elements in the array producer.  Calling <code>produce(<replaceable>i</replaceable>)</code> (below) with <code><replaceable>i</replaceable></code> not less than the result of <code>getCount()</code> will cause an exception to be thrown.
            </para></listitem>

            <listitem><para>
              They support a method <programlisting language="kl">function <replaceable>ElementType</replaceable> ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt;.produce(Index <replaceable>i</replaceable>);</programlisting> that produces the array producer's element at index <code><replaceable>i</replaceable></code>.
            </para></listitem>

            <listitem><para>
              They support a method <programlisting language="kl">function ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt;.flush();</programlisting> that recursively flushes any caches connected to the array producer.
            </para></listitem>
          </itemizedlist>
        </para>
      </section>
    </section>

    <section xml:id="mr-functions">
      <title>Map-Reduce Functions</title>

      <para>
        KL supports several functions to support the creation of new value and array producers from existing producers as well as KL functions and values.
      </para>

      <section>
        <title>Value Producer Creation Functions</title>

        <section>
          <title><code>createConstValue</code></title>

          <programlisting language="kl">ValueProducer&lt;<replaceable>ValueType</replaceable>&gt; createConstValue(<replaceable>expr</replaceable>)</programlisting>

          <para>
            Creates a value producer with value type <replaceable>ValueType</replaceable> that returns a constant value.  <replaceable>expr</replaceable> must be an expression that evaluates to a value.
          </para>

          <example>
            <title><code>createConstValue</code></title>
            <programlisting language="kl"><![CDATA[
operator entry() {
  ValueProducer<Integer> vp = createConstValue( 42 );
  report(vp);
  report(vp.produce());
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[]
ValueProducer<Integer>
42
            ]]></screen>
          </informalfigure>
        </section>

        <section>
          <title><code>createValueGenerator</code></title>

          <programlisting language="kl">ValueProducer&lt;<replaceable>ValueType</replaceable>&gt; createValueGenerator(<replaceable>operatorName</replaceable>[, ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt;])</programlisting>

          <para>
            Creates a value producer with value type <replaceable>ValueType</replaceable> that calls the operator named <code><replaceable>operatorName</replaceable></code> to generate the value.

            <itemizedlist>
              <listitem>
                <para>
                  If <code>ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt;</code> is provided, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype <programlisting language="kl">operator operatorName(io <replaceable>ValueType</replaceable> value, <replaceable>SharedValueType</replaceable> sharedValue);</programlisting>
                </para>
              </listitem>

              <listitem>
                <para>
                  Otherwise, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype <programlisting language="kl">operator operatorName(io <replaceable>ValueType</replaceable> value);</programlisting>
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <example>
            <title><code>createValueGenerator</code></title>
            <programlisting language="kl"><![CDATA[
operator gen1(io String output) {
  output = "Hello!";
}

operator gen2(io String output, String shared) {
  output = "Hello, " + shared;
}

operator entry() {
  ValueProducer<String> vp1 = createValueGenerator(gen1);
  report("vp1 = " + vp1);
  report("vp1.produce() = " + vp1.produce());

  ValueProducer<String> vp2 = createValueGenerator(gen2, vp1);
  report("vp2 = " + vp2);
  report("vp2.produce() = " + vp2.produce());
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[]
vp1 = ValueProducer<String>
vp1.produce() = Hello!
vp2 = ValueProducer<String>
vp2.produce() = Hello, Hello!
            ]]></screen>
          </informalfigure>
        </section>

        <section>
          <title><code>createValueTransform</code></title>

          <programlisting language="kl">ValueProducer&lt;<replaceable>ValueType</replaceable>&gt; createValueTransform(ValueProducer&lt;<replaceable>ValueType</replaceable>&gt;, <replaceable>operatorName</replaceable>[, ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt;])</programlisting>

          <para>
            Creates a value producer with value type <replaceable>ValueType</replaceable> that calls the operator named <code><replaceable>operatorName</replaceable></code> to transform the result of another value producer of the same type.

            <itemizedlist>
              <listitem>
                <para>
                  If <code>ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt;</code> is provided, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype <programlisting language="kl">operator operatorName(io <replaceable>ValueType</replaceable> value, <replaceable>SharedValueType</replaceable> sharedValue);</programlisting>
                </para>
              </listitem>

              <listitem>
                <para>
                  Otherwise, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype <programlisting language="kl">operator operatorName(io <replaceable>ValueType</replaceable> value);</programlisting>
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <example>
            <title><code>createValueTransform</code></title>
            <programlisting language="kl"><![CDATA[
operator multByTwo(
  io Integer value
  )
{
  value *= 2;
}

operator multByShared(
  io Integer value,
  Integer shared
  )
{
  value *= shared;
}

operator entry() {
  ValueProducer<Integer> vp;
  
  vp = createValueTransform(
    createConstValue( 42 ),
    multByTwo
    );
  report(vp);
  report(vp.produce());

  vp = createValueTransform(
    createConstValue( 2 ),
    multByShared,
    createConstValue( 3 )
    );
  report(vp);
  report(vp.produce());
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[]
ValueProducer<Integer>
84
ValueProducer<Integer>
6
            ]]></screen>
          </informalfigure>
        </section>

        <section>
          <title><code>createValueMap</code></title>

          <programlisting language="kl">ValueProducer&lt;<replaceable>OutputValueType</replaceable>&gt; createValueMap(ValueProducer&lt;<replaceable>InputValueType</replaceable>&gt;, <replaceable>operatorName</replaceable>[, ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt;])</programlisting>

          <para>
            Creates a value producer with value type <replaceable>OutputValueType</replaceable> that calls the operator named <code><replaceable>operatorName</replaceable></code> to map the result of another value producer of type <code>ValueProducer&lt;<replaceable>InputValueType</replaceable>&gt;</code>.

            <itemizedlist>
              <listitem>
                <para>
                  If <code>ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt;</code> is provided, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype <programlisting language="kl">operator operatorName(<replaceable>InputValueType</replaceable> inputValue, io <replaceable>OutputValueType</replaceable> outputValue, <replaceable>SharedValueType</replaceable> sharedValue);</programlisting>
                </para>
              </listitem>

              <listitem>
                <para>
                  Otherwise, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype <programlisting language="kl">operatorName(<replaceable>InputValueType</replaceable> inputValue, io <replaceable>OutputValueType</replaceable> outputValue);</programlisting>
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <example>
            <title><code>createValueMap</code></title>
            <programlisting language="kl"><![CDATA[
operator multByPi(
  Integer input,
  io Scalar output
  )
{
  output = 3.14 * input;
}

operator multByShared(
  Integer input,
  io Scalar output,
  Scalar shared
  )
{
  output = input * shared;
}

operator entry() {
  ValueProducer<Scalar> vp;
  
  vp = createValueMap(
    createConstValue( 42 ),
    multByPi
    );
  report(vp);
  report(vp.produce());

  vp = createValueMap(
    createConstValue( 2 ),
    multByShared,
    createConstValue( Scalar(2.71) )
    );
  report(vp);
  report(vp.produce());
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[]
ValueProducer<Scalar>
131.88
ValueProducer<Scalar>
5.42
            ]]></screen>
          </informalfigure>
        </section>

        <section>
          <title><code>createValueCache</code></title>

          <programlisting language="kl">ValueProducer&lt;<replaceable>ValueType</replaceable>&gt; createValueCache(ValueProducer&lt;<replaceable>ValueType</replaceable>&gt;)</programlisting>

          <para>
            Creates a value producer with value type <replaceable>ValueType</replaceable> that caches the result of another value producer of the same type.  For more information on producer caches, see refer to the
            <link condition="html" xlink:href="http://documentation.fabric-engine.com/latest/FabricEngine-MapReduceProgrammingGuide.html">
              <quote>Map-Reduce Programming Guide</quote>
            </link>
            <link condition="pdf" xlink:href="http://documentation.fabric-engine.com/latest/FabricEngine-MapReduceProgrammingGuide.pdf">
              <quote>Map-Reduce Programming Guide</quote>
            </link>
            .
          </para>

          <example>
            <title><code>createValueCache</code></title>
            <programlisting language="kl"><![CDATA[
operator valueGen(
  io Scalar output
  )
{
  output = 2.71;
  report("Generating output = " + output);
}

operator entry() {
  ValueProducer<Scalar> vp = createValueCache(createValueGenerator(valueGen));
  report("vp.produce() = " + vp.produce());
  report("vp.produce() = " + vp.produce());
  report("calling vp.flush()");
  vp.flush();
  report("vp.produce() = " + vp.produce());
  report("vp.produce() = " + vp.produce());
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[]
Generating output = 2.71
vp.produce() = 2.71
vp.produce() = 2.71
calling vp.flush()
Generating output = 2.71
vp.produce() = 2.71
vp.produce() = 2.71
            ]]></screen>
          </informalfigure>
        </section>
      </section>

      <section>
        <title>Array Producer Creation Functions</title>

        <section>
          <title><code>createConstArray</code></title>

          <programlisting language="kl">ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt; createConstArray(<replaceable>arrayExpr</replaceable>)</programlisting>

          <para>
            Creates a constant array producer.  <replaceable>arrayExpr</replaceable> must be an expression that evaluates to an array (variable-size, fixed-size or sliced) whose element type is <replaceable>ElementType</replaceable>.  The array is <quote>frozen</quote> in the resulting array producer; that is, if the array used in the call to <code>createConstArray</code> is later changed, the result of  <code>createConstArray</code> will not change.
          </para>
 
          <example>
            <title><code>createConstArray</code></title>
            <programlisting language="kl"><![CDATA[
operator entry() {
  Integer a[]; a.push(42); a.push(17); a.push(52); a.push(871);
  ArrayProducer<Integer> ap = createConstArray(a);
  report(ap);
  report(ap.getCount());
  report(ap.produce(2));
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[
ArrayProducer<Integer>
4
52
            ]]></screen>
          </informalfigure>
       </section>

        <section>
          <title><code>createArrayGenerator</code></title>

          <para>
            <code>createArrayGenerator</code> has one of the following <quote>prototypes</quote>:

            <programlisting language="kl">
function ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt; createArrayGenerator(
  ValueProducer&lt;Size&gt; countProducer,
  <replaceable>operatorName</replaceable>
  )

function ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt; createArrayGenerator(
  ValueProducer&lt;Size&gt; countProducer,
  <replaceable>operatorName</replaceable>,
  ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt; sharedValueProducer
  )
            </programlisting>
          </para>

          <para>
            <code>createArrayGenerator</code> creates an array producer with element type <replaceable>ElementType</replaceable> that calls the operator named <code><replaceable>operatorName</replaceable></code> to generate the elements of the array.
          </para>

          <para>
            If <code>sharedValueProducer</code> is provided, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype

            <programlisting language="kl">
operator <replaceable>operatorName</replaceable>(
  io <replaceable>ElementType</replaceable> elementValue,
  Size index,
  Size count,
  <replaceable>SharedValueType</replaceable> sharedValue
  );
            </programlisting>

            Otherwise, it must name an operator with any of the following prototypes:

            <programlisting language="kl">
operator <replaceable>operatorName</replaceable>(
  io <replaceable>ElementType</replaceable> elementValue,
  Size index,
  Size count
  );

operator <replaceable>operatorName</replaceable>(
  io <replaceable>ElementType</replaceable> elementValue,
  Size index
  );

operator <replaceable>operatorName</replaceable>(
  io <replaceable>ElementType</replaceable> elementValue
  );
            </programlisting>
          </para>
 
          <example>
            <title><code>createArrayGenerator</code></title>
            <programlisting language="kl"><![CDATA[
operator generator(
  io Float32 value,
  Size index,
  Size count,
  Float32 shared
  )
{
  report("generator: value=" + value + " index=" + index + " count=" + count + " shared=" + shared);
  value = shared*index;
}

operator entry() {
  ValueProducer<Size> cvg = createConstValue(Size(10));
  ArrayProducer<Float32> ag4 = createArrayGenerator(cvg, generator, createConstValue(Float32(3.141)));
  report(ag4);
  report(ag4.getCount());
  for (Size i=0; i<10; ++i)
    report(ag4.produce(i));
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[
ArrayProducer<Float32>
10
generator: value=0 index=0 count=10 shared=3.141
0
generator: value=0 index=1 count=10 shared=3.141
3.141
generator: value=0 index=2 count=10 shared=3.141
6.282
generator: value=0 index=3 count=10 shared=3.141
9.423
generator: value=0 index=4 count=10 shared=3.141
12.564
generator: value=0 index=5 count=10 shared=3.141
15.705
generator: value=0 index=6 count=10 shared=3.141
18.846
generator: value=0 index=7 count=10 shared=3.141
21.987
generator: value=0 index=8 count=10 shared=3.141
25.128
generator: value=0 index=9 count=10 shared=3.141
28.269
            ]]></screen>
          </informalfigure>
        </section>

        <section>
          <title><code>createArrayTransform</code></title>

          <para>
            <code>createArrayTransform</code> has one of the following <quote>prototypes</quote>:

            <programlisting language="kl">
function ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt; createArrayTransform(
  ArrayProducer&lt;ElementType&gt; inputArrayProducer,
  <replaceable>operatorName</replaceable>
  )

function ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt; createArrayTransform(
  ArrayProducer&lt;ElementType&gt; inputArrayProducer,
  <replaceable>operatorName</replaceable>,
  ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt; sharedValueProducer
  )
            </programlisting>
          </para>

          <para>
            <code>createArrayTransform</code> creates an array producer with element type <replaceable>ElementType</replaceable> that transforms <code>inputArrayProducer</code> by calling the operator named <code><replaceable>operatorName</replaceable></code> to transform the individual elements.
          </para>

          <para>
            If <code>sharedValueProducer</code> is provided, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype

            <programlisting language="kl">
operator <replaceable>operatorName</replaceable>(
  io <replaceable>ElementType</replaceable> elementValue,
  Size index,
  Size count,
  <replaceable>SharedValueType</replaceable> sharedValue
  );
            </programlisting>

            Otherwise, it must name an operator with any of the following prototypes:

            <programlisting language="kl">
operator <replaceable>operatorName</replaceable>(
  io <replaceable>ElementType</replaceable> elementValue,
  Size index,
  Size count
  );

operator <replaceable>operatorName</replaceable>(
  io <replaceable>ElementType</replaceable> elementValue,
  Size index
  );

operator <replaceable>operatorName</replaceable>(
  io <replaceable>ElementType</replaceable> elementValue
  );
            </programlisting>
          </para>
 
          <example>
            <title><code>createArrayTransform</code></title>
            <programlisting language="kl"><![CDATA[
operator transform(
  io Float32 value,
  Size index,
  Size count,
  Float32 shared
  )
{
  report("transform: value=" + value + " index=" + index + " count=" + count + " shared=" + shared);
  value *= shared * (index + 1);
}

operator entry() {
  Float32 inputArray[]; inputArray.push(5.6); inputArray.push(-3.4); inputArray.push(1.4142);
  ArrayProducer<Float32> inputArrayProducer = createConstArray(inputArray);
  ArrayProducer<Float32> transformedArrayProducer = createArrayTransform(inputArrayProducer, transform, createConstValue(Float32(2.56)));
  report(transformedArrayProducer);
  report(transformedArrayProducer.getCount());
  Size transformedArrayProducerCount = transformedArrayProducer.getCount();
  for (Index i=0; i<transformedArrayProducerCount; ++i)
    report(transformedArrayProducer.produce(i));
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[
ArrayProducer<Float32>
3
transform: value=5.6 index=0 count=3 shared=2.56
14.336
transform: value=-3.4 index=1 count=3 shared=2.56
-17.408
transform: value=1.4142 index=2 count=3 shared=2.56
10.86106
            ]]></screen>
          </informalfigure>
        </section>

        <section>
          <title><code>createArrayMap</code></title>

          <para>
            <code>createArrayMap</code> has one of the following <quote>prototypes</quote>:

            <programlisting language="kl">
function ArrayProducer&lt;<replaceable>OutputElementType</replaceable>&gt; createArrayMap(
  ArrayProducer&lt;InputElementType&gt; inputArrayProducer,
  <replaceable>operatorName</replaceable>
  )

function ArrayProducer&lt;<replaceable>OutputElementType</replaceable>&gt; createArrayMap(
  ArrayProducer&lt;InputElementType&gt; inputArrayProducer,
  <replaceable>operatorName</replaceable>,
  ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt; sharedValueProducer
  )
            </programlisting>
          </para>

          <para>
            <code>createArrayMap</code> creates an array producer with element type <code><replaceable>OutputElementType</replaceable></code> that maps <code>inputArrayProducer</code> of a potentially different element type <code><replaceable>InputElementType</replaceable></code> by calling the operator named <code><replaceable>operatorName</replaceable></code> to map the individual elements.
          </para>

          <para>
            If <code>sharedValueProducer</code> is provided, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype

            <programlisting language="kl">
operator <replaceable>operatorName</replaceable>(
  <replaceable>InputElementType</replaceable> inputElementValue,
  io <replaceable>OutputElementType</replaceable> outputElementValue,
  Size index,
  Size count,
  <replaceable>SharedValueType</replaceable> sharedValue
  );
            </programlisting>

            Otherwise, it must name an operator with any of the following prototypes:

            <programlisting language="kl">
operator <replaceable>operatorName</replaceable>(
  <replaceable>InputElementType</replaceable> inputElementValue,
  io <replaceable>OutputElementType</replaceable> outputElementValue,
  Size index,
  Size count
  );

operator <replaceable>operatorName</replaceable>(
  <replaceable>InputElementType</replaceable> inputElementValue,
  io <replaceable>OutputElementType</replaceable> outputElementValue,
  Size index
  );

operator <replaceable>operatorName</replaceable>(
  <replaceable>InputElementType</replaceable> inputElementValue,
  io <replaceable>OutputElementType</replaceable> outputElementValue
  );
            </programlisting>
          </para>
 
          <example>
            <title><code>createArrayMap</code></title>
            <programlisting language="kl"><![CDATA[
operator map(
  Float32 inputValue,
  io String outputValue,
  Size index,
  Size count,
  Float32 shared
  )
{
  report("map: inputValue=" + inputValue + " index=" + index + " count=" + count + " shared=" + shared);
  Float32 float32Value = inputValue * shared * (index + 1);
  if (abs(float32Value) < 1.0)
    outputValue = "small";
  else if (abs(float32Value) < 10.0)
    outputValue = "medium";
  else if (abs(float32Value) < 100.0)
    outputValue = "large";
  else
    outputValue = "x-large";
}

operator entry() {
  Float32 inputArray[]; inputArray.push(5.6); inputArray.push(-0.034); inputArray.push(1.4142);
  ArrayProducer<Float32> inputArrayProducer = createConstArray(inputArray);
  ArrayProducer<String> mappedArrayProducer = createArrayMap(inputArrayProducer, map, createConstValue(Float32(2.56)));
  report(mappedArrayProducer);
  report(mappedArrayProducer.getCount());
  Size mappedArrayProducerCount = mappedArrayProducer.getCount();
  for (Index i=0; i<mappedArrayProducerCount; ++i)
    report(mappedArrayProducer.produce(i));
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[
ArrayProducer<String>
3
map: inputValue=5.6 index=0 count=3 shared=2.56
large
map: inputValue=-0.034 index=1 count=3 shared=2.56
small
map: inputValue=1.4142 index=2 count=3 shared=2.56
large
            ]]></screen>
          </informalfigure>
        </section>

        <section>
          <title><code>createArrayCache</code></title>

          <programlisting language="kl">ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt; createArrayCache(ArrayProducer&lt;<replaceable>ElementType</replaceable>&gt;)</programlisting>

          <para>
            Creates an array producer with array type <replaceable>ElementType</replaceable> that caches the result of another array producer of the same type.  For more information on producer caches, refer to the
            <link condition="html" xlink:href="http://documentation.fabric-engine.com/latest/FabricEngine-MapReduceProgrammingGuide.html">
              <quote>Map-Reduce Programming Guide</quote>
            </link>
            <link condition="pdf" xlink:href="http://documentation.fabric-engine.com/latest/FabricEngine-MapReduceProgrammingGuide.pdf">
              <quote>Map-Reduce Programming Guide</quote>
            </link>
            .
          </para>

          <example>
            <title><code>createArrayCache</code></title>
            <programlisting language="kl"><![CDATA[
operator elementGen(
  io Scalar output,
  Size index
  )
{
  output = 2.71 * index;
  report("Generating output = " + output);
}

operator entry() {
  ArrayProducer<Scalar> ap = createArrayCache(
    createArrayGenerator(
      createConstValue(Size(4)),
      elementGen
      )
    );
  report("ap.produce(2) = " + ap.produce(2));
  report("ap.produce(2) = " + ap.produce(2));
  report("calling ap.flush()");
  ap.flush();
  report("ap.produce(2) = " + ap.produce(2));
  report("ap.produce(2) = " + ap.produce(2));
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[
Generating output = 5.42
ap.produce(2) = 5.42
ap.produce(2) = 5.42
calling ap.flush()
Generating output = 5.42
ap.produce(2) = 5.42
ap.produce(2) = 5.42
            ]]></screen>
          </informalfigure>
        </section>
      </section>

      <section>
        <title>Reduce Creation Functions</title>

        <section>
          <title><code>createReduce</code></title>

          <para>
            <code>createReduce</code> has one of the following <quote>prototypes</quote>:

            <programlisting language="kl">
function ValueProducer&lt;<replaceable>OutputValueType</replaceable>&gt; createReduce(
  ArrayProducer&lt;InputElementType&gt; inputArrayProducer,
  <replaceable>operatorName</replaceable>
  )

function ValueProducer&lt;<replaceable>OutputValueType</replaceable>&gt; createReduce(
  ArrayProducer&lt;InputElementType&gt; inputArrayProducer,
  <replaceable>operatorName</replaceable>,
  ValueProducer&lt;<replaceable>SharedValueType</replaceable>&gt; sharedValueProducer
  )
            </programlisting>
          </para>

          <para>
            <code>createReduce</code> creates a value producer with value type <code><replaceable>OutputValueType</replaceable></code> that reduces <code>inputArrayProducer</code> by calling the operator named <code><replaceable>operatorName</replaceable></code> to contribute the individual elements to the reduction.
          </para>

          <para>
            If <code>sharedValueProducer</code> is provided, <code><replaceable>operatorName</replaceable></code> must name an operator with prototype

            <programlisting language="kl">
operator <replaceable>operatorName</replaceable>(
  <replaceable>InputElementType</replaceable> inputElementValue,
  io <replaceable>OutputValueType</replaceable> outputValue,
  Size index,
  Size count,
  <replaceable>SharedValueType</replaceable> sharedValue
  );
            </programlisting>

            Otherwise, it must name an operator with any of the following prototypes:

            <programlisting language="kl">
operator <replaceable>operatorName</replaceable>(
  <replaceable>InputElementType</replaceable> inputElementValue,
  io <replaceable>OutputValueType</replaceable> outputValue,
  Size index,
  Size count
  );

operator <replaceable>operatorName</replaceable>(
  <replaceable>InputElementType</replaceable> inputElementValue,
  io <replaceable>OutputValueType</replaceable> outputValue,
  Size index
  );

operator <replaceable>operatorName</replaceable>(
  <replaceable>InputElementType</replaceable> inputElementValue,
  io <replaceable>OutputValueType</replaceable> outputValue
  );
            </programlisting>
          </para>
 
          <example>
            <title><code>createReduce</code></title>
            <programlisting language="kl"><![CDATA[
operator generator(
  io Integer outputValue,
  Size index
  )
{
  outputValue = index + 1;
}

operator reduce(
  Integer inputValue,
  io Integer outputValue
  )
{
  report("reduce: inputValue=" + inputValue);
  outputValue += inputValue;
}

operator entry() {
  ValueProducer<Integer> sum = createReduce(
    createArrayGenerator(
      createConstValue(Size(10)),
      generator
      ),
    reduce
    );
  report("sum.produce() = " + sum.produce());
}
            ]]></programlisting>
          </example>

          <informalfigure>
            <simpara>Output:</simpara>
            <screen><![CDATA[
reduce: inputValue=1
reduce: inputValue=2
reduce: inputValue=3
reduce: inputValue=4
reduce: inputValue=5
reduce: inputValue=6
reduce: inputValue=7
reduce: inputValue=8
reduce: inputValue=9
reduce: inputValue=10
sum.produce() = 55
            ]]></screen>
          </informalfigure>
        </section>
      </section>
    </section>
  </chapter>
</book>
